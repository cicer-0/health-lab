
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Exam
 * 
 */
export type Exam = $Result.DefaultSelection<Prisma.$ExamPayload>
/**
 * Model ExamType
 * 
 */
export type ExamType = $Result.DefaultSelection<Prisma.$ExamTypePayload>
/**
 * Model ExamDetail
 * 
 */
export type ExamDetail = $Result.DefaultSelection<Prisma.$ExamDetailPayload>
/**
 * Model Sample
 * 
 */
export type Sample = $Result.DefaultSelection<Prisma.$SamplePayload>
/**
 * Model SampleType
 * 
 */
export type SampleType = $Result.DefaultSelection<Prisma.$SampleTypePayload>
/**
 * Model Magnitude
 * 
 */
export type Magnitude = $Result.DefaultSelection<Prisma.$MagnitudePayload>
/**
 * Model Result
 * 
 */
export type Result = $Result.DefaultSelection<Prisma.$ResultPayload>
/**
 * Model DetailResult
 * 
 */
export type DetailResult = $Result.DefaultSelection<Prisma.$DetailResultPayload>
/**
 * Model Patient
 * 
 */
export type Patient = $Result.DefaultSelection<Prisma.$PatientPayload>
/**
 * Model Doctor
 * 
 */
export type Doctor = $Result.DefaultSelection<Prisma.$DoctorPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Exams
 * const exams = await prisma.exam.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Exams
   * const exams = await prisma.exam.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.exam`: Exposes CRUD operations for the **Exam** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exams
    * const exams = await prisma.exam.findMany()
    * ```
    */
  get exam(): Prisma.ExamDelegate<ExtArgs>;

  /**
   * `prisma.examType`: Exposes CRUD operations for the **ExamType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExamTypes
    * const examTypes = await prisma.examType.findMany()
    * ```
    */
  get examType(): Prisma.ExamTypeDelegate<ExtArgs>;

  /**
   * `prisma.examDetail`: Exposes CRUD operations for the **ExamDetail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExamDetails
    * const examDetails = await prisma.examDetail.findMany()
    * ```
    */
  get examDetail(): Prisma.ExamDetailDelegate<ExtArgs>;

  /**
   * `prisma.sample`: Exposes CRUD operations for the **Sample** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Samples
    * const samples = await prisma.sample.findMany()
    * ```
    */
  get sample(): Prisma.SampleDelegate<ExtArgs>;

  /**
   * `prisma.sampleType`: Exposes CRUD operations for the **SampleType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SampleTypes
    * const sampleTypes = await prisma.sampleType.findMany()
    * ```
    */
  get sampleType(): Prisma.SampleTypeDelegate<ExtArgs>;

  /**
   * `prisma.magnitude`: Exposes CRUD operations for the **Magnitude** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Magnitudes
    * const magnitudes = await prisma.magnitude.findMany()
    * ```
    */
  get magnitude(): Prisma.MagnitudeDelegate<ExtArgs>;

  /**
   * `prisma.result`: Exposes CRUD operations for the **Result** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Results
    * const results = await prisma.result.findMany()
    * ```
    */
  get result(): Prisma.ResultDelegate<ExtArgs>;

  /**
   * `prisma.detailResult`: Exposes CRUD operations for the **DetailResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DetailResults
    * const detailResults = await prisma.detailResult.findMany()
    * ```
    */
  get detailResult(): Prisma.DetailResultDelegate<ExtArgs>;

  /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<ExtArgs>;

  /**
   * `prisma.doctor`: Exposes CRUD operations for the **Doctor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doctors
    * const doctors = await prisma.doctor.findMany()
    * ```
    */
  get doctor(): Prisma.DoctorDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.9.1
   * Query Engine version: 23fdc5965b1e05fc54e5f26ed3de66776b93de64
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Exam: 'Exam',
    ExamType: 'ExamType',
    ExamDetail: 'ExamDetail',
    Sample: 'Sample',
    SampleType: 'SampleType',
    Magnitude: 'Magnitude',
    Result: 'Result',
    DetailResult: 'DetailResult',
    Patient: 'Patient',
    Doctor: 'Doctor'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'exam' | 'examType' | 'examDetail' | 'sample' | 'sampleType' | 'magnitude' | 'result' | 'detailResult' | 'patient' | 'doctor'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Exam: {
        payload: Prisma.$ExamPayload<ExtArgs>
        fields: Prisma.ExamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExamFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExamFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>
          }
          findFirst: {
            args: Prisma.ExamFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExamFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>
          }
          findMany: {
            args: Prisma.ExamFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>[]
          }
          create: {
            args: Prisma.ExamCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>
          }
          createMany: {
            args: Prisma.ExamCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ExamDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>
          }
          update: {
            args: Prisma.ExamUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>
          }
          deleteMany: {
            args: Prisma.ExamDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExamUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExamUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamPayload>
          }
          aggregate: {
            args: Prisma.ExamAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExam>
          }
          groupBy: {
            args: Prisma.ExamGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExamGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExamCountArgs<ExtArgs>,
            result: $Utils.Optional<ExamCountAggregateOutputType> | number
          }
        }
      }
      ExamType: {
        payload: Prisma.$ExamTypePayload<ExtArgs>
        fields: Prisma.ExamTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExamTypeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExamTypeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamTypePayload>
          }
          findFirst: {
            args: Prisma.ExamTypeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExamTypeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamTypePayload>
          }
          findMany: {
            args: Prisma.ExamTypeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamTypePayload>[]
          }
          create: {
            args: Prisma.ExamTypeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamTypePayload>
          }
          createMany: {
            args: Prisma.ExamTypeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ExamTypeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamTypePayload>
          }
          update: {
            args: Prisma.ExamTypeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamTypePayload>
          }
          deleteMany: {
            args: Prisma.ExamTypeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExamTypeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExamTypeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamTypePayload>
          }
          aggregate: {
            args: Prisma.ExamTypeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExamType>
          }
          groupBy: {
            args: Prisma.ExamTypeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExamTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExamTypeCountArgs<ExtArgs>,
            result: $Utils.Optional<ExamTypeCountAggregateOutputType> | number
          }
        }
      }
      ExamDetail: {
        payload: Prisma.$ExamDetailPayload<ExtArgs>
        fields: Prisma.ExamDetailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExamDetailFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamDetailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExamDetailFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamDetailPayload>
          }
          findFirst: {
            args: Prisma.ExamDetailFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamDetailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExamDetailFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamDetailPayload>
          }
          findMany: {
            args: Prisma.ExamDetailFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamDetailPayload>[]
          }
          create: {
            args: Prisma.ExamDetailCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamDetailPayload>
          }
          createMany: {
            args: Prisma.ExamDetailCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ExamDetailDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamDetailPayload>
          }
          update: {
            args: Prisma.ExamDetailUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamDetailPayload>
          }
          deleteMany: {
            args: Prisma.ExamDetailDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExamDetailUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExamDetailUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamDetailPayload>
          }
          aggregate: {
            args: Prisma.ExamDetailAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExamDetail>
          }
          groupBy: {
            args: Prisma.ExamDetailGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExamDetailGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExamDetailCountArgs<ExtArgs>,
            result: $Utils.Optional<ExamDetailCountAggregateOutputType> | number
          }
        }
      }
      Sample: {
        payload: Prisma.$SamplePayload<ExtArgs>
        fields: Prisma.SampleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SampleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SamplePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SampleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          findFirst: {
            args: Prisma.SampleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SamplePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SampleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          findMany: {
            args: Prisma.SampleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>[]
          }
          create: {
            args: Prisma.SampleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          createMany: {
            args: Prisma.SampleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SampleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          update: {
            args: Prisma.SampleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          deleteMany: {
            args: Prisma.SampleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SampleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SampleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          aggregate: {
            args: Prisma.SampleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSample>
          }
          groupBy: {
            args: Prisma.SampleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SampleGroupByOutputType>[]
          }
          count: {
            args: Prisma.SampleCountArgs<ExtArgs>,
            result: $Utils.Optional<SampleCountAggregateOutputType> | number
          }
        }
      }
      SampleType: {
        payload: Prisma.$SampleTypePayload<ExtArgs>
        fields: Prisma.SampleTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SampleTypeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SampleTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SampleTypeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SampleTypePayload>
          }
          findFirst: {
            args: Prisma.SampleTypeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SampleTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SampleTypeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SampleTypePayload>
          }
          findMany: {
            args: Prisma.SampleTypeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SampleTypePayload>[]
          }
          create: {
            args: Prisma.SampleTypeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SampleTypePayload>
          }
          createMany: {
            args: Prisma.SampleTypeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SampleTypeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SampleTypePayload>
          }
          update: {
            args: Prisma.SampleTypeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SampleTypePayload>
          }
          deleteMany: {
            args: Prisma.SampleTypeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SampleTypeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SampleTypeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SampleTypePayload>
          }
          aggregate: {
            args: Prisma.SampleTypeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSampleType>
          }
          groupBy: {
            args: Prisma.SampleTypeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SampleTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.SampleTypeCountArgs<ExtArgs>,
            result: $Utils.Optional<SampleTypeCountAggregateOutputType> | number
          }
        }
      }
      Magnitude: {
        payload: Prisma.$MagnitudePayload<ExtArgs>
        fields: Prisma.MagnitudeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MagnitudeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MagnitudePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MagnitudeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MagnitudePayload>
          }
          findFirst: {
            args: Prisma.MagnitudeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MagnitudePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MagnitudeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MagnitudePayload>
          }
          findMany: {
            args: Prisma.MagnitudeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MagnitudePayload>[]
          }
          create: {
            args: Prisma.MagnitudeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MagnitudePayload>
          }
          createMany: {
            args: Prisma.MagnitudeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MagnitudeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MagnitudePayload>
          }
          update: {
            args: Prisma.MagnitudeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MagnitudePayload>
          }
          deleteMany: {
            args: Prisma.MagnitudeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MagnitudeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MagnitudeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MagnitudePayload>
          }
          aggregate: {
            args: Prisma.MagnitudeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMagnitude>
          }
          groupBy: {
            args: Prisma.MagnitudeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MagnitudeGroupByOutputType>[]
          }
          count: {
            args: Prisma.MagnitudeCountArgs<ExtArgs>,
            result: $Utils.Optional<MagnitudeCountAggregateOutputType> | number
          }
        }
      }
      Result: {
        payload: Prisma.$ResultPayload<ExtArgs>
        fields: Prisma.ResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResultFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResultFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>
          }
          findFirst: {
            args: Prisma.ResultFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResultFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>
          }
          findMany: {
            args: Prisma.ResultFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>[]
          }
          create: {
            args: Prisma.ResultCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>
          }
          createMany: {
            args: Prisma.ResultCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ResultDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>
          }
          update: {
            args: Prisma.ResultUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>
          }
          deleteMany: {
            args: Prisma.ResultDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ResultUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ResultUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>
          }
          aggregate: {
            args: Prisma.ResultAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateResult>
          }
          groupBy: {
            args: Prisma.ResultGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResultCountArgs<ExtArgs>,
            result: $Utils.Optional<ResultCountAggregateOutputType> | number
          }
        }
      }
      DetailResult: {
        payload: Prisma.$DetailResultPayload<ExtArgs>
        fields: Prisma.DetailResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DetailResultFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DetailResultFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailResultPayload>
          }
          findFirst: {
            args: Prisma.DetailResultFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DetailResultFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailResultPayload>
          }
          findMany: {
            args: Prisma.DetailResultFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailResultPayload>[]
          }
          create: {
            args: Prisma.DetailResultCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailResultPayload>
          }
          createMany: {
            args: Prisma.DetailResultCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DetailResultDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailResultPayload>
          }
          update: {
            args: Prisma.DetailResultUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailResultPayload>
          }
          deleteMany: {
            args: Prisma.DetailResultDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DetailResultUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DetailResultUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailResultPayload>
          }
          aggregate: {
            args: Prisma.DetailResultAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDetailResult>
          }
          groupBy: {
            args: Prisma.DetailResultGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DetailResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.DetailResultCountArgs<ExtArgs>,
            result: $Utils.Optional<DetailResultCountAggregateOutputType> | number
          }
        }
      }
      Patient: {
        payload: Prisma.$PatientPayload<ExtArgs>
        fields: Prisma.PatientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findFirst: {
            args: Prisma.PatientFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findMany: {
            args: Prisma.PatientFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          create: {
            args: Prisma.PatientCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          createMany: {
            args: Prisma.PatientCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PatientDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          update: {
            args: Prisma.PatientUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          deleteMany: {
            args: Prisma.PatientDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PatientUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PatientUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          aggregate: {
            args: Prisma.PatientAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePatient>
          }
          groupBy: {
            args: Prisma.PatientGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientCountArgs<ExtArgs>,
            result: $Utils.Optional<PatientCountAggregateOutputType> | number
          }
        }
      }
      Doctor: {
        payload: Prisma.$DoctorPayload<ExtArgs>
        fields: Prisma.DoctorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          findFirst: {
            args: Prisma.DoctorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          findMany: {
            args: Prisma.DoctorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>[]
          }
          create: {
            args: Prisma.DoctorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          createMany: {
            args: Prisma.DoctorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DoctorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          update: {
            args: Prisma.DoctorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          deleteMany: {
            args: Prisma.DoctorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DoctorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          aggregate: {
            args: Prisma.DoctorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDoctor>
          }
          groupBy: {
            args: Prisma.DoctorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DoctorGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorCountArgs<ExtArgs>,
            result: $Utils.Optional<DoctorCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ExamCountOutputType
   */

  export type ExamCountOutputType = {
    samples: number
    details: number
  }

  export type ExamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    samples?: boolean | ExamCountOutputTypeCountSamplesArgs
    details?: boolean | ExamCountOutputTypeCountDetailsArgs
  }

  // Custom InputTypes

  /**
   * ExamCountOutputType without action
   */
  export type ExamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamCountOutputType
     */
    select?: ExamCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ExamCountOutputType without action
   */
  export type ExamCountOutputTypeCountSamplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleWhereInput
  }


  /**
   * ExamCountOutputType without action
   */
  export type ExamCountOutputTypeCountDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamDetailWhereInput
  }



  /**
   * Count Type ExamTypeCountOutputType
   */

  export type ExamTypeCountOutputType = {
    details: number
  }

  export type ExamTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    details?: boolean | ExamTypeCountOutputTypeCountDetailsArgs
  }

  // Custom InputTypes

  /**
   * ExamTypeCountOutputType without action
   */
  export type ExamTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamTypeCountOutputType
     */
    select?: ExamTypeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ExamTypeCountOutputType without action
   */
  export type ExamTypeCountOutputTypeCountDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamDetailWhereInput
  }



  /**
   * Count Type SampleTypeCountOutputType
   */

  export type SampleTypeCountOutputType = {
    samples: number
  }

  export type SampleTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    samples?: boolean | SampleTypeCountOutputTypeCountSamplesArgs
  }

  // Custom InputTypes

  /**
   * SampleTypeCountOutputType without action
   */
  export type SampleTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleTypeCountOutputType
     */
    select?: SampleTypeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SampleTypeCountOutputType without action
   */
  export type SampleTypeCountOutputTypeCountSamplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleWhereInput
  }



  /**
   * Count Type MagnitudeCountOutputType
   */

  export type MagnitudeCountOutputType = {
    details: number
  }

  export type MagnitudeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    details?: boolean | MagnitudeCountOutputTypeCountDetailsArgs
  }

  // Custom InputTypes

  /**
   * MagnitudeCountOutputType without action
   */
  export type MagnitudeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MagnitudeCountOutputType
     */
    select?: MagnitudeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * MagnitudeCountOutputType without action
   */
  export type MagnitudeCountOutputTypeCountDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DetailResultWhereInput
  }



  /**
   * Count Type ResultCountOutputType
   */

  export type ResultCountOutputType = {
    details: number
  }

  export type ResultCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    details?: boolean | ResultCountOutputTypeCountDetailsArgs
  }

  // Custom InputTypes

  /**
   * ResultCountOutputType without action
   */
  export type ResultCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResultCountOutputType
     */
    select?: ResultCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ResultCountOutputType without action
   */
  export type ResultCountOutputTypeCountDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DetailResultWhereInput
  }



  /**
   * Count Type PatientCountOutputType
   */

  export type PatientCountOutputType = {
    exams: number
  }

  export type PatientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exams?: boolean | PatientCountOutputTypeCountExamsArgs
  }

  // Custom InputTypes

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     */
    select?: PatientCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountExamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamWhereInput
  }



  /**
   * Count Type DoctorCountOutputType
   */

  export type DoctorCountOutputType = {
    exams: number
  }

  export type DoctorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exams?: boolean | DoctorCountOutputTypeCountExamsArgs
  }

  // Custom InputTypes

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorCountOutputType
     */
    select?: DoctorCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountExamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Exam
   */

  export type AggregateExam = {
    _count: ExamCountAggregateOutputType | null
    _avg: ExamAvgAggregateOutputType | null
    _sum: ExamSumAggregateOutputType | null
    _min: ExamMinAggregateOutputType | null
    _max: ExamMaxAggregateOutputType | null
  }

  export type ExamAvgAggregateOutputType = {
    id: number | null
    doctorId: number | null
    patientId: number | null
  }

  export type ExamSumAggregateOutputType = {
    id: number | null
    doctorId: number | null
    patientId: number | null
  }

  export type ExamMinAggregateOutputType = {
    id: number | null
    requestDate: Date | null
    doctorId: number | null
    patientId: number | null
  }

  export type ExamMaxAggregateOutputType = {
    id: number | null
    requestDate: Date | null
    doctorId: number | null
    patientId: number | null
  }

  export type ExamCountAggregateOutputType = {
    id: number
    requestDate: number
    doctorId: number
    patientId: number
    _all: number
  }


  export type ExamAvgAggregateInputType = {
    id?: true
    doctorId?: true
    patientId?: true
  }

  export type ExamSumAggregateInputType = {
    id?: true
    doctorId?: true
    patientId?: true
  }

  export type ExamMinAggregateInputType = {
    id?: true
    requestDate?: true
    doctorId?: true
    patientId?: true
  }

  export type ExamMaxAggregateInputType = {
    id?: true
    requestDate?: true
    doctorId?: true
    patientId?: true
  }

  export type ExamCountAggregateInputType = {
    id?: true
    requestDate?: true
    doctorId?: true
    patientId?: true
    _all?: true
  }

  export type ExamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exam to aggregate.
     */
    where?: ExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     */
    orderBy?: ExamOrderByWithRelationInput | ExamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exams
    **/
    _count?: true | ExamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExamMaxAggregateInputType
  }

  export type GetExamAggregateType<T extends ExamAggregateArgs> = {
        [P in keyof T & keyof AggregateExam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExam[P]>
      : GetScalarType<T[P], AggregateExam[P]>
  }




  export type ExamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamWhereInput
    orderBy?: ExamOrderByWithAggregationInput | ExamOrderByWithAggregationInput[]
    by: ExamScalarFieldEnum[] | ExamScalarFieldEnum
    having?: ExamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExamCountAggregateInputType | true
    _avg?: ExamAvgAggregateInputType
    _sum?: ExamSumAggregateInputType
    _min?: ExamMinAggregateInputType
    _max?: ExamMaxAggregateInputType
  }

  export type ExamGroupByOutputType = {
    id: number
    requestDate: Date
    doctorId: number
    patientId: number
    _count: ExamCountAggregateOutputType | null
    _avg: ExamAvgAggregateOutputType | null
    _sum: ExamSumAggregateOutputType | null
    _min: ExamMinAggregateOutputType | null
    _max: ExamMaxAggregateOutputType | null
  }

  type GetExamGroupByPayload<T extends ExamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExamGroupByOutputType[P]>
            : GetScalarType<T[P], ExamGroupByOutputType[P]>
        }
      >
    >


  export type ExamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestDate?: boolean
    doctorId?: boolean
    patientId?: boolean
    samples?: boolean | Exam$samplesArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    details?: boolean | Exam$detailsArgs<ExtArgs>
    _count?: boolean | ExamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exam"]>

  export type ExamSelectScalar = {
    id?: boolean
    requestDate?: boolean
    doctorId?: boolean
    patientId?: boolean
  }

  export type ExamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    samples?: boolean | Exam$samplesArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    details?: boolean | Exam$detailsArgs<ExtArgs>
    _count?: boolean | ExamCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ExamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Exam"
    objects: {
      samples: Prisma.$SamplePayload<ExtArgs>[]
      doctor: Prisma.$DoctorPayload<ExtArgs>
      patient: Prisma.$PatientPayload<ExtArgs>
      details: Prisma.$ExamDetailPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      requestDate: Date
      doctorId: number
      patientId: number
    }, ExtArgs["result"]["exam"]>
    composites: {}
  }


  type ExamGetPayload<S extends boolean | null | undefined | ExamDefaultArgs> = $Result.GetResult<Prisma.$ExamPayload, S>

  type ExamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExamFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExamCountAggregateInputType | true
    }

  export interface ExamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exam'], meta: { name: 'Exam' } }
    /**
     * Find zero or one Exam that matches the filter.
     * @param {ExamFindUniqueArgs} args - Arguments to find a Exam
     * @example
     * // Get one Exam
     * const exam = await prisma.exam.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExamFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExamFindUniqueArgs<ExtArgs>>
    ): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Exam that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExamFindUniqueOrThrowArgs} args - Arguments to find a Exam
     * @example
     * // Get one Exam
     * const exam = await prisma.exam.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExamFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExamFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Exam that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamFindFirstArgs} args - Arguments to find a Exam
     * @example
     * // Get one Exam
     * const exam = await prisma.exam.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExamFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExamFindFirstArgs<ExtArgs>>
    ): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Exam that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamFindFirstOrThrowArgs} args - Arguments to find a Exam
     * @example
     * // Get one Exam
     * const exam = await prisma.exam.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExamFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExamFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Exams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exams
     * const exams = await prisma.exam.findMany()
     * 
     * // Get first 10 Exams
     * const exams = await prisma.exam.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const examWithIdOnly = await prisma.exam.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExamFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExamFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Exam.
     * @param {ExamCreateArgs} args - Arguments to create a Exam.
     * @example
     * // Create one Exam
     * const Exam = await prisma.exam.create({
     *   data: {
     *     // ... data to create a Exam
     *   }
     * })
     * 
    **/
    create<T extends ExamCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExamCreateArgs<ExtArgs>>
    ): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Exams.
     *     @param {ExamCreateManyArgs} args - Arguments to create many Exams.
     *     @example
     *     // Create many Exams
     *     const exam = await prisma.exam.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExamCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExamCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Exam.
     * @param {ExamDeleteArgs} args - Arguments to delete one Exam.
     * @example
     * // Delete one Exam
     * const Exam = await prisma.exam.delete({
     *   where: {
     *     // ... filter to delete one Exam
     *   }
     * })
     * 
    **/
    delete<T extends ExamDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExamDeleteArgs<ExtArgs>>
    ): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Exam.
     * @param {ExamUpdateArgs} args - Arguments to update one Exam.
     * @example
     * // Update one Exam
     * const exam = await prisma.exam.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExamUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExamUpdateArgs<ExtArgs>>
    ): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Exams.
     * @param {ExamDeleteManyArgs} args - Arguments to filter Exams to delete.
     * @example
     * // Delete a few Exams
     * const { count } = await prisma.exam.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExamDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExamDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exams
     * const exam = await prisma.exam.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExamUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExamUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exam.
     * @param {ExamUpsertArgs} args - Arguments to update or create a Exam.
     * @example
     * // Update or create a Exam
     * const exam = await prisma.exam.upsert({
     *   create: {
     *     // ... data to create a Exam
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exam we want to update
     *   }
     * })
    **/
    upsert<T extends ExamUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExamUpsertArgs<ExtArgs>>
    ): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Exams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamCountArgs} args - Arguments to filter Exams to count.
     * @example
     * // Count the number of Exams
     * const count = await prisma.exam.count({
     *   where: {
     *     // ... the filter for the Exams we want to count
     *   }
     * })
    **/
    count<T extends ExamCountArgs>(
      args?: Subset<T, ExamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExamAggregateArgs>(args: Subset<T, ExamAggregateArgs>): Prisma.PrismaPromise<GetExamAggregateType<T>>

    /**
     * Group by Exam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExamGroupByArgs['orderBy'] }
        : { orderBy?: ExamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exam model
   */
  readonly fields: ExamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exam.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    samples<T extends Exam$samplesArgs<ExtArgs> = {}>(args?: Subset<T, Exam$samplesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, 'findMany'> | Null>;

    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    details<T extends Exam$detailsArgs<ExtArgs> = {}>(args?: Subset<T, Exam$detailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamDetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Exam model
   */ 
  interface ExamFieldRefs {
    readonly id: FieldRef<"Exam", 'Int'>
    readonly requestDate: FieldRef<"Exam", 'DateTime'>
    readonly doctorId: FieldRef<"Exam", 'Int'>
    readonly patientId: FieldRef<"Exam", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Exam findUnique
   */
  export type ExamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * Filter, which Exam to fetch.
     */
    where: ExamWhereUniqueInput
  }


  /**
   * Exam findUniqueOrThrow
   */
  export type ExamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * Filter, which Exam to fetch.
     */
    where: ExamWhereUniqueInput
  }


  /**
   * Exam findFirst
   */
  export type ExamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * Filter, which Exam to fetch.
     */
    where?: ExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     */
    orderBy?: ExamOrderByWithRelationInput | ExamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exams.
     */
    cursor?: ExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exams.
     */
    distinct?: ExamScalarFieldEnum | ExamScalarFieldEnum[]
  }


  /**
   * Exam findFirstOrThrow
   */
  export type ExamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * Filter, which Exam to fetch.
     */
    where?: ExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     */
    orderBy?: ExamOrderByWithRelationInput | ExamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exams.
     */
    cursor?: ExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exams.
     */
    distinct?: ExamScalarFieldEnum | ExamScalarFieldEnum[]
  }


  /**
   * Exam findMany
   */
  export type ExamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * Filter, which Exams to fetch.
     */
    where?: ExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exams to fetch.
     */
    orderBy?: ExamOrderByWithRelationInput | ExamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exams.
     */
    cursor?: ExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exams.
     */
    skip?: number
    distinct?: ExamScalarFieldEnum | ExamScalarFieldEnum[]
  }


  /**
   * Exam create
   */
  export type ExamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * The data needed to create a Exam.
     */
    data: XOR<ExamCreateInput, ExamUncheckedCreateInput>
  }


  /**
   * Exam createMany
   */
  export type ExamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exams.
     */
    data: ExamCreateManyInput | ExamCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Exam update
   */
  export type ExamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * The data needed to update a Exam.
     */
    data: XOR<ExamUpdateInput, ExamUncheckedUpdateInput>
    /**
     * Choose, which Exam to update.
     */
    where: ExamWhereUniqueInput
  }


  /**
   * Exam updateMany
   */
  export type ExamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exams.
     */
    data: XOR<ExamUpdateManyMutationInput, ExamUncheckedUpdateManyInput>
    /**
     * Filter which Exams to update
     */
    where?: ExamWhereInput
  }


  /**
   * Exam upsert
   */
  export type ExamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * The filter to search for the Exam to update in case it exists.
     */
    where: ExamWhereUniqueInput
    /**
     * In case the Exam found by the `where` argument doesn't exist, create a new Exam with this data.
     */
    create: XOR<ExamCreateInput, ExamUncheckedCreateInput>
    /**
     * In case the Exam was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExamUpdateInput, ExamUncheckedUpdateInput>
  }


  /**
   * Exam delete
   */
  export type ExamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamInclude<ExtArgs> | null
    /**
     * Filter which Exam to delete.
     */
    where: ExamWhereUniqueInput
  }


  /**
   * Exam deleteMany
   */
  export type ExamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exams to delete
     */
    where?: ExamWhereInput
  }


  /**
   * Exam.samples
   */
  export type Exam$samplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleInclude<ExtArgs> | null
    where?: SampleWhereInput
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    cursor?: SampleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SampleScalarFieldEnum | SampleScalarFieldEnum[]
  }


  /**
   * Exam.details
   */
  export type Exam$detailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamDetail
     */
    select?: ExamDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamDetailInclude<ExtArgs> | null
    where?: ExamDetailWhereInput
    orderBy?: ExamDetailOrderByWithRelationInput | ExamDetailOrderByWithRelationInput[]
    cursor?: ExamDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExamDetailScalarFieldEnum | ExamDetailScalarFieldEnum[]
  }


  /**
   * Exam without action
   */
  export type ExamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamInclude<ExtArgs> | null
  }



  /**
   * Model ExamType
   */

  export type AggregateExamType = {
    _count: ExamTypeCountAggregateOutputType | null
    _avg: ExamTypeAvgAggregateOutputType | null
    _sum: ExamTypeSumAggregateOutputType | null
    _min: ExamTypeMinAggregateOutputType | null
    _max: ExamTypeMaxAggregateOutputType | null
  }

  export type ExamTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type ExamTypeSumAggregateOutputType = {
    id: number | null
  }

  export type ExamTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type ExamTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type ExamTypeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type ExamTypeAvgAggregateInputType = {
    id?: true
  }

  export type ExamTypeSumAggregateInputType = {
    id?: true
  }

  export type ExamTypeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type ExamTypeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type ExamTypeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type ExamTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExamType to aggregate.
     */
    where?: ExamTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamTypes to fetch.
     */
    orderBy?: ExamTypeOrderByWithRelationInput | ExamTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExamTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExamTypes
    **/
    _count?: true | ExamTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExamTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExamTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExamTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExamTypeMaxAggregateInputType
  }

  export type GetExamTypeAggregateType<T extends ExamTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateExamType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExamType[P]>
      : GetScalarType<T[P], AggregateExamType[P]>
  }




  export type ExamTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamTypeWhereInput
    orderBy?: ExamTypeOrderByWithAggregationInput | ExamTypeOrderByWithAggregationInput[]
    by: ExamTypeScalarFieldEnum[] | ExamTypeScalarFieldEnum
    having?: ExamTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExamTypeCountAggregateInputType | true
    _avg?: ExamTypeAvgAggregateInputType
    _sum?: ExamTypeSumAggregateInputType
    _min?: ExamTypeMinAggregateInputType
    _max?: ExamTypeMaxAggregateInputType
  }

  export type ExamTypeGroupByOutputType = {
    id: number
    name: string
    description: string
    _count: ExamTypeCountAggregateOutputType | null
    _avg: ExamTypeAvgAggregateOutputType | null
    _sum: ExamTypeSumAggregateOutputType | null
    _min: ExamTypeMinAggregateOutputType | null
    _max: ExamTypeMaxAggregateOutputType | null
  }

  type GetExamTypeGroupByPayload<T extends ExamTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExamTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExamTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExamTypeGroupByOutputType[P]>
            : GetScalarType<T[P], ExamTypeGroupByOutputType[P]>
        }
      >
    >


  export type ExamTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    details?: boolean | ExamType$detailsArgs<ExtArgs>
    _count?: boolean | ExamTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["examType"]>

  export type ExamTypeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
  }

  export type ExamTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    details?: boolean | ExamType$detailsArgs<ExtArgs>
    _count?: boolean | ExamTypeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ExamTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExamType"
    objects: {
      details: Prisma.$ExamDetailPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
    }, ExtArgs["result"]["examType"]>
    composites: {}
  }


  type ExamTypeGetPayload<S extends boolean | null | undefined | ExamTypeDefaultArgs> = $Result.GetResult<Prisma.$ExamTypePayload, S>

  type ExamTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExamTypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExamTypeCountAggregateInputType | true
    }

  export interface ExamTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExamType'], meta: { name: 'ExamType' } }
    /**
     * Find zero or one ExamType that matches the filter.
     * @param {ExamTypeFindUniqueArgs} args - Arguments to find a ExamType
     * @example
     * // Get one ExamType
     * const examType = await prisma.examType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExamTypeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExamTypeFindUniqueArgs<ExtArgs>>
    ): Prisma__ExamTypeClient<$Result.GetResult<Prisma.$ExamTypePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ExamType that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExamTypeFindUniqueOrThrowArgs} args - Arguments to find a ExamType
     * @example
     * // Get one ExamType
     * const examType = await prisma.examType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExamTypeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExamTypeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExamTypeClient<$Result.GetResult<Prisma.$ExamTypePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ExamType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamTypeFindFirstArgs} args - Arguments to find a ExamType
     * @example
     * // Get one ExamType
     * const examType = await prisma.examType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExamTypeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExamTypeFindFirstArgs<ExtArgs>>
    ): Prisma__ExamTypeClient<$Result.GetResult<Prisma.$ExamTypePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ExamType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamTypeFindFirstOrThrowArgs} args - Arguments to find a ExamType
     * @example
     * // Get one ExamType
     * const examType = await prisma.examType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExamTypeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExamTypeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExamTypeClient<$Result.GetResult<Prisma.$ExamTypePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ExamTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExamTypes
     * const examTypes = await prisma.examType.findMany()
     * 
     * // Get first 10 ExamTypes
     * const examTypes = await prisma.examType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const examTypeWithIdOnly = await prisma.examType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExamTypeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExamTypeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamTypePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ExamType.
     * @param {ExamTypeCreateArgs} args - Arguments to create a ExamType.
     * @example
     * // Create one ExamType
     * const ExamType = await prisma.examType.create({
     *   data: {
     *     // ... data to create a ExamType
     *   }
     * })
     * 
    **/
    create<T extends ExamTypeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExamTypeCreateArgs<ExtArgs>>
    ): Prisma__ExamTypeClient<$Result.GetResult<Prisma.$ExamTypePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ExamTypes.
     *     @param {ExamTypeCreateManyArgs} args - Arguments to create many ExamTypes.
     *     @example
     *     // Create many ExamTypes
     *     const examType = await prisma.examType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExamTypeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExamTypeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ExamType.
     * @param {ExamTypeDeleteArgs} args - Arguments to delete one ExamType.
     * @example
     * // Delete one ExamType
     * const ExamType = await prisma.examType.delete({
     *   where: {
     *     // ... filter to delete one ExamType
     *   }
     * })
     * 
    **/
    delete<T extends ExamTypeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExamTypeDeleteArgs<ExtArgs>>
    ): Prisma__ExamTypeClient<$Result.GetResult<Prisma.$ExamTypePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ExamType.
     * @param {ExamTypeUpdateArgs} args - Arguments to update one ExamType.
     * @example
     * // Update one ExamType
     * const examType = await prisma.examType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExamTypeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExamTypeUpdateArgs<ExtArgs>>
    ): Prisma__ExamTypeClient<$Result.GetResult<Prisma.$ExamTypePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ExamTypes.
     * @param {ExamTypeDeleteManyArgs} args - Arguments to filter ExamTypes to delete.
     * @example
     * // Delete a few ExamTypes
     * const { count } = await prisma.examType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExamTypeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExamTypeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExamTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExamTypes
     * const examType = await prisma.examType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExamTypeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExamTypeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ExamType.
     * @param {ExamTypeUpsertArgs} args - Arguments to update or create a ExamType.
     * @example
     * // Update or create a ExamType
     * const examType = await prisma.examType.upsert({
     *   create: {
     *     // ... data to create a ExamType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExamType we want to update
     *   }
     * })
    **/
    upsert<T extends ExamTypeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExamTypeUpsertArgs<ExtArgs>>
    ): Prisma__ExamTypeClient<$Result.GetResult<Prisma.$ExamTypePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ExamTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamTypeCountArgs} args - Arguments to filter ExamTypes to count.
     * @example
     * // Count the number of ExamTypes
     * const count = await prisma.examType.count({
     *   where: {
     *     // ... the filter for the ExamTypes we want to count
     *   }
     * })
    **/
    count<T extends ExamTypeCountArgs>(
      args?: Subset<T, ExamTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExamTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExamType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExamTypeAggregateArgs>(args: Subset<T, ExamTypeAggregateArgs>): Prisma.PrismaPromise<GetExamTypeAggregateType<T>>

    /**
     * Group by ExamType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExamTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExamTypeGroupByArgs['orderBy'] }
        : { orderBy?: ExamTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExamTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExamType model
   */
  readonly fields: ExamTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExamType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExamTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    details<T extends ExamType$detailsArgs<ExtArgs> = {}>(args?: Subset<T, ExamType$detailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamDetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ExamType model
   */ 
  interface ExamTypeFieldRefs {
    readonly id: FieldRef<"ExamType", 'Int'>
    readonly name: FieldRef<"ExamType", 'String'>
    readonly description: FieldRef<"ExamType", 'String'>
  }
    

  // Custom InputTypes

  /**
   * ExamType findUnique
   */
  export type ExamTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamType
     */
    select?: ExamTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamTypeInclude<ExtArgs> | null
    /**
     * Filter, which ExamType to fetch.
     */
    where: ExamTypeWhereUniqueInput
  }


  /**
   * ExamType findUniqueOrThrow
   */
  export type ExamTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamType
     */
    select?: ExamTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamTypeInclude<ExtArgs> | null
    /**
     * Filter, which ExamType to fetch.
     */
    where: ExamTypeWhereUniqueInput
  }


  /**
   * ExamType findFirst
   */
  export type ExamTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamType
     */
    select?: ExamTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamTypeInclude<ExtArgs> | null
    /**
     * Filter, which ExamType to fetch.
     */
    where?: ExamTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamTypes to fetch.
     */
    orderBy?: ExamTypeOrderByWithRelationInput | ExamTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExamTypes.
     */
    cursor?: ExamTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExamTypes.
     */
    distinct?: ExamTypeScalarFieldEnum | ExamTypeScalarFieldEnum[]
  }


  /**
   * ExamType findFirstOrThrow
   */
  export type ExamTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamType
     */
    select?: ExamTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamTypeInclude<ExtArgs> | null
    /**
     * Filter, which ExamType to fetch.
     */
    where?: ExamTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamTypes to fetch.
     */
    orderBy?: ExamTypeOrderByWithRelationInput | ExamTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExamTypes.
     */
    cursor?: ExamTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExamTypes.
     */
    distinct?: ExamTypeScalarFieldEnum | ExamTypeScalarFieldEnum[]
  }


  /**
   * ExamType findMany
   */
  export type ExamTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamType
     */
    select?: ExamTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamTypeInclude<ExtArgs> | null
    /**
     * Filter, which ExamTypes to fetch.
     */
    where?: ExamTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamTypes to fetch.
     */
    orderBy?: ExamTypeOrderByWithRelationInput | ExamTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExamTypes.
     */
    cursor?: ExamTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamTypes.
     */
    skip?: number
    distinct?: ExamTypeScalarFieldEnum | ExamTypeScalarFieldEnum[]
  }


  /**
   * ExamType create
   */
  export type ExamTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamType
     */
    select?: ExamTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a ExamType.
     */
    data: XOR<ExamTypeCreateInput, ExamTypeUncheckedCreateInput>
  }


  /**
   * ExamType createMany
   */
  export type ExamTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExamTypes.
     */
    data: ExamTypeCreateManyInput | ExamTypeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ExamType update
   */
  export type ExamTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamType
     */
    select?: ExamTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a ExamType.
     */
    data: XOR<ExamTypeUpdateInput, ExamTypeUncheckedUpdateInput>
    /**
     * Choose, which ExamType to update.
     */
    where: ExamTypeWhereUniqueInput
  }


  /**
   * ExamType updateMany
   */
  export type ExamTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExamTypes.
     */
    data: XOR<ExamTypeUpdateManyMutationInput, ExamTypeUncheckedUpdateManyInput>
    /**
     * Filter which ExamTypes to update
     */
    where?: ExamTypeWhereInput
  }


  /**
   * ExamType upsert
   */
  export type ExamTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamType
     */
    select?: ExamTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the ExamType to update in case it exists.
     */
    where: ExamTypeWhereUniqueInput
    /**
     * In case the ExamType found by the `where` argument doesn't exist, create a new ExamType with this data.
     */
    create: XOR<ExamTypeCreateInput, ExamTypeUncheckedCreateInput>
    /**
     * In case the ExamType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExamTypeUpdateInput, ExamTypeUncheckedUpdateInput>
  }


  /**
   * ExamType delete
   */
  export type ExamTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamType
     */
    select?: ExamTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamTypeInclude<ExtArgs> | null
    /**
     * Filter which ExamType to delete.
     */
    where: ExamTypeWhereUniqueInput
  }


  /**
   * ExamType deleteMany
   */
  export type ExamTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExamTypes to delete
     */
    where?: ExamTypeWhereInput
  }


  /**
   * ExamType.details
   */
  export type ExamType$detailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamDetail
     */
    select?: ExamDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamDetailInclude<ExtArgs> | null
    where?: ExamDetailWhereInput
    orderBy?: ExamDetailOrderByWithRelationInput | ExamDetailOrderByWithRelationInput[]
    cursor?: ExamDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExamDetailScalarFieldEnum | ExamDetailScalarFieldEnum[]
  }


  /**
   * ExamType without action
   */
  export type ExamTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamType
     */
    select?: ExamTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamTypeInclude<ExtArgs> | null
  }



  /**
   * Model ExamDetail
   */

  export type AggregateExamDetail = {
    _count: ExamDetailCountAggregateOutputType | null
    _avg: ExamDetailAvgAggregateOutputType | null
    _sum: ExamDetailSumAggregateOutputType | null
    _min: ExamDetailMinAggregateOutputType | null
    _max: ExamDetailMaxAggregateOutputType | null
  }

  export type ExamDetailAvgAggregateOutputType = {
    id: number | null
    examId: number | null
    examTypeId: number | null
  }

  export type ExamDetailSumAggregateOutputType = {
    id: number | null
    examId: number | null
    examTypeId: number | null
  }

  export type ExamDetailMinAggregateOutputType = {
    id: number | null
    examId: number | null
    examTypeId: number | null
  }

  export type ExamDetailMaxAggregateOutputType = {
    id: number | null
    examId: number | null
    examTypeId: number | null
  }

  export type ExamDetailCountAggregateOutputType = {
    id: number
    examId: number
    examTypeId: number
    _all: number
  }


  export type ExamDetailAvgAggregateInputType = {
    id?: true
    examId?: true
    examTypeId?: true
  }

  export type ExamDetailSumAggregateInputType = {
    id?: true
    examId?: true
    examTypeId?: true
  }

  export type ExamDetailMinAggregateInputType = {
    id?: true
    examId?: true
    examTypeId?: true
  }

  export type ExamDetailMaxAggregateInputType = {
    id?: true
    examId?: true
    examTypeId?: true
  }

  export type ExamDetailCountAggregateInputType = {
    id?: true
    examId?: true
    examTypeId?: true
    _all?: true
  }

  export type ExamDetailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExamDetail to aggregate.
     */
    where?: ExamDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamDetails to fetch.
     */
    orderBy?: ExamDetailOrderByWithRelationInput | ExamDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExamDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExamDetails
    **/
    _count?: true | ExamDetailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExamDetailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExamDetailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExamDetailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExamDetailMaxAggregateInputType
  }

  export type GetExamDetailAggregateType<T extends ExamDetailAggregateArgs> = {
        [P in keyof T & keyof AggregateExamDetail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExamDetail[P]>
      : GetScalarType<T[P], AggregateExamDetail[P]>
  }




  export type ExamDetailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamDetailWhereInput
    orderBy?: ExamDetailOrderByWithAggregationInput | ExamDetailOrderByWithAggregationInput[]
    by: ExamDetailScalarFieldEnum[] | ExamDetailScalarFieldEnum
    having?: ExamDetailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExamDetailCountAggregateInputType | true
    _avg?: ExamDetailAvgAggregateInputType
    _sum?: ExamDetailSumAggregateInputType
    _min?: ExamDetailMinAggregateInputType
    _max?: ExamDetailMaxAggregateInputType
  }

  export type ExamDetailGroupByOutputType = {
    id: number
    examId: number
    examTypeId: number
    _count: ExamDetailCountAggregateOutputType | null
    _avg: ExamDetailAvgAggregateOutputType | null
    _sum: ExamDetailSumAggregateOutputType | null
    _min: ExamDetailMinAggregateOutputType | null
    _max: ExamDetailMaxAggregateOutputType | null
  }

  type GetExamDetailGroupByPayload<T extends ExamDetailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExamDetailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExamDetailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExamDetailGroupByOutputType[P]>
            : GetScalarType<T[P], ExamDetailGroupByOutputType[P]>
        }
      >
    >


  export type ExamDetailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    examId?: boolean
    examTypeId?: boolean
    exam?: boolean | ExamDefaultArgs<ExtArgs>
    examType?: boolean | ExamTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["examDetail"]>

  export type ExamDetailSelectScalar = {
    id?: boolean
    examId?: boolean
    examTypeId?: boolean
  }

  export type ExamDetailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exam?: boolean | ExamDefaultArgs<ExtArgs>
    examType?: boolean | ExamTypeDefaultArgs<ExtArgs>
  }


  export type $ExamDetailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExamDetail"
    objects: {
      exam: Prisma.$ExamPayload<ExtArgs>
      examType: Prisma.$ExamTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      examId: number
      examTypeId: number
    }, ExtArgs["result"]["examDetail"]>
    composites: {}
  }


  type ExamDetailGetPayload<S extends boolean | null | undefined | ExamDetailDefaultArgs> = $Result.GetResult<Prisma.$ExamDetailPayload, S>

  type ExamDetailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExamDetailFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExamDetailCountAggregateInputType | true
    }

  export interface ExamDetailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExamDetail'], meta: { name: 'ExamDetail' } }
    /**
     * Find zero or one ExamDetail that matches the filter.
     * @param {ExamDetailFindUniqueArgs} args - Arguments to find a ExamDetail
     * @example
     * // Get one ExamDetail
     * const examDetail = await prisma.examDetail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExamDetailFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExamDetailFindUniqueArgs<ExtArgs>>
    ): Prisma__ExamDetailClient<$Result.GetResult<Prisma.$ExamDetailPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ExamDetail that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExamDetailFindUniqueOrThrowArgs} args - Arguments to find a ExamDetail
     * @example
     * // Get one ExamDetail
     * const examDetail = await prisma.examDetail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExamDetailFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExamDetailFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExamDetailClient<$Result.GetResult<Prisma.$ExamDetailPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ExamDetail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamDetailFindFirstArgs} args - Arguments to find a ExamDetail
     * @example
     * // Get one ExamDetail
     * const examDetail = await prisma.examDetail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExamDetailFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExamDetailFindFirstArgs<ExtArgs>>
    ): Prisma__ExamDetailClient<$Result.GetResult<Prisma.$ExamDetailPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ExamDetail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamDetailFindFirstOrThrowArgs} args - Arguments to find a ExamDetail
     * @example
     * // Get one ExamDetail
     * const examDetail = await prisma.examDetail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExamDetailFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExamDetailFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExamDetailClient<$Result.GetResult<Prisma.$ExamDetailPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ExamDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamDetailFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExamDetails
     * const examDetails = await prisma.examDetail.findMany()
     * 
     * // Get first 10 ExamDetails
     * const examDetails = await prisma.examDetail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const examDetailWithIdOnly = await prisma.examDetail.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExamDetailFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExamDetailFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamDetailPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ExamDetail.
     * @param {ExamDetailCreateArgs} args - Arguments to create a ExamDetail.
     * @example
     * // Create one ExamDetail
     * const ExamDetail = await prisma.examDetail.create({
     *   data: {
     *     // ... data to create a ExamDetail
     *   }
     * })
     * 
    **/
    create<T extends ExamDetailCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExamDetailCreateArgs<ExtArgs>>
    ): Prisma__ExamDetailClient<$Result.GetResult<Prisma.$ExamDetailPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ExamDetails.
     *     @param {ExamDetailCreateManyArgs} args - Arguments to create many ExamDetails.
     *     @example
     *     // Create many ExamDetails
     *     const examDetail = await prisma.examDetail.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExamDetailCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExamDetailCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ExamDetail.
     * @param {ExamDetailDeleteArgs} args - Arguments to delete one ExamDetail.
     * @example
     * // Delete one ExamDetail
     * const ExamDetail = await prisma.examDetail.delete({
     *   where: {
     *     // ... filter to delete one ExamDetail
     *   }
     * })
     * 
    **/
    delete<T extends ExamDetailDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExamDetailDeleteArgs<ExtArgs>>
    ): Prisma__ExamDetailClient<$Result.GetResult<Prisma.$ExamDetailPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ExamDetail.
     * @param {ExamDetailUpdateArgs} args - Arguments to update one ExamDetail.
     * @example
     * // Update one ExamDetail
     * const examDetail = await prisma.examDetail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExamDetailUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExamDetailUpdateArgs<ExtArgs>>
    ): Prisma__ExamDetailClient<$Result.GetResult<Prisma.$ExamDetailPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ExamDetails.
     * @param {ExamDetailDeleteManyArgs} args - Arguments to filter ExamDetails to delete.
     * @example
     * // Delete a few ExamDetails
     * const { count } = await prisma.examDetail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExamDetailDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExamDetailDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExamDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamDetailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExamDetails
     * const examDetail = await prisma.examDetail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExamDetailUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExamDetailUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ExamDetail.
     * @param {ExamDetailUpsertArgs} args - Arguments to update or create a ExamDetail.
     * @example
     * // Update or create a ExamDetail
     * const examDetail = await prisma.examDetail.upsert({
     *   create: {
     *     // ... data to create a ExamDetail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExamDetail we want to update
     *   }
     * })
    **/
    upsert<T extends ExamDetailUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExamDetailUpsertArgs<ExtArgs>>
    ): Prisma__ExamDetailClient<$Result.GetResult<Prisma.$ExamDetailPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ExamDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamDetailCountArgs} args - Arguments to filter ExamDetails to count.
     * @example
     * // Count the number of ExamDetails
     * const count = await prisma.examDetail.count({
     *   where: {
     *     // ... the filter for the ExamDetails we want to count
     *   }
     * })
    **/
    count<T extends ExamDetailCountArgs>(
      args?: Subset<T, ExamDetailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExamDetailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExamDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamDetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExamDetailAggregateArgs>(args: Subset<T, ExamDetailAggregateArgs>): Prisma.PrismaPromise<GetExamDetailAggregateType<T>>

    /**
     * Group by ExamDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamDetailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExamDetailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExamDetailGroupByArgs['orderBy'] }
        : { orderBy?: ExamDetailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExamDetailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamDetailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExamDetail model
   */
  readonly fields: ExamDetailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExamDetail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExamDetailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    exam<T extends ExamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExamDefaultArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    examType<T extends ExamTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExamTypeDefaultArgs<ExtArgs>>): Prisma__ExamTypeClient<$Result.GetResult<Prisma.$ExamTypePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ExamDetail model
   */ 
  interface ExamDetailFieldRefs {
    readonly id: FieldRef<"ExamDetail", 'Int'>
    readonly examId: FieldRef<"ExamDetail", 'Int'>
    readonly examTypeId: FieldRef<"ExamDetail", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * ExamDetail findUnique
   */
  export type ExamDetailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamDetail
     */
    select?: ExamDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamDetailInclude<ExtArgs> | null
    /**
     * Filter, which ExamDetail to fetch.
     */
    where: ExamDetailWhereUniqueInput
  }


  /**
   * ExamDetail findUniqueOrThrow
   */
  export type ExamDetailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamDetail
     */
    select?: ExamDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamDetailInclude<ExtArgs> | null
    /**
     * Filter, which ExamDetail to fetch.
     */
    where: ExamDetailWhereUniqueInput
  }


  /**
   * ExamDetail findFirst
   */
  export type ExamDetailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamDetail
     */
    select?: ExamDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamDetailInclude<ExtArgs> | null
    /**
     * Filter, which ExamDetail to fetch.
     */
    where?: ExamDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamDetails to fetch.
     */
    orderBy?: ExamDetailOrderByWithRelationInput | ExamDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExamDetails.
     */
    cursor?: ExamDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExamDetails.
     */
    distinct?: ExamDetailScalarFieldEnum | ExamDetailScalarFieldEnum[]
  }


  /**
   * ExamDetail findFirstOrThrow
   */
  export type ExamDetailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamDetail
     */
    select?: ExamDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamDetailInclude<ExtArgs> | null
    /**
     * Filter, which ExamDetail to fetch.
     */
    where?: ExamDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamDetails to fetch.
     */
    orderBy?: ExamDetailOrderByWithRelationInput | ExamDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExamDetails.
     */
    cursor?: ExamDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExamDetails.
     */
    distinct?: ExamDetailScalarFieldEnum | ExamDetailScalarFieldEnum[]
  }


  /**
   * ExamDetail findMany
   */
  export type ExamDetailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamDetail
     */
    select?: ExamDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamDetailInclude<ExtArgs> | null
    /**
     * Filter, which ExamDetails to fetch.
     */
    where?: ExamDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamDetails to fetch.
     */
    orderBy?: ExamDetailOrderByWithRelationInput | ExamDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExamDetails.
     */
    cursor?: ExamDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamDetails.
     */
    skip?: number
    distinct?: ExamDetailScalarFieldEnum | ExamDetailScalarFieldEnum[]
  }


  /**
   * ExamDetail create
   */
  export type ExamDetailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamDetail
     */
    select?: ExamDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamDetailInclude<ExtArgs> | null
    /**
     * The data needed to create a ExamDetail.
     */
    data: XOR<ExamDetailCreateInput, ExamDetailUncheckedCreateInput>
  }


  /**
   * ExamDetail createMany
   */
  export type ExamDetailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExamDetails.
     */
    data: ExamDetailCreateManyInput | ExamDetailCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ExamDetail update
   */
  export type ExamDetailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamDetail
     */
    select?: ExamDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamDetailInclude<ExtArgs> | null
    /**
     * The data needed to update a ExamDetail.
     */
    data: XOR<ExamDetailUpdateInput, ExamDetailUncheckedUpdateInput>
    /**
     * Choose, which ExamDetail to update.
     */
    where: ExamDetailWhereUniqueInput
  }


  /**
   * ExamDetail updateMany
   */
  export type ExamDetailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExamDetails.
     */
    data: XOR<ExamDetailUpdateManyMutationInput, ExamDetailUncheckedUpdateManyInput>
    /**
     * Filter which ExamDetails to update
     */
    where?: ExamDetailWhereInput
  }


  /**
   * ExamDetail upsert
   */
  export type ExamDetailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamDetail
     */
    select?: ExamDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamDetailInclude<ExtArgs> | null
    /**
     * The filter to search for the ExamDetail to update in case it exists.
     */
    where: ExamDetailWhereUniqueInput
    /**
     * In case the ExamDetail found by the `where` argument doesn't exist, create a new ExamDetail with this data.
     */
    create: XOR<ExamDetailCreateInput, ExamDetailUncheckedCreateInput>
    /**
     * In case the ExamDetail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExamDetailUpdateInput, ExamDetailUncheckedUpdateInput>
  }


  /**
   * ExamDetail delete
   */
  export type ExamDetailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamDetail
     */
    select?: ExamDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamDetailInclude<ExtArgs> | null
    /**
     * Filter which ExamDetail to delete.
     */
    where: ExamDetailWhereUniqueInput
  }


  /**
   * ExamDetail deleteMany
   */
  export type ExamDetailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExamDetails to delete
     */
    where?: ExamDetailWhereInput
  }


  /**
   * ExamDetail without action
   */
  export type ExamDetailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamDetail
     */
    select?: ExamDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamDetailInclude<ExtArgs> | null
  }



  /**
   * Model Sample
   */

  export type AggregateSample = {
    _count: SampleCountAggregateOutputType | null
    _avg: SampleAvgAggregateOutputType | null
    _sum: SampleSumAggregateOutputType | null
    _min: SampleMinAggregateOutputType | null
    _max: SampleMaxAggregateOutputType | null
  }

  export type SampleAvgAggregateOutputType = {
    id: number | null
    examId: number | null
    sampleTypeId: number | null
  }

  export type SampleSumAggregateOutputType = {
    id: number | null
    examId: number | null
    sampleTypeId: number | null
  }

  export type SampleMinAggregateOutputType = {
    id: number | null
    examId: number | null
    sampleDate: Date | null
    sampleTypeId: number | null
    observations: string | null
  }

  export type SampleMaxAggregateOutputType = {
    id: number | null
    examId: number | null
    sampleDate: Date | null
    sampleTypeId: number | null
    observations: string | null
  }

  export type SampleCountAggregateOutputType = {
    id: number
    examId: number
    sampleDate: number
    sampleTypeId: number
    observations: number
    _all: number
  }


  export type SampleAvgAggregateInputType = {
    id?: true
    examId?: true
    sampleTypeId?: true
  }

  export type SampleSumAggregateInputType = {
    id?: true
    examId?: true
    sampleTypeId?: true
  }

  export type SampleMinAggregateInputType = {
    id?: true
    examId?: true
    sampleDate?: true
    sampleTypeId?: true
    observations?: true
  }

  export type SampleMaxAggregateInputType = {
    id?: true
    examId?: true
    sampleDate?: true
    sampleTypeId?: true
    observations?: true
  }

  export type SampleCountAggregateInputType = {
    id?: true
    examId?: true
    sampleDate?: true
    sampleTypeId?: true
    observations?: true
    _all?: true
  }

  export type SampleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sample to aggregate.
     */
    where?: SampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Samples to fetch.
     */
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Samples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Samples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Samples
    **/
    _count?: true | SampleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SampleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SampleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SampleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SampleMaxAggregateInputType
  }

  export type GetSampleAggregateType<T extends SampleAggregateArgs> = {
        [P in keyof T & keyof AggregateSample]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSample[P]>
      : GetScalarType<T[P], AggregateSample[P]>
  }




  export type SampleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleWhereInput
    orderBy?: SampleOrderByWithAggregationInput | SampleOrderByWithAggregationInput[]
    by: SampleScalarFieldEnum[] | SampleScalarFieldEnum
    having?: SampleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SampleCountAggregateInputType | true
    _avg?: SampleAvgAggregateInputType
    _sum?: SampleSumAggregateInputType
    _min?: SampleMinAggregateInputType
    _max?: SampleMaxAggregateInputType
  }

  export type SampleGroupByOutputType = {
    id: number
    examId: number
    sampleDate: Date
    sampleTypeId: number
    observations: string | null
    _count: SampleCountAggregateOutputType | null
    _avg: SampleAvgAggregateOutputType | null
    _sum: SampleSumAggregateOutputType | null
    _min: SampleMinAggregateOutputType | null
    _max: SampleMaxAggregateOutputType | null
  }

  type GetSampleGroupByPayload<T extends SampleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SampleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SampleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SampleGroupByOutputType[P]>
            : GetScalarType<T[P], SampleGroupByOutputType[P]>
        }
      >
    >


  export type SampleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    examId?: boolean
    sampleDate?: boolean
    sampleTypeId?: boolean
    observations?: boolean
    result?: boolean | Sample$resultArgs<ExtArgs>
    exam?: boolean | ExamDefaultArgs<ExtArgs>
    sampleType?: boolean | SampleTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sample"]>

  export type SampleSelectScalar = {
    id?: boolean
    examId?: boolean
    sampleDate?: boolean
    sampleTypeId?: boolean
    observations?: boolean
  }

  export type SampleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    result?: boolean | Sample$resultArgs<ExtArgs>
    exam?: boolean | ExamDefaultArgs<ExtArgs>
    sampleType?: boolean | SampleTypeDefaultArgs<ExtArgs>
  }


  export type $SamplePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sample"
    objects: {
      result: Prisma.$ResultPayload<ExtArgs> | null
      exam: Prisma.$ExamPayload<ExtArgs>
      sampleType: Prisma.$SampleTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      examId: number
      sampleDate: Date
      sampleTypeId: number
      observations: string | null
    }, ExtArgs["result"]["sample"]>
    composites: {}
  }


  type SampleGetPayload<S extends boolean | null | undefined | SampleDefaultArgs> = $Result.GetResult<Prisma.$SamplePayload, S>

  type SampleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SampleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SampleCountAggregateInputType | true
    }

  export interface SampleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sample'], meta: { name: 'Sample' } }
    /**
     * Find zero or one Sample that matches the filter.
     * @param {SampleFindUniqueArgs} args - Arguments to find a Sample
     * @example
     * // Get one Sample
     * const sample = await prisma.sample.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SampleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SampleFindUniqueArgs<ExtArgs>>
    ): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Sample that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SampleFindUniqueOrThrowArgs} args - Arguments to find a Sample
     * @example
     * // Get one Sample
     * const sample = await prisma.sample.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SampleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SampleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Sample that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleFindFirstArgs} args - Arguments to find a Sample
     * @example
     * // Get one Sample
     * const sample = await prisma.sample.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SampleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SampleFindFirstArgs<ExtArgs>>
    ): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Sample that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleFindFirstOrThrowArgs} args - Arguments to find a Sample
     * @example
     * // Get one Sample
     * const sample = await prisma.sample.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SampleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SampleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Samples that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Samples
     * const samples = await prisma.sample.findMany()
     * 
     * // Get first 10 Samples
     * const samples = await prisma.sample.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sampleWithIdOnly = await prisma.sample.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SampleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SampleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Sample.
     * @param {SampleCreateArgs} args - Arguments to create a Sample.
     * @example
     * // Create one Sample
     * const Sample = await prisma.sample.create({
     *   data: {
     *     // ... data to create a Sample
     *   }
     * })
     * 
    **/
    create<T extends SampleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SampleCreateArgs<ExtArgs>>
    ): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Samples.
     *     @param {SampleCreateManyArgs} args - Arguments to create many Samples.
     *     @example
     *     // Create many Samples
     *     const sample = await prisma.sample.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SampleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SampleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sample.
     * @param {SampleDeleteArgs} args - Arguments to delete one Sample.
     * @example
     * // Delete one Sample
     * const Sample = await prisma.sample.delete({
     *   where: {
     *     // ... filter to delete one Sample
     *   }
     * })
     * 
    **/
    delete<T extends SampleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SampleDeleteArgs<ExtArgs>>
    ): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Sample.
     * @param {SampleUpdateArgs} args - Arguments to update one Sample.
     * @example
     * // Update one Sample
     * const sample = await prisma.sample.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SampleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SampleUpdateArgs<ExtArgs>>
    ): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Samples.
     * @param {SampleDeleteManyArgs} args - Arguments to filter Samples to delete.
     * @example
     * // Delete a few Samples
     * const { count } = await prisma.sample.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SampleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SampleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Samples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Samples
     * const sample = await prisma.sample.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SampleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SampleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sample.
     * @param {SampleUpsertArgs} args - Arguments to update or create a Sample.
     * @example
     * // Update or create a Sample
     * const sample = await prisma.sample.upsert({
     *   create: {
     *     // ... data to create a Sample
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sample we want to update
     *   }
     * })
    **/
    upsert<T extends SampleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SampleUpsertArgs<ExtArgs>>
    ): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Samples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleCountArgs} args - Arguments to filter Samples to count.
     * @example
     * // Count the number of Samples
     * const count = await prisma.sample.count({
     *   where: {
     *     // ... the filter for the Samples we want to count
     *   }
     * })
    **/
    count<T extends SampleCountArgs>(
      args?: Subset<T, SampleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SampleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sample.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SampleAggregateArgs>(args: Subset<T, SampleAggregateArgs>): Prisma.PrismaPromise<GetSampleAggregateType<T>>

    /**
     * Group by Sample.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SampleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SampleGroupByArgs['orderBy'] }
        : { orderBy?: SampleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SampleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSampleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sample model
   */
  readonly fields: SampleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sample.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SampleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    result<T extends Sample$resultArgs<ExtArgs> = {}>(args?: Subset<T, Sample$resultArgs<ExtArgs>>): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    exam<T extends ExamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExamDefaultArgs<ExtArgs>>): Prisma__ExamClient<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    sampleType<T extends SampleTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SampleTypeDefaultArgs<ExtArgs>>): Prisma__SampleTypeClient<$Result.GetResult<Prisma.$SampleTypePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Sample model
   */ 
  interface SampleFieldRefs {
    readonly id: FieldRef<"Sample", 'Int'>
    readonly examId: FieldRef<"Sample", 'Int'>
    readonly sampleDate: FieldRef<"Sample", 'DateTime'>
    readonly sampleTypeId: FieldRef<"Sample", 'Int'>
    readonly observations: FieldRef<"Sample", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Sample findUnique
   */
  export type SampleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter, which Sample to fetch.
     */
    where: SampleWhereUniqueInput
  }


  /**
   * Sample findUniqueOrThrow
   */
  export type SampleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter, which Sample to fetch.
     */
    where: SampleWhereUniqueInput
  }


  /**
   * Sample findFirst
   */
  export type SampleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter, which Sample to fetch.
     */
    where?: SampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Samples to fetch.
     */
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Samples.
     */
    cursor?: SampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Samples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Samples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Samples.
     */
    distinct?: SampleScalarFieldEnum | SampleScalarFieldEnum[]
  }


  /**
   * Sample findFirstOrThrow
   */
  export type SampleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter, which Sample to fetch.
     */
    where?: SampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Samples to fetch.
     */
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Samples.
     */
    cursor?: SampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Samples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Samples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Samples.
     */
    distinct?: SampleScalarFieldEnum | SampleScalarFieldEnum[]
  }


  /**
   * Sample findMany
   */
  export type SampleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter, which Samples to fetch.
     */
    where?: SampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Samples to fetch.
     */
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Samples.
     */
    cursor?: SampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Samples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Samples.
     */
    skip?: number
    distinct?: SampleScalarFieldEnum | SampleScalarFieldEnum[]
  }


  /**
   * Sample create
   */
  export type SampleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * The data needed to create a Sample.
     */
    data: XOR<SampleCreateInput, SampleUncheckedCreateInput>
  }


  /**
   * Sample createMany
   */
  export type SampleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Samples.
     */
    data: SampleCreateManyInput | SampleCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Sample update
   */
  export type SampleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * The data needed to update a Sample.
     */
    data: XOR<SampleUpdateInput, SampleUncheckedUpdateInput>
    /**
     * Choose, which Sample to update.
     */
    where: SampleWhereUniqueInput
  }


  /**
   * Sample updateMany
   */
  export type SampleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Samples.
     */
    data: XOR<SampleUpdateManyMutationInput, SampleUncheckedUpdateManyInput>
    /**
     * Filter which Samples to update
     */
    where?: SampleWhereInput
  }


  /**
   * Sample upsert
   */
  export type SampleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * The filter to search for the Sample to update in case it exists.
     */
    where: SampleWhereUniqueInput
    /**
     * In case the Sample found by the `where` argument doesn't exist, create a new Sample with this data.
     */
    create: XOR<SampleCreateInput, SampleUncheckedCreateInput>
    /**
     * In case the Sample was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SampleUpdateInput, SampleUncheckedUpdateInput>
  }


  /**
   * Sample delete
   */
  export type SampleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter which Sample to delete.
     */
    where: SampleWhereUniqueInput
  }


  /**
   * Sample deleteMany
   */
  export type SampleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Samples to delete
     */
    where?: SampleWhereInput
  }


  /**
   * Sample.result
   */
  export type Sample$resultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude<ExtArgs> | null
    where?: ResultWhereInput
  }


  /**
   * Sample without action
   */
  export type SampleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleInclude<ExtArgs> | null
  }



  /**
   * Model SampleType
   */

  export type AggregateSampleType = {
    _count: SampleTypeCountAggregateOutputType | null
    _avg: SampleTypeAvgAggregateOutputType | null
    _sum: SampleTypeSumAggregateOutputType | null
    _min: SampleTypeMinAggregateOutputType | null
    _max: SampleTypeMaxAggregateOutputType | null
  }

  export type SampleTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type SampleTypeSumAggregateOutputType = {
    id: number | null
  }

  export type SampleTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type SampleTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type SampleTypeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type SampleTypeAvgAggregateInputType = {
    id?: true
  }

  export type SampleTypeSumAggregateInputType = {
    id?: true
  }

  export type SampleTypeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type SampleTypeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type SampleTypeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type SampleTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SampleType to aggregate.
     */
    where?: SampleTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SampleTypes to fetch.
     */
    orderBy?: SampleTypeOrderByWithRelationInput | SampleTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SampleTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SampleTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SampleTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SampleTypes
    **/
    _count?: true | SampleTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SampleTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SampleTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SampleTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SampleTypeMaxAggregateInputType
  }

  export type GetSampleTypeAggregateType<T extends SampleTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateSampleType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSampleType[P]>
      : GetScalarType<T[P], AggregateSampleType[P]>
  }




  export type SampleTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleTypeWhereInput
    orderBy?: SampleTypeOrderByWithAggregationInput | SampleTypeOrderByWithAggregationInput[]
    by: SampleTypeScalarFieldEnum[] | SampleTypeScalarFieldEnum
    having?: SampleTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SampleTypeCountAggregateInputType | true
    _avg?: SampleTypeAvgAggregateInputType
    _sum?: SampleTypeSumAggregateInputType
    _min?: SampleTypeMinAggregateInputType
    _max?: SampleTypeMaxAggregateInputType
  }

  export type SampleTypeGroupByOutputType = {
    id: number
    name: string
    description: string
    _count: SampleTypeCountAggregateOutputType | null
    _avg: SampleTypeAvgAggregateOutputType | null
    _sum: SampleTypeSumAggregateOutputType | null
    _min: SampleTypeMinAggregateOutputType | null
    _max: SampleTypeMaxAggregateOutputType | null
  }

  type GetSampleTypeGroupByPayload<T extends SampleTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SampleTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SampleTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SampleTypeGroupByOutputType[P]>
            : GetScalarType<T[P], SampleTypeGroupByOutputType[P]>
        }
      >
    >


  export type SampleTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    samples?: boolean | SampleType$samplesArgs<ExtArgs>
    _count?: boolean | SampleTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sampleType"]>

  export type SampleTypeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
  }

  export type SampleTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    samples?: boolean | SampleType$samplesArgs<ExtArgs>
    _count?: boolean | SampleTypeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SampleTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SampleType"
    objects: {
      samples: Prisma.$SamplePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
    }, ExtArgs["result"]["sampleType"]>
    composites: {}
  }


  type SampleTypeGetPayload<S extends boolean | null | undefined | SampleTypeDefaultArgs> = $Result.GetResult<Prisma.$SampleTypePayload, S>

  type SampleTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SampleTypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SampleTypeCountAggregateInputType | true
    }

  export interface SampleTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SampleType'], meta: { name: 'SampleType' } }
    /**
     * Find zero or one SampleType that matches the filter.
     * @param {SampleTypeFindUniqueArgs} args - Arguments to find a SampleType
     * @example
     * // Get one SampleType
     * const sampleType = await prisma.sampleType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SampleTypeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SampleTypeFindUniqueArgs<ExtArgs>>
    ): Prisma__SampleTypeClient<$Result.GetResult<Prisma.$SampleTypePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SampleType that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SampleTypeFindUniqueOrThrowArgs} args - Arguments to find a SampleType
     * @example
     * // Get one SampleType
     * const sampleType = await prisma.sampleType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SampleTypeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SampleTypeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SampleTypeClient<$Result.GetResult<Prisma.$SampleTypePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SampleType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleTypeFindFirstArgs} args - Arguments to find a SampleType
     * @example
     * // Get one SampleType
     * const sampleType = await prisma.sampleType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SampleTypeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SampleTypeFindFirstArgs<ExtArgs>>
    ): Prisma__SampleTypeClient<$Result.GetResult<Prisma.$SampleTypePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SampleType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleTypeFindFirstOrThrowArgs} args - Arguments to find a SampleType
     * @example
     * // Get one SampleType
     * const sampleType = await prisma.sampleType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SampleTypeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SampleTypeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SampleTypeClient<$Result.GetResult<Prisma.$SampleTypePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SampleTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SampleTypes
     * const sampleTypes = await prisma.sampleType.findMany()
     * 
     * // Get first 10 SampleTypes
     * const sampleTypes = await prisma.sampleType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sampleTypeWithIdOnly = await prisma.sampleType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SampleTypeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SampleTypeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SampleTypePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SampleType.
     * @param {SampleTypeCreateArgs} args - Arguments to create a SampleType.
     * @example
     * // Create one SampleType
     * const SampleType = await prisma.sampleType.create({
     *   data: {
     *     // ... data to create a SampleType
     *   }
     * })
     * 
    **/
    create<T extends SampleTypeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SampleTypeCreateArgs<ExtArgs>>
    ): Prisma__SampleTypeClient<$Result.GetResult<Prisma.$SampleTypePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SampleTypes.
     *     @param {SampleTypeCreateManyArgs} args - Arguments to create many SampleTypes.
     *     @example
     *     // Create many SampleTypes
     *     const sampleType = await prisma.sampleType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SampleTypeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SampleTypeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SampleType.
     * @param {SampleTypeDeleteArgs} args - Arguments to delete one SampleType.
     * @example
     * // Delete one SampleType
     * const SampleType = await prisma.sampleType.delete({
     *   where: {
     *     // ... filter to delete one SampleType
     *   }
     * })
     * 
    **/
    delete<T extends SampleTypeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SampleTypeDeleteArgs<ExtArgs>>
    ): Prisma__SampleTypeClient<$Result.GetResult<Prisma.$SampleTypePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SampleType.
     * @param {SampleTypeUpdateArgs} args - Arguments to update one SampleType.
     * @example
     * // Update one SampleType
     * const sampleType = await prisma.sampleType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SampleTypeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SampleTypeUpdateArgs<ExtArgs>>
    ): Prisma__SampleTypeClient<$Result.GetResult<Prisma.$SampleTypePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SampleTypes.
     * @param {SampleTypeDeleteManyArgs} args - Arguments to filter SampleTypes to delete.
     * @example
     * // Delete a few SampleTypes
     * const { count } = await prisma.sampleType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SampleTypeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SampleTypeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SampleTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SampleTypes
     * const sampleType = await prisma.sampleType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SampleTypeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SampleTypeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SampleType.
     * @param {SampleTypeUpsertArgs} args - Arguments to update or create a SampleType.
     * @example
     * // Update or create a SampleType
     * const sampleType = await prisma.sampleType.upsert({
     *   create: {
     *     // ... data to create a SampleType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SampleType we want to update
     *   }
     * })
    **/
    upsert<T extends SampleTypeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SampleTypeUpsertArgs<ExtArgs>>
    ): Prisma__SampleTypeClient<$Result.GetResult<Prisma.$SampleTypePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SampleTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleTypeCountArgs} args - Arguments to filter SampleTypes to count.
     * @example
     * // Count the number of SampleTypes
     * const count = await prisma.sampleType.count({
     *   where: {
     *     // ... the filter for the SampleTypes we want to count
     *   }
     * })
    **/
    count<T extends SampleTypeCountArgs>(
      args?: Subset<T, SampleTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SampleTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SampleType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SampleTypeAggregateArgs>(args: Subset<T, SampleTypeAggregateArgs>): Prisma.PrismaPromise<GetSampleTypeAggregateType<T>>

    /**
     * Group by SampleType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SampleTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SampleTypeGroupByArgs['orderBy'] }
        : { orderBy?: SampleTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SampleTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSampleTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SampleType model
   */
  readonly fields: SampleTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SampleType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SampleTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    samples<T extends SampleType$samplesArgs<ExtArgs> = {}>(args?: Subset<T, SampleType$samplesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SampleType model
   */ 
  interface SampleTypeFieldRefs {
    readonly id: FieldRef<"SampleType", 'Int'>
    readonly name: FieldRef<"SampleType", 'String'>
    readonly description: FieldRef<"SampleType", 'String'>
  }
    

  // Custom InputTypes

  /**
   * SampleType findUnique
   */
  export type SampleTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleType
     */
    select?: SampleTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleTypeInclude<ExtArgs> | null
    /**
     * Filter, which SampleType to fetch.
     */
    where: SampleTypeWhereUniqueInput
  }


  /**
   * SampleType findUniqueOrThrow
   */
  export type SampleTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleType
     */
    select?: SampleTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleTypeInclude<ExtArgs> | null
    /**
     * Filter, which SampleType to fetch.
     */
    where: SampleTypeWhereUniqueInput
  }


  /**
   * SampleType findFirst
   */
  export type SampleTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleType
     */
    select?: SampleTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleTypeInclude<ExtArgs> | null
    /**
     * Filter, which SampleType to fetch.
     */
    where?: SampleTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SampleTypes to fetch.
     */
    orderBy?: SampleTypeOrderByWithRelationInput | SampleTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SampleTypes.
     */
    cursor?: SampleTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SampleTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SampleTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SampleTypes.
     */
    distinct?: SampleTypeScalarFieldEnum | SampleTypeScalarFieldEnum[]
  }


  /**
   * SampleType findFirstOrThrow
   */
  export type SampleTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleType
     */
    select?: SampleTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleTypeInclude<ExtArgs> | null
    /**
     * Filter, which SampleType to fetch.
     */
    where?: SampleTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SampleTypes to fetch.
     */
    orderBy?: SampleTypeOrderByWithRelationInput | SampleTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SampleTypes.
     */
    cursor?: SampleTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SampleTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SampleTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SampleTypes.
     */
    distinct?: SampleTypeScalarFieldEnum | SampleTypeScalarFieldEnum[]
  }


  /**
   * SampleType findMany
   */
  export type SampleTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleType
     */
    select?: SampleTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleTypeInclude<ExtArgs> | null
    /**
     * Filter, which SampleTypes to fetch.
     */
    where?: SampleTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SampleTypes to fetch.
     */
    orderBy?: SampleTypeOrderByWithRelationInput | SampleTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SampleTypes.
     */
    cursor?: SampleTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SampleTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SampleTypes.
     */
    skip?: number
    distinct?: SampleTypeScalarFieldEnum | SampleTypeScalarFieldEnum[]
  }


  /**
   * SampleType create
   */
  export type SampleTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleType
     */
    select?: SampleTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a SampleType.
     */
    data: XOR<SampleTypeCreateInput, SampleTypeUncheckedCreateInput>
  }


  /**
   * SampleType createMany
   */
  export type SampleTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SampleTypes.
     */
    data: SampleTypeCreateManyInput | SampleTypeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SampleType update
   */
  export type SampleTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleType
     */
    select?: SampleTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a SampleType.
     */
    data: XOR<SampleTypeUpdateInput, SampleTypeUncheckedUpdateInput>
    /**
     * Choose, which SampleType to update.
     */
    where: SampleTypeWhereUniqueInput
  }


  /**
   * SampleType updateMany
   */
  export type SampleTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SampleTypes.
     */
    data: XOR<SampleTypeUpdateManyMutationInput, SampleTypeUncheckedUpdateManyInput>
    /**
     * Filter which SampleTypes to update
     */
    where?: SampleTypeWhereInput
  }


  /**
   * SampleType upsert
   */
  export type SampleTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleType
     */
    select?: SampleTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the SampleType to update in case it exists.
     */
    where: SampleTypeWhereUniqueInput
    /**
     * In case the SampleType found by the `where` argument doesn't exist, create a new SampleType with this data.
     */
    create: XOR<SampleTypeCreateInput, SampleTypeUncheckedCreateInput>
    /**
     * In case the SampleType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SampleTypeUpdateInput, SampleTypeUncheckedUpdateInput>
  }


  /**
   * SampleType delete
   */
  export type SampleTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleType
     */
    select?: SampleTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleTypeInclude<ExtArgs> | null
    /**
     * Filter which SampleType to delete.
     */
    where: SampleTypeWhereUniqueInput
  }


  /**
   * SampleType deleteMany
   */
  export type SampleTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SampleTypes to delete
     */
    where?: SampleTypeWhereInput
  }


  /**
   * SampleType.samples
   */
  export type SampleType$samplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleInclude<ExtArgs> | null
    where?: SampleWhereInput
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    cursor?: SampleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SampleScalarFieldEnum | SampleScalarFieldEnum[]
  }


  /**
   * SampleType without action
   */
  export type SampleTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleType
     */
    select?: SampleTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SampleTypeInclude<ExtArgs> | null
  }



  /**
   * Model Magnitude
   */

  export type AggregateMagnitude = {
    _count: MagnitudeCountAggregateOutputType | null
    _avg: MagnitudeAvgAggregateOutputType | null
    _sum: MagnitudeSumAggregateOutputType | null
    _min: MagnitudeMinAggregateOutputType | null
    _max: MagnitudeMaxAggregateOutputType | null
  }

  export type MagnitudeAvgAggregateOutputType = {
    id: number | null
  }

  export type MagnitudeSumAggregateOutputType = {
    id: number | null
  }

  export type MagnitudeMinAggregateOutputType = {
    id: number | null
    name: string | null
    unitMeasure: string | null
  }

  export type MagnitudeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    unitMeasure: string | null
  }

  export type MagnitudeCountAggregateOutputType = {
    id: number
    name: number
    unitMeasure: number
    _all: number
  }


  export type MagnitudeAvgAggregateInputType = {
    id?: true
  }

  export type MagnitudeSumAggregateInputType = {
    id?: true
  }

  export type MagnitudeMinAggregateInputType = {
    id?: true
    name?: true
    unitMeasure?: true
  }

  export type MagnitudeMaxAggregateInputType = {
    id?: true
    name?: true
    unitMeasure?: true
  }

  export type MagnitudeCountAggregateInputType = {
    id?: true
    name?: true
    unitMeasure?: true
    _all?: true
  }

  export type MagnitudeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Magnitude to aggregate.
     */
    where?: MagnitudeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Magnitudes to fetch.
     */
    orderBy?: MagnitudeOrderByWithRelationInput | MagnitudeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MagnitudeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Magnitudes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Magnitudes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Magnitudes
    **/
    _count?: true | MagnitudeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MagnitudeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MagnitudeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MagnitudeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MagnitudeMaxAggregateInputType
  }

  export type GetMagnitudeAggregateType<T extends MagnitudeAggregateArgs> = {
        [P in keyof T & keyof AggregateMagnitude]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMagnitude[P]>
      : GetScalarType<T[P], AggregateMagnitude[P]>
  }




  export type MagnitudeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MagnitudeWhereInput
    orderBy?: MagnitudeOrderByWithAggregationInput | MagnitudeOrderByWithAggregationInput[]
    by: MagnitudeScalarFieldEnum[] | MagnitudeScalarFieldEnum
    having?: MagnitudeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MagnitudeCountAggregateInputType | true
    _avg?: MagnitudeAvgAggregateInputType
    _sum?: MagnitudeSumAggregateInputType
    _min?: MagnitudeMinAggregateInputType
    _max?: MagnitudeMaxAggregateInputType
  }

  export type MagnitudeGroupByOutputType = {
    id: number
    name: string
    unitMeasure: string
    _count: MagnitudeCountAggregateOutputType | null
    _avg: MagnitudeAvgAggregateOutputType | null
    _sum: MagnitudeSumAggregateOutputType | null
    _min: MagnitudeMinAggregateOutputType | null
    _max: MagnitudeMaxAggregateOutputType | null
  }

  type GetMagnitudeGroupByPayload<T extends MagnitudeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MagnitudeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MagnitudeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MagnitudeGroupByOutputType[P]>
            : GetScalarType<T[P], MagnitudeGroupByOutputType[P]>
        }
      >
    >


  export type MagnitudeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    unitMeasure?: boolean
    details?: boolean | Magnitude$detailsArgs<ExtArgs>
    _count?: boolean | MagnitudeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["magnitude"]>

  export type MagnitudeSelectScalar = {
    id?: boolean
    name?: boolean
    unitMeasure?: boolean
  }

  export type MagnitudeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    details?: boolean | Magnitude$detailsArgs<ExtArgs>
    _count?: boolean | MagnitudeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $MagnitudePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Magnitude"
    objects: {
      details: Prisma.$DetailResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      unitMeasure: string
    }, ExtArgs["result"]["magnitude"]>
    composites: {}
  }


  type MagnitudeGetPayload<S extends boolean | null | undefined | MagnitudeDefaultArgs> = $Result.GetResult<Prisma.$MagnitudePayload, S>

  type MagnitudeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MagnitudeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MagnitudeCountAggregateInputType | true
    }

  export interface MagnitudeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Magnitude'], meta: { name: 'Magnitude' } }
    /**
     * Find zero or one Magnitude that matches the filter.
     * @param {MagnitudeFindUniqueArgs} args - Arguments to find a Magnitude
     * @example
     * // Get one Magnitude
     * const magnitude = await prisma.magnitude.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MagnitudeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MagnitudeFindUniqueArgs<ExtArgs>>
    ): Prisma__MagnitudeClient<$Result.GetResult<Prisma.$MagnitudePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Magnitude that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MagnitudeFindUniqueOrThrowArgs} args - Arguments to find a Magnitude
     * @example
     * // Get one Magnitude
     * const magnitude = await prisma.magnitude.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MagnitudeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MagnitudeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MagnitudeClient<$Result.GetResult<Prisma.$MagnitudePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Magnitude that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MagnitudeFindFirstArgs} args - Arguments to find a Magnitude
     * @example
     * // Get one Magnitude
     * const magnitude = await prisma.magnitude.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MagnitudeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MagnitudeFindFirstArgs<ExtArgs>>
    ): Prisma__MagnitudeClient<$Result.GetResult<Prisma.$MagnitudePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Magnitude that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MagnitudeFindFirstOrThrowArgs} args - Arguments to find a Magnitude
     * @example
     * // Get one Magnitude
     * const magnitude = await prisma.magnitude.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MagnitudeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MagnitudeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MagnitudeClient<$Result.GetResult<Prisma.$MagnitudePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Magnitudes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MagnitudeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Magnitudes
     * const magnitudes = await prisma.magnitude.findMany()
     * 
     * // Get first 10 Magnitudes
     * const magnitudes = await prisma.magnitude.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const magnitudeWithIdOnly = await prisma.magnitude.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MagnitudeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MagnitudeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MagnitudePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Magnitude.
     * @param {MagnitudeCreateArgs} args - Arguments to create a Magnitude.
     * @example
     * // Create one Magnitude
     * const Magnitude = await prisma.magnitude.create({
     *   data: {
     *     // ... data to create a Magnitude
     *   }
     * })
     * 
    **/
    create<T extends MagnitudeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MagnitudeCreateArgs<ExtArgs>>
    ): Prisma__MagnitudeClient<$Result.GetResult<Prisma.$MagnitudePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Magnitudes.
     *     @param {MagnitudeCreateManyArgs} args - Arguments to create many Magnitudes.
     *     @example
     *     // Create many Magnitudes
     *     const magnitude = await prisma.magnitude.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MagnitudeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MagnitudeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Magnitude.
     * @param {MagnitudeDeleteArgs} args - Arguments to delete one Magnitude.
     * @example
     * // Delete one Magnitude
     * const Magnitude = await prisma.magnitude.delete({
     *   where: {
     *     // ... filter to delete one Magnitude
     *   }
     * })
     * 
    **/
    delete<T extends MagnitudeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MagnitudeDeleteArgs<ExtArgs>>
    ): Prisma__MagnitudeClient<$Result.GetResult<Prisma.$MagnitudePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Magnitude.
     * @param {MagnitudeUpdateArgs} args - Arguments to update one Magnitude.
     * @example
     * // Update one Magnitude
     * const magnitude = await prisma.magnitude.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MagnitudeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MagnitudeUpdateArgs<ExtArgs>>
    ): Prisma__MagnitudeClient<$Result.GetResult<Prisma.$MagnitudePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Magnitudes.
     * @param {MagnitudeDeleteManyArgs} args - Arguments to filter Magnitudes to delete.
     * @example
     * // Delete a few Magnitudes
     * const { count } = await prisma.magnitude.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MagnitudeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MagnitudeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Magnitudes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MagnitudeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Magnitudes
     * const magnitude = await prisma.magnitude.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MagnitudeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MagnitudeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Magnitude.
     * @param {MagnitudeUpsertArgs} args - Arguments to update or create a Magnitude.
     * @example
     * // Update or create a Magnitude
     * const magnitude = await prisma.magnitude.upsert({
     *   create: {
     *     // ... data to create a Magnitude
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Magnitude we want to update
     *   }
     * })
    **/
    upsert<T extends MagnitudeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MagnitudeUpsertArgs<ExtArgs>>
    ): Prisma__MagnitudeClient<$Result.GetResult<Prisma.$MagnitudePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Magnitudes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MagnitudeCountArgs} args - Arguments to filter Magnitudes to count.
     * @example
     * // Count the number of Magnitudes
     * const count = await prisma.magnitude.count({
     *   where: {
     *     // ... the filter for the Magnitudes we want to count
     *   }
     * })
    **/
    count<T extends MagnitudeCountArgs>(
      args?: Subset<T, MagnitudeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MagnitudeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Magnitude.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MagnitudeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MagnitudeAggregateArgs>(args: Subset<T, MagnitudeAggregateArgs>): Prisma.PrismaPromise<GetMagnitudeAggregateType<T>>

    /**
     * Group by Magnitude.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MagnitudeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MagnitudeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MagnitudeGroupByArgs['orderBy'] }
        : { orderBy?: MagnitudeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MagnitudeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMagnitudeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Magnitude model
   */
  readonly fields: MagnitudeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Magnitude.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MagnitudeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    details<T extends Magnitude$detailsArgs<ExtArgs> = {}>(args?: Subset<T, Magnitude$detailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DetailResultPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Magnitude model
   */ 
  interface MagnitudeFieldRefs {
    readonly id: FieldRef<"Magnitude", 'Int'>
    readonly name: FieldRef<"Magnitude", 'String'>
    readonly unitMeasure: FieldRef<"Magnitude", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Magnitude findUnique
   */
  export type MagnitudeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Magnitude
     */
    select?: MagnitudeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MagnitudeInclude<ExtArgs> | null
    /**
     * Filter, which Magnitude to fetch.
     */
    where: MagnitudeWhereUniqueInput
  }


  /**
   * Magnitude findUniqueOrThrow
   */
  export type MagnitudeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Magnitude
     */
    select?: MagnitudeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MagnitudeInclude<ExtArgs> | null
    /**
     * Filter, which Magnitude to fetch.
     */
    where: MagnitudeWhereUniqueInput
  }


  /**
   * Magnitude findFirst
   */
  export type MagnitudeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Magnitude
     */
    select?: MagnitudeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MagnitudeInclude<ExtArgs> | null
    /**
     * Filter, which Magnitude to fetch.
     */
    where?: MagnitudeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Magnitudes to fetch.
     */
    orderBy?: MagnitudeOrderByWithRelationInput | MagnitudeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Magnitudes.
     */
    cursor?: MagnitudeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Magnitudes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Magnitudes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Magnitudes.
     */
    distinct?: MagnitudeScalarFieldEnum | MagnitudeScalarFieldEnum[]
  }


  /**
   * Magnitude findFirstOrThrow
   */
  export type MagnitudeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Magnitude
     */
    select?: MagnitudeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MagnitudeInclude<ExtArgs> | null
    /**
     * Filter, which Magnitude to fetch.
     */
    where?: MagnitudeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Magnitudes to fetch.
     */
    orderBy?: MagnitudeOrderByWithRelationInput | MagnitudeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Magnitudes.
     */
    cursor?: MagnitudeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Magnitudes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Magnitudes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Magnitudes.
     */
    distinct?: MagnitudeScalarFieldEnum | MagnitudeScalarFieldEnum[]
  }


  /**
   * Magnitude findMany
   */
  export type MagnitudeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Magnitude
     */
    select?: MagnitudeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MagnitudeInclude<ExtArgs> | null
    /**
     * Filter, which Magnitudes to fetch.
     */
    where?: MagnitudeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Magnitudes to fetch.
     */
    orderBy?: MagnitudeOrderByWithRelationInput | MagnitudeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Magnitudes.
     */
    cursor?: MagnitudeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Magnitudes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Magnitudes.
     */
    skip?: number
    distinct?: MagnitudeScalarFieldEnum | MagnitudeScalarFieldEnum[]
  }


  /**
   * Magnitude create
   */
  export type MagnitudeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Magnitude
     */
    select?: MagnitudeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MagnitudeInclude<ExtArgs> | null
    /**
     * The data needed to create a Magnitude.
     */
    data: XOR<MagnitudeCreateInput, MagnitudeUncheckedCreateInput>
  }


  /**
   * Magnitude createMany
   */
  export type MagnitudeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Magnitudes.
     */
    data: MagnitudeCreateManyInput | MagnitudeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Magnitude update
   */
  export type MagnitudeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Magnitude
     */
    select?: MagnitudeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MagnitudeInclude<ExtArgs> | null
    /**
     * The data needed to update a Magnitude.
     */
    data: XOR<MagnitudeUpdateInput, MagnitudeUncheckedUpdateInput>
    /**
     * Choose, which Magnitude to update.
     */
    where: MagnitudeWhereUniqueInput
  }


  /**
   * Magnitude updateMany
   */
  export type MagnitudeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Magnitudes.
     */
    data: XOR<MagnitudeUpdateManyMutationInput, MagnitudeUncheckedUpdateManyInput>
    /**
     * Filter which Magnitudes to update
     */
    where?: MagnitudeWhereInput
  }


  /**
   * Magnitude upsert
   */
  export type MagnitudeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Magnitude
     */
    select?: MagnitudeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MagnitudeInclude<ExtArgs> | null
    /**
     * The filter to search for the Magnitude to update in case it exists.
     */
    where: MagnitudeWhereUniqueInput
    /**
     * In case the Magnitude found by the `where` argument doesn't exist, create a new Magnitude with this data.
     */
    create: XOR<MagnitudeCreateInput, MagnitudeUncheckedCreateInput>
    /**
     * In case the Magnitude was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MagnitudeUpdateInput, MagnitudeUncheckedUpdateInput>
  }


  /**
   * Magnitude delete
   */
  export type MagnitudeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Magnitude
     */
    select?: MagnitudeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MagnitudeInclude<ExtArgs> | null
    /**
     * Filter which Magnitude to delete.
     */
    where: MagnitudeWhereUniqueInput
  }


  /**
   * Magnitude deleteMany
   */
  export type MagnitudeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Magnitudes to delete
     */
    where?: MagnitudeWhereInput
  }


  /**
   * Magnitude.details
   */
  export type Magnitude$detailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailResult
     */
    select?: DetailResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailResultInclude<ExtArgs> | null
    where?: DetailResultWhereInput
    orderBy?: DetailResultOrderByWithRelationInput | DetailResultOrderByWithRelationInput[]
    cursor?: DetailResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DetailResultScalarFieldEnum | DetailResultScalarFieldEnum[]
  }


  /**
   * Magnitude without action
   */
  export type MagnitudeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Magnitude
     */
    select?: MagnitudeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MagnitudeInclude<ExtArgs> | null
  }



  /**
   * Model Result
   */

  export type AggregateResult = {
    _count: ResultCountAggregateOutputType | null
    _avg: ResultAvgAggregateOutputType | null
    _sum: ResultSumAggregateOutputType | null
    _min: ResultMinAggregateOutputType | null
    _max: ResultMaxAggregateOutputType | null
  }

  export type ResultAvgAggregateOutputType = {
    id: number | null
    sampleId: number | null
  }

  export type ResultSumAggregateOutputType = {
    id: number | null
    sampleId: number | null
  }

  export type ResultMinAggregateOutputType = {
    id: number | null
    resultDate: Date | null
    observations: string | null
    sampleId: number | null
  }

  export type ResultMaxAggregateOutputType = {
    id: number | null
    resultDate: Date | null
    observations: string | null
    sampleId: number | null
  }

  export type ResultCountAggregateOutputType = {
    id: number
    resultDate: number
    observations: number
    sampleId: number
    _all: number
  }


  export type ResultAvgAggregateInputType = {
    id?: true
    sampleId?: true
  }

  export type ResultSumAggregateInputType = {
    id?: true
    sampleId?: true
  }

  export type ResultMinAggregateInputType = {
    id?: true
    resultDate?: true
    observations?: true
    sampleId?: true
  }

  export type ResultMaxAggregateInputType = {
    id?: true
    resultDate?: true
    observations?: true
    sampleId?: true
  }

  export type ResultCountAggregateInputType = {
    id?: true
    resultDate?: true
    observations?: true
    sampleId?: true
    _all?: true
  }

  export type ResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Result to aggregate.
     */
    where?: ResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Results to fetch.
     */
    orderBy?: ResultOrderByWithRelationInput | ResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Results.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Results
    **/
    _count?: true | ResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResultMaxAggregateInputType
  }

  export type GetResultAggregateType<T extends ResultAggregateArgs> = {
        [P in keyof T & keyof AggregateResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResult[P]>
      : GetScalarType<T[P], AggregateResult[P]>
  }




  export type ResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResultWhereInput
    orderBy?: ResultOrderByWithAggregationInput | ResultOrderByWithAggregationInput[]
    by: ResultScalarFieldEnum[] | ResultScalarFieldEnum
    having?: ResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResultCountAggregateInputType | true
    _avg?: ResultAvgAggregateInputType
    _sum?: ResultSumAggregateInputType
    _min?: ResultMinAggregateInputType
    _max?: ResultMaxAggregateInputType
  }

  export type ResultGroupByOutputType = {
    id: number
    resultDate: Date
    observations: string | null
    sampleId: number
    _count: ResultCountAggregateOutputType | null
    _avg: ResultAvgAggregateOutputType | null
    _sum: ResultSumAggregateOutputType | null
    _min: ResultMinAggregateOutputType | null
    _max: ResultMaxAggregateOutputType | null
  }

  type GetResultGroupByPayload<T extends ResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResultGroupByOutputType[P]>
            : GetScalarType<T[P], ResultGroupByOutputType[P]>
        }
      >
    >


  export type ResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resultDate?: boolean
    observations?: boolean
    sampleId?: boolean
    details?: boolean | Result$detailsArgs<ExtArgs>
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    _count?: boolean | ResultCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["result"]>

  export type ResultSelectScalar = {
    id?: boolean
    resultDate?: boolean
    observations?: boolean
    sampleId?: boolean
  }

  export type ResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    details?: boolean | Result$detailsArgs<ExtArgs>
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    _count?: boolean | ResultCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Result"
    objects: {
      details: Prisma.$DetailResultPayload<ExtArgs>[]
      sample: Prisma.$SamplePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resultDate: Date
      observations: string | null
      sampleId: number
    }, ExtArgs["result"]["result"]>
    composites: {}
  }


  type ResultGetPayload<S extends boolean | null | undefined | ResultDefaultArgs> = $Result.GetResult<Prisma.$ResultPayload, S>

  type ResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ResultFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ResultCountAggregateInputType | true
    }

  export interface ResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Result'], meta: { name: 'Result' } }
    /**
     * Find zero or one Result that matches the filter.
     * @param {ResultFindUniqueArgs} args - Arguments to find a Result
     * @example
     * // Get one Result
     * const result = await prisma.result.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ResultFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ResultFindUniqueArgs<ExtArgs>>
    ): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Result that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ResultFindUniqueOrThrowArgs} args - Arguments to find a Result
     * @example
     * // Get one Result
     * const result = await prisma.result.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ResultFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ResultFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Result that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultFindFirstArgs} args - Arguments to find a Result
     * @example
     * // Get one Result
     * const result = await prisma.result.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ResultFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ResultFindFirstArgs<ExtArgs>>
    ): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Result that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultFindFirstOrThrowArgs} args - Arguments to find a Result
     * @example
     * // Get one Result
     * const result = await prisma.result.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ResultFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ResultFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Results that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Results
     * const results = await prisma.result.findMany()
     * 
     * // Get first 10 Results
     * const results = await prisma.result.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resultWithIdOnly = await prisma.result.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ResultFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResultFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Result.
     * @param {ResultCreateArgs} args - Arguments to create a Result.
     * @example
     * // Create one Result
     * const Result = await prisma.result.create({
     *   data: {
     *     // ... data to create a Result
     *   }
     * })
     * 
    **/
    create<T extends ResultCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ResultCreateArgs<ExtArgs>>
    ): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Results.
     *     @param {ResultCreateManyArgs} args - Arguments to create many Results.
     *     @example
     *     // Create many Results
     *     const result = await prisma.result.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ResultCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResultCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Result.
     * @param {ResultDeleteArgs} args - Arguments to delete one Result.
     * @example
     * // Delete one Result
     * const Result = await prisma.result.delete({
     *   where: {
     *     // ... filter to delete one Result
     *   }
     * })
     * 
    **/
    delete<T extends ResultDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ResultDeleteArgs<ExtArgs>>
    ): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Result.
     * @param {ResultUpdateArgs} args - Arguments to update one Result.
     * @example
     * // Update one Result
     * const result = await prisma.result.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ResultUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ResultUpdateArgs<ExtArgs>>
    ): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Results.
     * @param {ResultDeleteManyArgs} args - Arguments to filter Results to delete.
     * @example
     * // Delete a few Results
     * const { count } = await prisma.result.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ResultDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResultDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Results.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Results
     * const result = await prisma.result.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ResultUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ResultUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Result.
     * @param {ResultUpsertArgs} args - Arguments to update or create a Result.
     * @example
     * // Update or create a Result
     * const result = await prisma.result.upsert({
     *   create: {
     *     // ... data to create a Result
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Result we want to update
     *   }
     * })
    **/
    upsert<T extends ResultUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ResultUpsertArgs<ExtArgs>>
    ): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Results.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultCountArgs} args - Arguments to filter Results to count.
     * @example
     * // Count the number of Results
     * const count = await prisma.result.count({
     *   where: {
     *     // ... the filter for the Results we want to count
     *   }
     * })
    **/
    count<T extends ResultCountArgs>(
      args?: Subset<T, ResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Result.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResultAggregateArgs>(args: Subset<T, ResultAggregateArgs>): Prisma.PrismaPromise<GetResultAggregateType<T>>

    /**
     * Group by Result.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResultGroupByArgs['orderBy'] }
        : { orderBy?: ResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Result model
   */
  readonly fields: ResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Result.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    details<T extends Result$detailsArgs<ExtArgs> = {}>(args?: Subset<T, Result$detailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DetailResultPayload<ExtArgs>, T, 'findMany'> | Null>;

    sample<T extends SampleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SampleDefaultArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Result model
   */ 
  interface ResultFieldRefs {
    readonly id: FieldRef<"Result", 'Int'>
    readonly resultDate: FieldRef<"Result", 'DateTime'>
    readonly observations: FieldRef<"Result", 'String'>
    readonly sampleId: FieldRef<"Result", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Result findUnique
   */
  export type ResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * Filter, which Result to fetch.
     */
    where: ResultWhereUniqueInput
  }


  /**
   * Result findUniqueOrThrow
   */
  export type ResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * Filter, which Result to fetch.
     */
    where: ResultWhereUniqueInput
  }


  /**
   * Result findFirst
   */
  export type ResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * Filter, which Result to fetch.
     */
    where?: ResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Results to fetch.
     */
    orderBy?: ResultOrderByWithRelationInput | ResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Results.
     */
    cursor?: ResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Results.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Results.
     */
    distinct?: ResultScalarFieldEnum | ResultScalarFieldEnum[]
  }


  /**
   * Result findFirstOrThrow
   */
  export type ResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * Filter, which Result to fetch.
     */
    where?: ResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Results to fetch.
     */
    orderBy?: ResultOrderByWithRelationInput | ResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Results.
     */
    cursor?: ResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Results.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Results.
     */
    distinct?: ResultScalarFieldEnum | ResultScalarFieldEnum[]
  }


  /**
   * Result findMany
   */
  export type ResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * Filter, which Results to fetch.
     */
    where?: ResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Results to fetch.
     */
    orderBy?: ResultOrderByWithRelationInput | ResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Results.
     */
    cursor?: ResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Results.
     */
    skip?: number
    distinct?: ResultScalarFieldEnum | ResultScalarFieldEnum[]
  }


  /**
   * Result create
   */
  export type ResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * The data needed to create a Result.
     */
    data: XOR<ResultCreateInput, ResultUncheckedCreateInput>
  }


  /**
   * Result createMany
   */
  export type ResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Results.
     */
    data: ResultCreateManyInput | ResultCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Result update
   */
  export type ResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * The data needed to update a Result.
     */
    data: XOR<ResultUpdateInput, ResultUncheckedUpdateInput>
    /**
     * Choose, which Result to update.
     */
    where: ResultWhereUniqueInput
  }


  /**
   * Result updateMany
   */
  export type ResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Results.
     */
    data: XOR<ResultUpdateManyMutationInput, ResultUncheckedUpdateManyInput>
    /**
     * Filter which Results to update
     */
    where?: ResultWhereInput
  }


  /**
   * Result upsert
   */
  export type ResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * The filter to search for the Result to update in case it exists.
     */
    where: ResultWhereUniqueInput
    /**
     * In case the Result found by the `where` argument doesn't exist, create a new Result with this data.
     */
    create: XOR<ResultCreateInput, ResultUncheckedCreateInput>
    /**
     * In case the Result was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResultUpdateInput, ResultUncheckedUpdateInput>
  }


  /**
   * Result delete
   */
  export type ResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * Filter which Result to delete.
     */
    where: ResultWhereUniqueInput
  }


  /**
   * Result deleteMany
   */
  export type ResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Results to delete
     */
    where?: ResultWhereInput
  }


  /**
   * Result.details
   */
  export type Result$detailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailResult
     */
    select?: DetailResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailResultInclude<ExtArgs> | null
    where?: DetailResultWhereInput
    orderBy?: DetailResultOrderByWithRelationInput | DetailResultOrderByWithRelationInput[]
    cursor?: DetailResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DetailResultScalarFieldEnum | DetailResultScalarFieldEnum[]
  }


  /**
   * Result without action
   */
  export type ResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResultInclude<ExtArgs> | null
  }



  /**
   * Model DetailResult
   */

  export type AggregateDetailResult = {
    _count: DetailResultCountAggregateOutputType | null
    _avg: DetailResultAvgAggregateOutputType | null
    _sum: DetailResultSumAggregateOutputType | null
    _min: DetailResultMinAggregateOutputType | null
    _max: DetailResultMaxAggregateOutputType | null
  }

  export type DetailResultAvgAggregateOutputType = {
    id: number | null
    resultId: number | null
    magnitudeId: number | null
    numericValue: number | null
  }

  export type DetailResultSumAggregateOutputType = {
    id: number | null
    resultId: number | null
    magnitudeId: number | null
    numericValue: number | null
  }

  export type DetailResultMinAggregateOutputType = {
    id: number | null
    resultId: number | null
    magnitudeId: number | null
    numericValue: number | null
    qualitativeInterpretation: string | null
    qualitativeResult: string | null
    additionalDescription: string | null
  }

  export type DetailResultMaxAggregateOutputType = {
    id: number | null
    resultId: number | null
    magnitudeId: number | null
    numericValue: number | null
    qualitativeInterpretation: string | null
    qualitativeResult: string | null
    additionalDescription: string | null
  }

  export type DetailResultCountAggregateOutputType = {
    id: number
    resultId: number
    magnitudeId: number
    numericValue: number
    qualitativeInterpretation: number
    qualitativeResult: number
    additionalDescription: number
    _all: number
  }


  export type DetailResultAvgAggregateInputType = {
    id?: true
    resultId?: true
    magnitudeId?: true
    numericValue?: true
  }

  export type DetailResultSumAggregateInputType = {
    id?: true
    resultId?: true
    magnitudeId?: true
    numericValue?: true
  }

  export type DetailResultMinAggregateInputType = {
    id?: true
    resultId?: true
    magnitudeId?: true
    numericValue?: true
    qualitativeInterpretation?: true
    qualitativeResult?: true
    additionalDescription?: true
  }

  export type DetailResultMaxAggregateInputType = {
    id?: true
    resultId?: true
    magnitudeId?: true
    numericValue?: true
    qualitativeInterpretation?: true
    qualitativeResult?: true
    additionalDescription?: true
  }

  export type DetailResultCountAggregateInputType = {
    id?: true
    resultId?: true
    magnitudeId?: true
    numericValue?: true
    qualitativeInterpretation?: true
    qualitativeResult?: true
    additionalDescription?: true
    _all?: true
  }

  export type DetailResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DetailResult to aggregate.
     */
    where?: DetailResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetailResults to fetch.
     */
    orderBy?: DetailResultOrderByWithRelationInput | DetailResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DetailResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetailResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetailResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DetailResults
    **/
    _count?: true | DetailResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DetailResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DetailResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DetailResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DetailResultMaxAggregateInputType
  }

  export type GetDetailResultAggregateType<T extends DetailResultAggregateArgs> = {
        [P in keyof T & keyof AggregateDetailResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDetailResult[P]>
      : GetScalarType<T[P], AggregateDetailResult[P]>
  }




  export type DetailResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DetailResultWhereInput
    orderBy?: DetailResultOrderByWithAggregationInput | DetailResultOrderByWithAggregationInput[]
    by: DetailResultScalarFieldEnum[] | DetailResultScalarFieldEnum
    having?: DetailResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DetailResultCountAggregateInputType | true
    _avg?: DetailResultAvgAggregateInputType
    _sum?: DetailResultSumAggregateInputType
    _min?: DetailResultMinAggregateInputType
    _max?: DetailResultMaxAggregateInputType
  }

  export type DetailResultGroupByOutputType = {
    id: number
    resultId: number
    magnitudeId: number
    numericValue: number
    qualitativeInterpretation: string
    qualitativeResult: string
    additionalDescription: string
    _count: DetailResultCountAggregateOutputType | null
    _avg: DetailResultAvgAggregateOutputType | null
    _sum: DetailResultSumAggregateOutputType | null
    _min: DetailResultMinAggregateOutputType | null
    _max: DetailResultMaxAggregateOutputType | null
  }

  type GetDetailResultGroupByPayload<T extends DetailResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DetailResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DetailResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DetailResultGroupByOutputType[P]>
            : GetScalarType<T[P], DetailResultGroupByOutputType[P]>
        }
      >
    >


  export type DetailResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resultId?: boolean
    magnitudeId?: boolean
    numericValue?: boolean
    qualitativeInterpretation?: boolean
    qualitativeResult?: boolean
    additionalDescription?: boolean
    result?: boolean | ResultDefaultArgs<ExtArgs>
    magnitude?: boolean | MagnitudeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["detailResult"]>

  export type DetailResultSelectScalar = {
    id?: boolean
    resultId?: boolean
    magnitudeId?: boolean
    numericValue?: boolean
    qualitativeInterpretation?: boolean
    qualitativeResult?: boolean
    additionalDescription?: boolean
  }

  export type DetailResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    result?: boolean | ResultDefaultArgs<ExtArgs>
    magnitude?: boolean | MagnitudeDefaultArgs<ExtArgs>
  }


  export type $DetailResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DetailResult"
    objects: {
      result: Prisma.$ResultPayload<ExtArgs>
      magnitude: Prisma.$MagnitudePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      resultId: number
      magnitudeId: number
      numericValue: number
      qualitativeInterpretation: string
      qualitativeResult: string
      additionalDescription: string
    }, ExtArgs["result"]["detailResult"]>
    composites: {}
  }


  type DetailResultGetPayload<S extends boolean | null | undefined | DetailResultDefaultArgs> = $Result.GetResult<Prisma.$DetailResultPayload, S>

  type DetailResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DetailResultFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DetailResultCountAggregateInputType | true
    }

  export interface DetailResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DetailResult'], meta: { name: 'DetailResult' } }
    /**
     * Find zero or one DetailResult that matches the filter.
     * @param {DetailResultFindUniqueArgs} args - Arguments to find a DetailResult
     * @example
     * // Get one DetailResult
     * const detailResult = await prisma.detailResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DetailResultFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DetailResultFindUniqueArgs<ExtArgs>>
    ): Prisma__DetailResultClient<$Result.GetResult<Prisma.$DetailResultPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one DetailResult that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DetailResultFindUniqueOrThrowArgs} args - Arguments to find a DetailResult
     * @example
     * // Get one DetailResult
     * const detailResult = await prisma.detailResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DetailResultFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DetailResultFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DetailResultClient<$Result.GetResult<Prisma.$DetailResultPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first DetailResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailResultFindFirstArgs} args - Arguments to find a DetailResult
     * @example
     * // Get one DetailResult
     * const detailResult = await prisma.detailResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DetailResultFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DetailResultFindFirstArgs<ExtArgs>>
    ): Prisma__DetailResultClient<$Result.GetResult<Prisma.$DetailResultPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first DetailResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailResultFindFirstOrThrowArgs} args - Arguments to find a DetailResult
     * @example
     * // Get one DetailResult
     * const detailResult = await prisma.detailResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DetailResultFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DetailResultFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DetailResultClient<$Result.GetResult<Prisma.$DetailResultPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more DetailResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailResultFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DetailResults
     * const detailResults = await prisma.detailResult.findMany()
     * 
     * // Get first 10 DetailResults
     * const detailResults = await prisma.detailResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const detailResultWithIdOnly = await prisma.detailResult.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DetailResultFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DetailResultFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DetailResultPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a DetailResult.
     * @param {DetailResultCreateArgs} args - Arguments to create a DetailResult.
     * @example
     * // Create one DetailResult
     * const DetailResult = await prisma.detailResult.create({
     *   data: {
     *     // ... data to create a DetailResult
     *   }
     * })
     * 
    **/
    create<T extends DetailResultCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DetailResultCreateArgs<ExtArgs>>
    ): Prisma__DetailResultClient<$Result.GetResult<Prisma.$DetailResultPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many DetailResults.
     *     @param {DetailResultCreateManyArgs} args - Arguments to create many DetailResults.
     *     @example
     *     // Create many DetailResults
     *     const detailResult = await prisma.detailResult.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DetailResultCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DetailResultCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DetailResult.
     * @param {DetailResultDeleteArgs} args - Arguments to delete one DetailResult.
     * @example
     * // Delete one DetailResult
     * const DetailResult = await prisma.detailResult.delete({
     *   where: {
     *     // ... filter to delete one DetailResult
     *   }
     * })
     * 
    **/
    delete<T extends DetailResultDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DetailResultDeleteArgs<ExtArgs>>
    ): Prisma__DetailResultClient<$Result.GetResult<Prisma.$DetailResultPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one DetailResult.
     * @param {DetailResultUpdateArgs} args - Arguments to update one DetailResult.
     * @example
     * // Update one DetailResult
     * const detailResult = await prisma.detailResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DetailResultUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DetailResultUpdateArgs<ExtArgs>>
    ): Prisma__DetailResultClient<$Result.GetResult<Prisma.$DetailResultPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more DetailResults.
     * @param {DetailResultDeleteManyArgs} args - Arguments to filter DetailResults to delete.
     * @example
     * // Delete a few DetailResults
     * const { count } = await prisma.detailResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DetailResultDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DetailResultDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DetailResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DetailResults
     * const detailResult = await prisma.detailResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DetailResultUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DetailResultUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DetailResult.
     * @param {DetailResultUpsertArgs} args - Arguments to update or create a DetailResult.
     * @example
     * // Update or create a DetailResult
     * const detailResult = await prisma.detailResult.upsert({
     *   create: {
     *     // ... data to create a DetailResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DetailResult we want to update
     *   }
     * })
    **/
    upsert<T extends DetailResultUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DetailResultUpsertArgs<ExtArgs>>
    ): Prisma__DetailResultClient<$Result.GetResult<Prisma.$DetailResultPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of DetailResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailResultCountArgs} args - Arguments to filter DetailResults to count.
     * @example
     * // Count the number of DetailResults
     * const count = await prisma.detailResult.count({
     *   where: {
     *     // ... the filter for the DetailResults we want to count
     *   }
     * })
    **/
    count<T extends DetailResultCountArgs>(
      args?: Subset<T, DetailResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DetailResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DetailResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DetailResultAggregateArgs>(args: Subset<T, DetailResultAggregateArgs>): Prisma.PrismaPromise<GetDetailResultAggregateType<T>>

    /**
     * Group by DetailResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DetailResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DetailResultGroupByArgs['orderBy'] }
        : { orderBy?: DetailResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DetailResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDetailResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DetailResult model
   */
  readonly fields: DetailResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DetailResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DetailResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    result<T extends ResultDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResultDefaultArgs<ExtArgs>>): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    magnitude<T extends MagnitudeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MagnitudeDefaultArgs<ExtArgs>>): Prisma__MagnitudeClient<$Result.GetResult<Prisma.$MagnitudePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the DetailResult model
   */ 
  interface DetailResultFieldRefs {
    readonly id: FieldRef<"DetailResult", 'Int'>
    readonly resultId: FieldRef<"DetailResult", 'Int'>
    readonly magnitudeId: FieldRef<"DetailResult", 'Int'>
    readonly numericValue: FieldRef<"DetailResult", 'Float'>
    readonly qualitativeInterpretation: FieldRef<"DetailResult", 'String'>
    readonly qualitativeResult: FieldRef<"DetailResult", 'String'>
    readonly additionalDescription: FieldRef<"DetailResult", 'String'>
  }
    

  // Custom InputTypes

  /**
   * DetailResult findUnique
   */
  export type DetailResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailResult
     */
    select?: DetailResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailResultInclude<ExtArgs> | null
    /**
     * Filter, which DetailResult to fetch.
     */
    where: DetailResultWhereUniqueInput
  }


  /**
   * DetailResult findUniqueOrThrow
   */
  export type DetailResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailResult
     */
    select?: DetailResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailResultInclude<ExtArgs> | null
    /**
     * Filter, which DetailResult to fetch.
     */
    where: DetailResultWhereUniqueInput
  }


  /**
   * DetailResult findFirst
   */
  export type DetailResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailResult
     */
    select?: DetailResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailResultInclude<ExtArgs> | null
    /**
     * Filter, which DetailResult to fetch.
     */
    where?: DetailResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetailResults to fetch.
     */
    orderBy?: DetailResultOrderByWithRelationInput | DetailResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DetailResults.
     */
    cursor?: DetailResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetailResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetailResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DetailResults.
     */
    distinct?: DetailResultScalarFieldEnum | DetailResultScalarFieldEnum[]
  }


  /**
   * DetailResult findFirstOrThrow
   */
  export type DetailResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailResult
     */
    select?: DetailResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailResultInclude<ExtArgs> | null
    /**
     * Filter, which DetailResult to fetch.
     */
    where?: DetailResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetailResults to fetch.
     */
    orderBy?: DetailResultOrderByWithRelationInput | DetailResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DetailResults.
     */
    cursor?: DetailResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetailResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetailResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DetailResults.
     */
    distinct?: DetailResultScalarFieldEnum | DetailResultScalarFieldEnum[]
  }


  /**
   * DetailResult findMany
   */
  export type DetailResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailResult
     */
    select?: DetailResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailResultInclude<ExtArgs> | null
    /**
     * Filter, which DetailResults to fetch.
     */
    where?: DetailResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetailResults to fetch.
     */
    orderBy?: DetailResultOrderByWithRelationInput | DetailResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DetailResults.
     */
    cursor?: DetailResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetailResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetailResults.
     */
    skip?: number
    distinct?: DetailResultScalarFieldEnum | DetailResultScalarFieldEnum[]
  }


  /**
   * DetailResult create
   */
  export type DetailResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailResult
     */
    select?: DetailResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailResultInclude<ExtArgs> | null
    /**
     * The data needed to create a DetailResult.
     */
    data: XOR<DetailResultCreateInput, DetailResultUncheckedCreateInput>
  }


  /**
   * DetailResult createMany
   */
  export type DetailResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DetailResults.
     */
    data: DetailResultCreateManyInput | DetailResultCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * DetailResult update
   */
  export type DetailResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailResult
     */
    select?: DetailResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailResultInclude<ExtArgs> | null
    /**
     * The data needed to update a DetailResult.
     */
    data: XOR<DetailResultUpdateInput, DetailResultUncheckedUpdateInput>
    /**
     * Choose, which DetailResult to update.
     */
    where: DetailResultWhereUniqueInput
  }


  /**
   * DetailResult updateMany
   */
  export type DetailResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DetailResults.
     */
    data: XOR<DetailResultUpdateManyMutationInput, DetailResultUncheckedUpdateManyInput>
    /**
     * Filter which DetailResults to update
     */
    where?: DetailResultWhereInput
  }


  /**
   * DetailResult upsert
   */
  export type DetailResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailResult
     */
    select?: DetailResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailResultInclude<ExtArgs> | null
    /**
     * The filter to search for the DetailResult to update in case it exists.
     */
    where: DetailResultWhereUniqueInput
    /**
     * In case the DetailResult found by the `where` argument doesn't exist, create a new DetailResult with this data.
     */
    create: XOR<DetailResultCreateInput, DetailResultUncheckedCreateInput>
    /**
     * In case the DetailResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DetailResultUpdateInput, DetailResultUncheckedUpdateInput>
  }


  /**
   * DetailResult delete
   */
  export type DetailResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailResult
     */
    select?: DetailResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailResultInclude<ExtArgs> | null
    /**
     * Filter which DetailResult to delete.
     */
    where: DetailResultWhereUniqueInput
  }


  /**
   * DetailResult deleteMany
   */
  export type DetailResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DetailResults to delete
     */
    where?: DetailResultWhereInput
  }


  /**
   * DetailResult without action
   */
  export type DetailResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailResult
     */
    select?: DetailResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailResultInclude<ExtArgs> | null
  }



  /**
   * Model Patient
   */

  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientAvgAggregateOutputType = {
    id: number | null
  }

  export type PatientSumAggregateOutputType = {
    id: number | null
  }

  export type PatientMinAggregateOutputType = {
    id: number | null
    name: string | null
    birthDate: Date | null
    gender: string | null
    address: string | null
    phoneNumber: string | null
    medicalHistory: string | null
  }

  export type PatientMaxAggregateOutputType = {
    id: number | null
    name: string | null
    birthDate: Date | null
    gender: string | null
    address: string | null
    phoneNumber: string | null
    medicalHistory: string | null
  }

  export type PatientCountAggregateOutputType = {
    id: number
    name: number
    birthDate: number
    gender: number
    address: number
    phoneNumber: number
    medicalHistory: number
    _all: number
  }


  export type PatientAvgAggregateInputType = {
    id?: true
  }

  export type PatientSumAggregateInputType = {
    id?: true
  }

  export type PatientMinAggregateInputType = {
    id?: true
    name?: true
    birthDate?: true
    gender?: true
    address?: true
    phoneNumber?: true
    medicalHistory?: true
  }

  export type PatientMaxAggregateInputType = {
    id?: true
    name?: true
    birthDate?: true
    gender?: true
    address?: true
    phoneNumber?: true
    medicalHistory?: true
  }

  export type PatientCountAggregateInputType = {
    id?: true
    name?: true
    birthDate?: true
    gender?: true
    address?: true
    phoneNumber?: true
    medicalHistory?: true
    _all?: true
  }

  export type PatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patient to aggregate.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type PatientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithAggregationInput | PatientOrderByWithAggregationInput[]
    by: PatientScalarFieldEnum[] | PatientScalarFieldEnum
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _avg?: PatientAvgAggregateInputType
    _sum?: PatientSumAggregateInputType
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }

  export type PatientGroupByOutputType = {
    id: number
    name: string
    birthDate: Date
    gender: string
    address: string
    phoneNumber: string
    medicalHistory: string
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type PatientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    birthDate?: boolean
    gender?: boolean
    address?: boolean
    phoneNumber?: boolean
    medicalHistory?: boolean
    exams?: boolean | Patient$examsArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectScalar = {
    id?: boolean
    name?: boolean
    birthDate?: boolean
    gender?: boolean
    address?: boolean
    phoneNumber?: boolean
    medicalHistory?: boolean
  }

  export type PatientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exams?: boolean | Patient$examsArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PatientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Patient"
    objects: {
      exams: Prisma.$ExamPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      birthDate: Date
      gender: string
      address: string
      phoneNumber: string
      medicalHistory: string
    }, ExtArgs["result"]["patient"]>
    composites: {}
  }


  type PatientGetPayload<S extends boolean | null | undefined | PatientDefaultArgs> = $Result.GetResult<Prisma.$PatientPayload, S>

  type PatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface PatientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patient'], meta: { name: 'Patient' } }
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PatientFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PatientFindUniqueArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Patient that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PatientFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientFindFirstArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Patient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PatientFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientWithIdOnly = await prisma.patient.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PatientFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
    **/
    create<T extends PatientCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PatientCreateArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Patients.
     *     @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     *     @example
     *     // Create many Patients
     *     const patient = await prisma.patient.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PatientCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
    **/
    delete<T extends PatientDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PatientDeleteArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PatientUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PatientUpdateArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PatientDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PatientUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PatientUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
    **/
    upsert<T extends PatientUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PatientUpsertArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Patient model
   */
  readonly fields: PatientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    exams<T extends Patient$examsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$examsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Patient model
   */ 
  interface PatientFieldRefs {
    readonly id: FieldRef<"Patient", 'Int'>
    readonly name: FieldRef<"Patient", 'String'>
    readonly birthDate: FieldRef<"Patient", 'DateTime'>
    readonly gender: FieldRef<"Patient", 'String'>
    readonly address: FieldRef<"Patient", 'String'>
    readonly phoneNumber: FieldRef<"Patient", 'String'>
    readonly medicalHistory: FieldRef<"Patient", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Patient findUnique
   */
  export type PatientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }


  /**
   * Patient findUniqueOrThrow
   */
  export type PatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }


  /**
   * Patient findFirst
   */
  export type PatientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }


  /**
   * Patient findFirstOrThrow
   */
  export type PatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }


  /**
   * Patient findMany
   */
  export type PatientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }


  /**
   * Patient create
   */
  export type PatientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to create a Patient.
     */
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }


  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Patient update
   */
  export type PatientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to update a Patient.
     */
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     */
    where: PatientWhereUniqueInput
  }


  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
  }


  /**
   * Patient upsert
   */
  export type PatientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The filter to search for the Patient to update in case it exists.
     */
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     */
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }


  /**
   * Patient delete
   */
  export type PatientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter which Patient to delete.
     */
    where: PatientWhereUniqueInput
  }


  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patients to delete
     */
    where?: PatientWhereInput
  }


  /**
   * Patient.exams
   */
  export type Patient$examsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamInclude<ExtArgs> | null
    where?: ExamWhereInput
    orderBy?: ExamOrderByWithRelationInput | ExamOrderByWithRelationInput[]
    cursor?: ExamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExamScalarFieldEnum | ExamScalarFieldEnum[]
  }


  /**
   * Patient without action
   */
  export type PatientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
  }



  /**
   * Model Doctor
   */

  export type AggregateDoctor = {
    _count: DoctorCountAggregateOutputType | null
    _avg: DoctorAvgAggregateOutputType | null
    _sum: DoctorSumAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  export type DoctorAvgAggregateOutputType = {
    id: number | null
  }

  export type DoctorSumAggregateOutputType = {
    id: number | null
  }

  export type DoctorMinAggregateOutputType = {
    id: number | null
    name: string | null
    specialty: string | null
    consultationAddress: string | null
    phoneNumber: string | null
    emailAddress: string | null
  }

  export type DoctorMaxAggregateOutputType = {
    id: number | null
    name: string | null
    specialty: string | null
    consultationAddress: string | null
    phoneNumber: string | null
    emailAddress: string | null
  }

  export type DoctorCountAggregateOutputType = {
    id: number
    name: number
    specialty: number
    consultationAddress: number
    phoneNumber: number
    emailAddress: number
    _all: number
  }


  export type DoctorAvgAggregateInputType = {
    id?: true
  }

  export type DoctorSumAggregateInputType = {
    id?: true
  }

  export type DoctorMinAggregateInputType = {
    id?: true
    name?: true
    specialty?: true
    consultationAddress?: true
    phoneNumber?: true
    emailAddress?: true
  }

  export type DoctorMaxAggregateInputType = {
    id?: true
    name?: true
    specialty?: true
    consultationAddress?: true
    phoneNumber?: true
    emailAddress?: true
  }

  export type DoctorCountAggregateInputType = {
    id?: true
    name?: true
    specialty?: true
    consultationAddress?: true
    phoneNumber?: true
    emailAddress?: true
    _all?: true
  }

  export type DoctorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doctor to aggregate.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Doctors
    **/
    _count?: true | DoctorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DoctorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DoctorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorMaxAggregateInputType
  }

  export type GetDoctorAggregateType<T extends DoctorAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctor[P]>
      : GetScalarType<T[P], AggregateDoctor[P]>
  }




  export type DoctorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorWhereInput
    orderBy?: DoctorOrderByWithAggregationInput | DoctorOrderByWithAggregationInput[]
    by: DoctorScalarFieldEnum[] | DoctorScalarFieldEnum
    having?: DoctorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorCountAggregateInputType | true
    _avg?: DoctorAvgAggregateInputType
    _sum?: DoctorSumAggregateInputType
    _min?: DoctorMinAggregateInputType
    _max?: DoctorMaxAggregateInputType
  }

  export type DoctorGroupByOutputType = {
    id: number
    name: string
    specialty: string
    consultationAddress: string
    phoneNumber: string
    emailAddress: string
    _count: DoctorCountAggregateOutputType | null
    _avg: DoctorAvgAggregateOutputType | null
    _sum: DoctorSumAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  type GetDoctorGroupByPayload<T extends DoctorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorGroupByOutputType[P]>
        }
      >
    >


  export type DoctorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    specialty?: boolean
    consultationAddress?: boolean
    phoneNumber?: boolean
    emailAddress?: boolean
    exams?: boolean | Doctor$examsArgs<ExtArgs>
    _count?: boolean | DoctorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor"]>

  export type DoctorSelectScalar = {
    id?: boolean
    name?: boolean
    specialty?: boolean
    consultationAddress?: boolean
    phoneNumber?: boolean
    emailAddress?: boolean
  }

  export type DoctorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exams?: boolean | Doctor$examsArgs<ExtArgs>
    _count?: boolean | DoctorCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DoctorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Doctor"
    objects: {
      exams: Prisma.$ExamPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      specialty: string
      consultationAddress: string
      phoneNumber: string
      emailAddress: string
    }, ExtArgs["result"]["doctor"]>
    composites: {}
  }


  type DoctorGetPayload<S extends boolean | null | undefined | DoctorDefaultArgs> = $Result.GetResult<Prisma.$DoctorPayload, S>

  type DoctorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DoctorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DoctorCountAggregateInputType | true
    }

  export interface DoctorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Doctor'], meta: { name: 'Doctor' } }
    /**
     * Find zero or one Doctor that matches the filter.
     * @param {DoctorFindUniqueArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DoctorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorFindUniqueArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Doctor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DoctorFindUniqueOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DoctorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Doctor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindFirstArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DoctorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorFindFirstArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Doctor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindFirstOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DoctorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Doctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doctors
     * const doctors = await prisma.doctor.findMany()
     * 
     * // Get first 10 Doctors
     * const doctors = await prisma.doctor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorWithIdOnly = await prisma.doctor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DoctorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Doctor.
     * @param {DoctorCreateArgs} args - Arguments to create a Doctor.
     * @example
     * // Create one Doctor
     * const Doctor = await prisma.doctor.create({
     *   data: {
     *     // ... data to create a Doctor
     *   }
     * })
     * 
    **/
    create<T extends DoctorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorCreateArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Doctors.
     *     @param {DoctorCreateManyArgs} args - Arguments to create many Doctors.
     *     @example
     *     // Create many Doctors
     *     const doctor = await prisma.doctor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DoctorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Doctor.
     * @param {DoctorDeleteArgs} args - Arguments to delete one Doctor.
     * @example
     * // Delete one Doctor
     * const Doctor = await prisma.doctor.delete({
     *   where: {
     *     // ... filter to delete one Doctor
     *   }
     * })
     * 
    **/
    delete<T extends DoctorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorDeleteArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Doctor.
     * @param {DoctorUpdateArgs} args - Arguments to update one Doctor.
     * @example
     * // Update one Doctor
     * const doctor = await prisma.doctor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DoctorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorUpdateArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Doctors.
     * @param {DoctorDeleteManyArgs} args - Arguments to filter Doctors to delete.
     * @example
     * // Delete a few Doctors
     * const { count } = await prisma.doctor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DoctorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doctors
     * const doctor = await prisma.doctor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DoctorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Doctor.
     * @param {DoctorUpsertArgs} args - Arguments to update or create a Doctor.
     * @example
     * // Update or create a Doctor
     * const doctor = await prisma.doctor.upsert({
     *   create: {
     *     // ... data to create a Doctor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doctor we want to update
     *   }
     * })
    **/
    upsert<T extends DoctorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorUpsertArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorCountArgs} args - Arguments to filter Doctors to count.
     * @example
     * // Count the number of Doctors
     * const count = await prisma.doctor.count({
     *   where: {
     *     // ... the filter for the Doctors we want to count
     *   }
     * })
    **/
    count<T extends DoctorCountArgs>(
      args?: Subset<T, DoctorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorAggregateArgs>(args: Subset<T, DoctorAggregateArgs>): Prisma.PrismaPromise<GetDoctorAggregateType<T>>

    /**
     * Group by Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorGroupByArgs['orderBy'] }
        : { orderBy?: DoctorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Doctor model
   */
  readonly fields: DoctorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Doctor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    exams<T extends Doctor$examsArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$examsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Doctor model
   */ 
  interface DoctorFieldRefs {
    readonly id: FieldRef<"Doctor", 'Int'>
    readonly name: FieldRef<"Doctor", 'String'>
    readonly specialty: FieldRef<"Doctor", 'String'>
    readonly consultationAddress: FieldRef<"Doctor", 'String'>
    readonly phoneNumber: FieldRef<"Doctor", 'String'>
    readonly emailAddress: FieldRef<"Doctor", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Doctor findUnique
   */
  export type DoctorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where: DoctorWhereUniqueInput
  }


  /**
   * Doctor findUniqueOrThrow
   */
  export type DoctorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where: DoctorWhereUniqueInput
  }


  /**
   * Doctor findFirst
   */
  export type DoctorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     */
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }


  /**
   * Doctor findFirstOrThrow
   */
  export type DoctorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     */
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }


  /**
   * Doctor findMany
   */
  export type DoctorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctors to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }


  /**
   * Doctor create
   */
  export type DoctorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The data needed to create a Doctor.
     */
    data: XOR<DoctorCreateInput, DoctorUncheckedCreateInput>
  }


  /**
   * Doctor createMany
   */
  export type DoctorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Doctors.
     */
    data: DoctorCreateManyInput | DoctorCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Doctor update
   */
  export type DoctorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The data needed to update a Doctor.
     */
    data: XOR<DoctorUpdateInput, DoctorUncheckedUpdateInput>
    /**
     * Choose, which Doctor to update.
     */
    where: DoctorWhereUniqueInput
  }


  /**
   * Doctor updateMany
   */
  export type DoctorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Doctors.
     */
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyInput>
    /**
     * Filter which Doctors to update
     */
    where?: DoctorWhereInput
  }


  /**
   * Doctor upsert
   */
  export type DoctorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The filter to search for the Doctor to update in case it exists.
     */
    where: DoctorWhereUniqueInput
    /**
     * In case the Doctor found by the `where` argument doesn't exist, create a new Doctor with this data.
     */
    create: XOR<DoctorCreateInput, DoctorUncheckedCreateInput>
    /**
     * In case the Doctor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorUpdateInput, DoctorUncheckedUpdateInput>
  }


  /**
   * Doctor delete
   */
  export type DoctorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter which Doctor to delete.
     */
    where: DoctorWhereUniqueInput
  }


  /**
   * Doctor deleteMany
   */
  export type DoctorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doctors to delete
     */
    where?: DoctorWhereInput
  }


  /**
   * Doctor.exams
   */
  export type Doctor$examsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exam
     */
    select?: ExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExamInclude<ExtArgs> | null
    where?: ExamWhereInput
    orderBy?: ExamOrderByWithRelationInput | ExamOrderByWithRelationInput[]
    cursor?: ExamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExamScalarFieldEnum | ExamScalarFieldEnum[]
  }


  /**
   * Doctor without action
   */
  export type DoctorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ExamScalarFieldEnum: {
    id: 'id',
    requestDate: 'requestDate',
    doctorId: 'doctorId',
    patientId: 'patientId'
  };

  export type ExamScalarFieldEnum = (typeof ExamScalarFieldEnum)[keyof typeof ExamScalarFieldEnum]


  export const ExamTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type ExamTypeScalarFieldEnum = (typeof ExamTypeScalarFieldEnum)[keyof typeof ExamTypeScalarFieldEnum]


  export const ExamDetailScalarFieldEnum: {
    id: 'id',
    examId: 'examId',
    examTypeId: 'examTypeId'
  };

  export type ExamDetailScalarFieldEnum = (typeof ExamDetailScalarFieldEnum)[keyof typeof ExamDetailScalarFieldEnum]


  export const SampleScalarFieldEnum: {
    id: 'id',
    examId: 'examId',
    sampleDate: 'sampleDate',
    sampleTypeId: 'sampleTypeId',
    observations: 'observations'
  };

  export type SampleScalarFieldEnum = (typeof SampleScalarFieldEnum)[keyof typeof SampleScalarFieldEnum]


  export const SampleTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type SampleTypeScalarFieldEnum = (typeof SampleTypeScalarFieldEnum)[keyof typeof SampleTypeScalarFieldEnum]


  export const MagnitudeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    unitMeasure: 'unitMeasure'
  };

  export type MagnitudeScalarFieldEnum = (typeof MagnitudeScalarFieldEnum)[keyof typeof MagnitudeScalarFieldEnum]


  export const ResultScalarFieldEnum: {
    id: 'id',
    resultDate: 'resultDate',
    observations: 'observations',
    sampleId: 'sampleId'
  };

  export type ResultScalarFieldEnum = (typeof ResultScalarFieldEnum)[keyof typeof ResultScalarFieldEnum]


  export const DetailResultScalarFieldEnum: {
    id: 'id',
    resultId: 'resultId',
    magnitudeId: 'magnitudeId',
    numericValue: 'numericValue',
    qualitativeInterpretation: 'qualitativeInterpretation',
    qualitativeResult: 'qualitativeResult',
    additionalDescription: 'additionalDescription'
  };

  export type DetailResultScalarFieldEnum = (typeof DetailResultScalarFieldEnum)[keyof typeof DetailResultScalarFieldEnum]


  export const PatientScalarFieldEnum: {
    id: 'id',
    name: 'name',
    birthDate: 'birthDate',
    gender: 'gender',
    address: 'address',
    phoneNumber: 'phoneNumber',
    medicalHistory: 'medicalHistory'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const DoctorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    specialty: 'specialty',
    consultationAddress: 'consultationAddress',
    phoneNumber: 'phoneNumber',
    emailAddress: 'emailAddress'
  };

  export type DoctorScalarFieldEnum = (typeof DoctorScalarFieldEnum)[keyof typeof DoctorScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type ExamWhereInput = {
    AND?: ExamWhereInput | ExamWhereInput[]
    OR?: ExamWhereInput[]
    NOT?: ExamWhereInput | ExamWhereInput[]
    id?: IntFilter<"Exam"> | number
    requestDate?: DateTimeFilter<"Exam"> | Date | string
    doctorId?: IntFilter<"Exam"> | number
    patientId?: IntFilter<"Exam"> | number
    samples?: SampleListRelationFilter
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    details?: ExamDetailListRelationFilter
  }

  export type ExamOrderByWithRelationInput = {
    id?: SortOrder
    requestDate?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
    samples?: SampleOrderByRelationAggregateInput
    doctor?: DoctorOrderByWithRelationInput
    patient?: PatientOrderByWithRelationInput
    details?: ExamDetailOrderByRelationAggregateInput
  }

  export type ExamWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ExamWhereInput | ExamWhereInput[]
    OR?: ExamWhereInput[]
    NOT?: ExamWhereInput | ExamWhereInput[]
    requestDate?: DateTimeFilter<"Exam"> | Date | string
    doctorId?: IntFilter<"Exam"> | number
    patientId?: IntFilter<"Exam"> | number
    samples?: SampleListRelationFilter
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    details?: ExamDetailListRelationFilter
  }, "id">

  export type ExamOrderByWithAggregationInput = {
    id?: SortOrder
    requestDate?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
    _count?: ExamCountOrderByAggregateInput
    _avg?: ExamAvgOrderByAggregateInput
    _max?: ExamMaxOrderByAggregateInput
    _min?: ExamMinOrderByAggregateInput
    _sum?: ExamSumOrderByAggregateInput
  }

  export type ExamScalarWhereWithAggregatesInput = {
    AND?: ExamScalarWhereWithAggregatesInput | ExamScalarWhereWithAggregatesInput[]
    OR?: ExamScalarWhereWithAggregatesInput[]
    NOT?: ExamScalarWhereWithAggregatesInput | ExamScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Exam"> | number
    requestDate?: DateTimeWithAggregatesFilter<"Exam"> | Date | string
    doctorId?: IntWithAggregatesFilter<"Exam"> | number
    patientId?: IntWithAggregatesFilter<"Exam"> | number
  }

  export type ExamTypeWhereInput = {
    AND?: ExamTypeWhereInput | ExamTypeWhereInput[]
    OR?: ExamTypeWhereInput[]
    NOT?: ExamTypeWhereInput | ExamTypeWhereInput[]
    id?: IntFilter<"ExamType"> | number
    name?: StringFilter<"ExamType"> | string
    description?: StringFilter<"ExamType"> | string
    details?: ExamDetailListRelationFilter
  }

  export type ExamTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    details?: ExamDetailOrderByRelationAggregateInput
  }

  export type ExamTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ExamTypeWhereInput | ExamTypeWhereInput[]
    OR?: ExamTypeWhereInput[]
    NOT?: ExamTypeWhereInput | ExamTypeWhereInput[]
    name?: StringFilter<"ExamType"> | string
    description?: StringFilter<"ExamType"> | string
    details?: ExamDetailListRelationFilter
  }, "id">

  export type ExamTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    _count?: ExamTypeCountOrderByAggregateInput
    _avg?: ExamTypeAvgOrderByAggregateInput
    _max?: ExamTypeMaxOrderByAggregateInput
    _min?: ExamTypeMinOrderByAggregateInput
    _sum?: ExamTypeSumOrderByAggregateInput
  }

  export type ExamTypeScalarWhereWithAggregatesInput = {
    AND?: ExamTypeScalarWhereWithAggregatesInput | ExamTypeScalarWhereWithAggregatesInput[]
    OR?: ExamTypeScalarWhereWithAggregatesInput[]
    NOT?: ExamTypeScalarWhereWithAggregatesInput | ExamTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ExamType"> | number
    name?: StringWithAggregatesFilter<"ExamType"> | string
    description?: StringWithAggregatesFilter<"ExamType"> | string
  }

  export type ExamDetailWhereInput = {
    AND?: ExamDetailWhereInput | ExamDetailWhereInput[]
    OR?: ExamDetailWhereInput[]
    NOT?: ExamDetailWhereInput | ExamDetailWhereInput[]
    id?: IntFilter<"ExamDetail"> | number
    examId?: IntFilter<"ExamDetail"> | number
    examTypeId?: IntFilter<"ExamDetail"> | number
    exam?: XOR<ExamRelationFilter, ExamWhereInput>
    examType?: XOR<ExamTypeRelationFilter, ExamTypeWhereInput>
  }

  export type ExamDetailOrderByWithRelationInput = {
    id?: SortOrder
    examId?: SortOrder
    examTypeId?: SortOrder
    exam?: ExamOrderByWithRelationInput
    examType?: ExamTypeOrderByWithRelationInput
  }

  export type ExamDetailWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ExamDetailWhereInput | ExamDetailWhereInput[]
    OR?: ExamDetailWhereInput[]
    NOT?: ExamDetailWhereInput | ExamDetailWhereInput[]
    examId?: IntFilter<"ExamDetail"> | number
    examTypeId?: IntFilter<"ExamDetail"> | number
    exam?: XOR<ExamRelationFilter, ExamWhereInput>
    examType?: XOR<ExamTypeRelationFilter, ExamTypeWhereInput>
  }, "id">

  export type ExamDetailOrderByWithAggregationInput = {
    id?: SortOrder
    examId?: SortOrder
    examTypeId?: SortOrder
    _count?: ExamDetailCountOrderByAggregateInput
    _avg?: ExamDetailAvgOrderByAggregateInput
    _max?: ExamDetailMaxOrderByAggregateInput
    _min?: ExamDetailMinOrderByAggregateInput
    _sum?: ExamDetailSumOrderByAggregateInput
  }

  export type ExamDetailScalarWhereWithAggregatesInput = {
    AND?: ExamDetailScalarWhereWithAggregatesInput | ExamDetailScalarWhereWithAggregatesInput[]
    OR?: ExamDetailScalarWhereWithAggregatesInput[]
    NOT?: ExamDetailScalarWhereWithAggregatesInput | ExamDetailScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ExamDetail"> | number
    examId?: IntWithAggregatesFilter<"ExamDetail"> | number
    examTypeId?: IntWithAggregatesFilter<"ExamDetail"> | number
  }

  export type SampleWhereInput = {
    AND?: SampleWhereInput | SampleWhereInput[]
    OR?: SampleWhereInput[]
    NOT?: SampleWhereInput | SampleWhereInput[]
    id?: IntFilter<"Sample"> | number
    examId?: IntFilter<"Sample"> | number
    sampleDate?: DateTimeFilter<"Sample"> | Date | string
    sampleTypeId?: IntFilter<"Sample"> | number
    observations?: StringNullableFilter<"Sample"> | string | null
    result?: XOR<ResultNullableRelationFilter, ResultWhereInput> | null
    exam?: XOR<ExamRelationFilter, ExamWhereInput>
    sampleType?: XOR<SampleTypeRelationFilter, SampleTypeWhereInput>
  }

  export type SampleOrderByWithRelationInput = {
    id?: SortOrder
    examId?: SortOrder
    sampleDate?: SortOrder
    sampleTypeId?: SortOrder
    observations?: SortOrderInput | SortOrder
    result?: ResultOrderByWithRelationInput
    exam?: ExamOrderByWithRelationInput
    sampleType?: SampleTypeOrderByWithRelationInput
  }

  export type SampleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SampleWhereInput | SampleWhereInput[]
    OR?: SampleWhereInput[]
    NOT?: SampleWhereInput | SampleWhereInput[]
    examId?: IntFilter<"Sample"> | number
    sampleDate?: DateTimeFilter<"Sample"> | Date | string
    sampleTypeId?: IntFilter<"Sample"> | number
    observations?: StringNullableFilter<"Sample"> | string | null
    result?: XOR<ResultNullableRelationFilter, ResultWhereInput> | null
    exam?: XOR<ExamRelationFilter, ExamWhereInput>
    sampleType?: XOR<SampleTypeRelationFilter, SampleTypeWhereInput>
  }, "id">

  export type SampleOrderByWithAggregationInput = {
    id?: SortOrder
    examId?: SortOrder
    sampleDate?: SortOrder
    sampleTypeId?: SortOrder
    observations?: SortOrderInput | SortOrder
    _count?: SampleCountOrderByAggregateInput
    _avg?: SampleAvgOrderByAggregateInput
    _max?: SampleMaxOrderByAggregateInput
    _min?: SampleMinOrderByAggregateInput
    _sum?: SampleSumOrderByAggregateInput
  }

  export type SampleScalarWhereWithAggregatesInput = {
    AND?: SampleScalarWhereWithAggregatesInput | SampleScalarWhereWithAggregatesInput[]
    OR?: SampleScalarWhereWithAggregatesInput[]
    NOT?: SampleScalarWhereWithAggregatesInput | SampleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Sample"> | number
    examId?: IntWithAggregatesFilter<"Sample"> | number
    sampleDate?: DateTimeWithAggregatesFilter<"Sample"> | Date | string
    sampleTypeId?: IntWithAggregatesFilter<"Sample"> | number
    observations?: StringNullableWithAggregatesFilter<"Sample"> | string | null
  }

  export type SampleTypeWhereInput = {
    AND?: SampleTypeWhereInput | SampleTypeWhereInput[]
    OR?: SampleTypeWhereInput[]
    NOT?: SampleTypeWhereInput | SampleTypeWhereInput[]
    id?: IntFilter<"SampleType"> | number
    name?: StringFilter<"SampleType"> | string
    description?: StringFilter<"SampleType"> | string
    samples?: SampleListRelationFilter
  }

  export type SampleTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    samples?: SampleOrderByRelationAggregateInput
  }

  export type SampleTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SampleTypeWhereInput | SampleTypeWhereInput[]
    OR?: SampleTypeWhereInput[]
    NOT?: SampleTypeWhereInput | SampleTypeWhereInput[]
    name?: StringFilter<"SampleType"> | string
    description?: StringFilter<"SampleType"> | string
    samples?: SampleListRelationFilter
  }, "id">

  export type SampleTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    _count?: SampleTypeCountOrderByAggregateInput
    _avg?: SampleTypeAvgOrderByAggregateInput
    _max?: SampleTypeMaxOrderByAggregateInput
    _min?: SampleTypeMinOrderByAggregateInput
    _sum?: SampleTypeSumOrderByAggregateInput
  }

  export type SampleTypeScalarWhereWithAggregatesInput = {
    AND?: SampleTypeScalarWhereWithAggregatesInput | SampleTypeScalarWhereWithAggregatesInput[]
    OR?: SampleTypeScalarWhereWithAggregatesInput[]
    NOT?: SampleTypeScalarWhereWithAggregatesInput | SampleTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SampleType"> | number
    name?: StringWithAggregatesFilter<"SampleType"> | string
    description?: StringWithAggregatesFilter<"SampleType"> | string
  }

  export type MagnitudeWhereInput = {
    AND?: MagnitudeWhereInput | MagnitudeWhereInput[]
    OR?: MagnitudeWhereInput[]
    NOT?: MagnitudeWhereInput | MagnitudeWhereInput[]
    id?: IntFilter<"Magnitude"> | number
    name?: StringFilter<"Magnitude"> | string
    unitMeasure?: StringFilter<"Magnitude"> | string
    details?: DetailResultListRelationFilter
  }

  export type MagnitudeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    unitMeasure?: SortOrder
    details?: DetailResultOrderByRelationAggregateInput
  }

  export type MagnitudeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MagnitudeWhereInput | MagnitudeWhereInput[]
    OR?: MagnitudeWhereInput[]
    NOT?: MagnitudeWhereInput | MagnitudeWhereInput[]
    name?: StringFilter<"Magnitude"> | string
    unitMeasure?: StringFilter<"Magnitude"> | string
    details?: DetailResultListRelationFilter
  }, "id">

  export type MagnitudeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    unitMeasure?: SortOrder
    _count?: MagnitudeCountOrderByAggregateInput
    _avg?: MagnitudeAvgOrderByAggregateInput
    _max?: MagnitudeMaxOrderByAggregateInput
    _min?: MagnitudeMinOrderByAggregateInput
    _sum?: MagnitudeSumOrderByAggregateInput
  }

  export type MagnitudeScalarWhereWithAggregatesInput = {
    AND?: MagnitudeScalarWhereWithAggregatesInput | MagnitudeScalarWhereWithAggregatesInput[]
    OR?: MagnitudeScalarWhereWithAggregatesInput[]
    NOT?: MagnitudeScalarWhereWithAggregatesInput | MagnitudeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Magnitude"> | number
    name?: StringWithAggregatesFilter<"Magnitude"> | string
    unitMeasure?: StringWithAggregatesFilter<"Magnitude"> | string
  }

  export type ResultWhereInput = {
    AND?: ResultWhereInput | ResultWhereInput[]
    OR?: ResultWhereInput[]
    NOT?: ResultWhereInput | ResultWhereInput[]
    id?: IntFilter<"Result"> | number
    resultDate?: DateTimeFilter<"Result"> | Date | string
    observations?: StringNullableFilter<"Result"> | string | null
    sampleId?: IntFilter<"Result"> | number
    details?: DetailResultListRelationFilter
    sample?: XOR<SampleRelationFilter, SampleWhereInput>
  }

  export type ResultOrderByWithRelationInput = {
    id?: SortOrder
    resultDate?: SortOrder
    observations?: SortOrderInput | SortOrder
    sampleId?: SortOrder
    details?: DetailResultOrderByRelationAggregateInput
    sample?: SampleOrderByWithRelationInput
  }

  export type ResultWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    sampleId?: number
    AND?: ResultWhereInput | ResultWhereInput[]
    OR?: ResultWhereInput[]
    NOT?: ResultWhereInput | ResultWhereInput[]
    resultDate?: DateTimeFilter<"Result"> | Date | string
    observations?: StringNullableFilter<"Result"> | string | null
    details?: DetailResultListRelationFilter
    sample?: XOR<SampleRelationFilter, SampleWhereInput>
  }, "id" | "sampleId">

  export type ResultOrderByWithAggregationInput = {
    id?: SortOrder
    resultDate?: SortOrder
    observations?: SortOrderInput | SortOrder
    sampleId?: SortOrder
    _count?: ResultCountOrderByAggregateInput
    _avg?: ResultAvgOrderByAggregateInput
    _max?: ResultMaxOrderByAggregateInput
    _min?: ResultMinOrderByAggregateInput
    _sum?: ResultSumOrderByAggregateInput
  }

  export type ResultScalarWhereWithAggregatesInput = {
    AND?: ResultScalarWhereWithAggregatesInput | ResultScalarWhereWithAggregatesInput[]
    OR?: ResultScalarWhereWithAggregatesInput[]
    NOT?: ResultScalarWhereWithAggregatesInput | ResultScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Result"> | number
    resultDate?: DateTimeWithAggregatesFilter<"Result"> | Date | string
    observations?: StringNullableWithAggregatesFilter<"Result"> | string | null
    sampleId?: IntWithAggregatesFilter<"Result"> | number
  }

  export type DetailResultWhereInput = {
    AND?: DetailResultWhereInput | DetailResultWhereInput[]
    OR?: DetailResultWhereInput[]
    NOT?: DetailResultWhereInput | DetailResultWhereInput[]
    id?: IntFilter<"DetailResult"> | number
    resultId?: IntFilter<"DetailResult"> | number
    magnitudeId?: IntFilter<"DetailResult"> | number
    numericValue?: FloatFilter<"DetailResult"> | number
    qualitativeInterpretation?: StringFilter<"DetailResult"> | string
    qualitativeResult?: StringFilter<"DetailResult"> | string
    additionalDescription?: StringFilter<"DetailResult"> | string
    result?: XOR<ResultRelationFilter, ResultWhereInput>
    magnitude?: XOR<MagnitudeRelationFilter, MagnitudeWhereInput>
  }

  export type DetailResultOrderByWithRelationInput = {
    id?: SortOrder
    resultId?: SortOrder
    magnitudeId?: SortOrder
    numericValue?: SortOrder
    qualitativeInterpretation?: SortOrder
    qualitativeResult?: SortOrder
    additionalDescription?: SortOrder
    result?: ResultOrderByWithRelationInput
    magnitude?: MagnitudeOrderByWithRelationInput
  }

  export type DetailResultWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DetailResultWhereInput | DetailResultWhereInput[]
    OR?: DetailResultWhereInput[]
    NOT?: DetailResultWhereInput | DetailResultWhereInput[]
    resultId?: IntFilter<"DetailResult"> | number
    magnitudeId?: IntFilter<"DetailResult"> | number
    numericValue?: FloatFilter<"DetailResult"> | number
    qualitativeInterpretation?: StringFilter<"DetailResult"> | string
    qualitativeResult?: StringFilter<"DetailResult"> | string
    additionalDescription?: StringFilter<"DetailResult"> | string
    result?: XOR<ResultRelationFilter, ResultWhereInput>
    magnitude?: XOR<MagnitudeRelationFilter, MagnitudeWhereInput>
  }, "id">

  export type DetailResultOrderByWithAggregationInput = {
    id?: SortOrder
    resultId?: SortOrder
    magnitudeId?: SortOrder
    numericValue?: SortOrder
    qualitativeInterpretation?: SortOrder
    qualitativeResult?: SortOrder
    additionalDescription?: SortOrder
    _count?: DetailResultCountOrderByAggregateInput
    _avg?: DetailResultAvgOrderByAggregateInput
    _max?: DetailResultMaxOrderByAggregateInput
    _min?: DetailResultMinOrderByAggregateInput
    _sum?: DetailResultSumOrderByAggregateInput
  }

  export type DetailResultScalarWhereWithAggregatesInput = {
    AND?: DetailResultScalarWhereWithAggregatesInput | DetailResultScalarWhereWithAggregatesInput[]
    OR?: DetailResultScalarWhereWithAggregatesInput[]
    NOT?: DetailResultScalarWhereWithAggregatesInput | DetailResultScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DetailResult"> | number
    resultId?: IntWithAggregatesFilter<"DetailResult"> | number
    magnitudeId?: IntWithAggregatesFilter<"DetailResult"> | number
    numericValue?: FloatWithAggregatesFilter<"DetailResult"> | number
    qualitativeInterpretation?: StringWithAggregatesFilter<"DetailResult"> | string
    qualitativeResult?: StringWithAggregatesFilter<"DetailResult"> | string
    additionalDescription?: StringWithAggregatesFilter<"DetailResult"> | string
  }

  export type PatientWhereInput = {
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    id?: IntFilter<"Patient"> | number
    name?: StringFilter<"Patient"> | string
    birthDate?: DateTimeFilter<"Patient"> | Date | string
    gender?: StringFilter<"Patient"> | string
    address?: StringFilter<"Patient"> | string
    phoneNumber?: StringFilter<"Patient"> | string
    medicalHistory?: StringFilter<"Patient"> | string
    exams?: ExamListRelationFilter
  }

  export type PatientOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    birthDate?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    phoneNumber?: SortOrder
    medicalHistory?: SortOrder
    exams?: ExamOrderByRelationAggregateInput
  }

  export type PatientWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    name?: StringFilter<"Patient"> | string
    birthDate?: DateTimeFilter<"Patient"> | Date | string
    gender?: StringFilter<"Patient"> | string
    address?: StringFilter<"Patient"> | string
    phoneNumber?: StringFilter<"Patient"> | string
    medicalHistory?: StringFilter<"Patient"> | string
    exams?: ExamListRelationFilter
  }, "id">

  export type PatientOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    birthDate?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    phoneNumber?: SortOrder
    medicalHistory?: SortOrder
    _count?: PatientCountOrderByAggregateInput
    _avg?: PatientAvgOrderByAggregateInput
    _max?: PatientMaxOrderByAggregateInput
    _min?: PatientMinOrderByAggregateInput
    _sum?: PatientSumOrderByAggregateInput
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    OR?: PatientScalarWhereWithAggregatesInput[]
    NOT?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Patient"> | number
    name?: StringWithAggregatesFilter<"Patient"> | string
    birthDate?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
    gender?: StringWithAggregatesFilter<"Patient"> | string
    address?: StringWithAggregatesFilter<"Patient"> | string
    phoneNumber?: StringWithAggregatesFilter<"Patient"> | string
    medicalHistory?: StringWithAggregatesFilter<"Patient"> | string
  }

  export type DoctorWhereInput = {
    AND?: DoctorWhereInput | DoctorWhereInput[]
    OR?: DoctorWhereInput[]
    NOT?: DoctorWhereInput | DoctorWhereInput[]
    id?: IntFilter<"Doctor"> | number
    name?: StringFilter<"Doctor"> | string
    specialty?: StringFilter<"Doctor"> | string
    consultationAddress?: StringFilter<"Doctor"> | string
    phoneNumber?: StringFilter<"Doctor"> | string
    emailAddress?: StringFilter<"Doctor"> | string
    exams?: ExamListRelationFilter
  }

  export type DoctorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    specialty?: SortOrder
    consultationAddress?: SortOrder
    phoneNumber?: SortOrder
    emailAddress?: SortOrder
    exams?: ExamOrderByRelationAggregateInput
  }

  export type DoctorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DoctorWhereInput | DoctorWhereInput[]
    OR?: DoctorWhereInput[]
    NOT?: DoctorWhereInput | DoctorWhereInput[]
    name?: StringFilter<"Doctor"> | string
    specialty?: StringFilter<"Doctor"> | string
    consultationAddress?: StringFilter<"Doctor"> | string
    phoneNumber?: StringFilter<"Doctor"> | string
    emailAddress?: StringFilter<"Doctor"> | string
    exams?: ExamListRelationFilter
  }, "id">

  export type DoctorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    specialty?: SortOrder
    consultationAddress?: SortOrder
    phoneNumber?: SortOrder
    emailAddress?: SortOrder
    _count?: DoctorCountOrderByAggregateInput
    _avg?: DoctorAvgOrderByAggregateInput
    _max?: DoctorMaxOrderByAggregateInput
    _min?: DoctorMinOrderByAggregateInput
    _sum?: DoctorSumOrderByAggregateInput
  }

  export type DoctorScalarWhereWithAggregatesInput = {
    AND?: DoctorScalarWhereWithAggregatesInput | DoctorScalarWhereWithAggregatesInput[]
    OR?: DoctorScalarWhereWithAggregatesInput[]
    NOT?: DoctorScalarWhereWithAggregatesInput | DoctorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Doctor"> | number
    name?: StringWithAggregatesFilter<"Doctor"> | string
    specialty?: StringWithAggregatesFilter<"Doctor"> | string
    consultationAddress?: StringWithAggregatesFilter<"Doctor"> | string
    phoneNumber?: StringWithAggregatesFilter<"Doctor"> | string
    emailAddress?: StringWithAggregatesFilter<"Doctor"> | string
  }

  export type ExamCreateInput = {
    requestDate: Date | string
    samples?: SampleCreateNestedManyWithoutExamInput
    doctor: DoctorCreateNestedOneWithoutExamsInput
    patient: PatientCreateNestedOneWithoutExamsInput
    details?: ExamDetailCreateNestedManyWithoutExamInput
  }

  export type ExamUncheckedCreateInput = {
    id?: number
    requestDate: Date | string
    doctorId: number
    patientId: number
    samples?: SampleUncheckedCreateNestedManyWithoutExamInput
    details?: ExamDetailUncheckedCreateNestedManyWithoutExamInput
  }

  export type ExamUpdateInput = {
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUpdateManyWithoutExamNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutExamsNestedInput
    patient?: PatientUpdateOneRequiredWithoutExamsNestedInput
    details?: ExamDetailUpdateManyWithoutExamNestedInput
  }

  export type ExamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    samples?: SampleUncheckedUpdateManyWithoutExamNestedInput
    details?: ExamDetailUncheckedUpdateManyWithoutExamNestedInput
  }

  export type ExamCreateManyInput = {
    id?: number
    requestDate: Date | string
    doctorId: number
    patientId: number
  }

  export type ExamUpdateManyMutationInput = {
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type ExamTypeCreateInput = {
    name: string
    description: string
    details?: ExamDetailCreateNestedManyWithoutExamTypeInput
  }

  export type ExamTypeUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    details?: ExamDetailUncheckedCreateNestedManyWithoutExamTypeInput
  }

  export type ExamTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: ExamDetailUpdateManyWithoutExamTypeNestedInput
  }

  export type ExamTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: ExamDetailUncheckedUpdateManyWithoutExamTypeNestedInput
  }

  export type ExamTypeCreateManyInput = {
    id?: number
    name: string
    description: string
  }

  export type ExamTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ExamTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ExamDetailCreateInput = {
    exam: ExamCreateNestedOneWithoutDetailsInput
    examType: ExamTypeCreateNestedOneWithoutDetailsInput
  }

  export type ExamDetailUncheckedCreateInput = {
    id?: number
    examId: number
    examTypeId: number
  }

  export type ExamDetailUpdateInput = {
    exam?: ExamUpdateOneRequiredWithoutDetailsNestedInput
    examType?: ExamTypeUpdateOneRequiredWithoutDetailsNestedInput
  }

  export type ExamDetailUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    examTypeId?: IntFieldUpdateOperationsInput | number
  }

  export type ExamDetailCreateManyInput = {
    id?: number
    examId: number
    examTypeId: number
  }

  export type ExamDetailUpdateManyMutationInput = {

  }

  export type ExamDetailUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    examTypeId?: IntFieldUpdateOperationsInput | number
  }

  export type SampleCreateInput = {
    sampleDate: Date | string
    observations?: string | null
    result?: ResultCreateNestedOneWithoutSampleInput
    exam: ExamCreateNestedOneWithoutSamplesInput
    sampleType: SampleTypeCreateNestedOneWithoutSamplesInput
  }

  export type SampleUncheckedCreateInput = {
    id?: number
    examId: number
    sampleDate: Date | string
    sampleTypeId: number
    observations?: string | null
    result?: ResultUncheckedCreateNestedOneWithoutSampleInput
  }

  export type SampleUpdateInput = {
    sampleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    result?: ResultUpdateOneWithoutSampleNestedInput
    exam?: ExamUpdateOneRequiredWithoutSamplesNestedInput
    sampleType?: SampleTypeUpdateOneRequiredWithoutSamplesNestedInput
  }

  export type SampleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    sampleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sampleTypeId?: IntFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    result?: ResultUncheckedUpdateOneWithoutSampleNestedInput
  }

  export type SampleCreateManyInput = {
    id?: number
    examId: number
    sampleDate: Date | string
    sampleTypeId: number
    observations?: string | null
  }

  export type SampleUpdateManyMutationInput = {
    sampleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SampleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    sampleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sampleTypeId?: IntFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SampleTypeCreateInput = {
    name: string
    description: string
    samples?: SampleCreateNestedManyWithoutSampleTypeInput
  }

  export type SampleTypeUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    samples?: SampleUncheckedCreateNestedManyWithoutSampleTypeInput
  }

  export type SampleTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    samples?: SampleUpdateManyWithoutSampleTypeNestedInput
  }

  export type SampleTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    samples?: SampleUncheckedUpdateManyWithoutSampleTypeNestedInput
  }

  export type SampleTypeCreateManyInput = {
    id?: number
    name: string
    description: string
  }

  export type SampleTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type SampleTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type MagnitudeCreateInput = {
    name: string
    unitMeasure: string
    details?: DetailResultCreateNestedManyWithoutMagnitudeInput
  }

  export type MagnitudeUncheckedCreateInput = {
    id?: number
    name: string
    unitMeasure: string
    details?: DetailResultUncheckedCreateNestedManyWithoutMagnitudeInput
  }

  export type MagnitudeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    unitMeasure?: StringFieldUpdateOperationsInput | string
    details?: DetailResultUpdateManyWithoutMagnitudeNestedInput
  }

  export type MagnitudeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    unitMeasure?: StringFieldUpdateOperationsInput | string
    details?: DetailResultUncheckedUpdateManyWithoutMagnitudeNestedInput
  }

  export type MagnitudeCreateManyInput = {
    id?: number
    name: string
    unitMeasure: string
  }

  export type MagnitudeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    unitMeasure?: StringFieldUpdateOperationsInput | string
  }

  export type MagnitudeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    unitMeasure?: StringFieldUpdateOperationsInput | string
  }

  export type ResultCreateInput = {
    resultDate: Date | string
    observations?: string | null
    details?: DetailResultCreateNestedManyWithoutResultInput
    sample: SampleCreateNestedOneWithoutResultInput
  }

  export type ResultUncheckedCreateInput = {
    id?: number
    resultDate: Date | string
    observations?: string | null
    sampleId: number
    details?: DetailResultUncheckedCreateNestedManyWithoutResultInput
  }

  export type ResultUpdateInput = {
    resultDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    details?: DetailResultUpdateManyWithoutResultNestedInput
    sample?: SampleUpdateOneRequiredWithoutResultNestedInput
  }

  export type ResultUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resultDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    sampleId?: IntFieldUpdateOperationsInput | number
    details?: DetailResultUncheckedUpdateManyWithoutResultNestedInput
  }

  export type ResultCreateManyInput = {
    id?: number
    resultDate: Date | string
    observations?: string | null
    sampleId: number
  }

  export type ResultUpdateManyMutationInput = {
    resultDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ResultUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resultDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    sampleId?: IntFieldUpdateOperationsInput | number
  }

  export type DetailResultCreateInput = {
    numericValue: number
    qualitativeInterpretation: string
    qualitativeResult: string
    additionalDescription: string
    result: ResultCreateNestedOneWithoutDetailsInput
    magnitude: MagnitudeCreateNestedOneWithoutDetailsInput
  }

  export type DetailResultUncheckedCreateInput = {
    id?: number
    resultId: number
    magnitudeId: number
    numericValue: number
    qualitativeInterpretation: string
    qualitativeResult: string
    additionalDescription: string
  }

  export type DetailResultUpdateInput = {
    numericValue?: FloatFieldUpdateOperationsInput | number
    qualitativeInterpretation?: StringFieldUpdateOperationsInput | string
    qualitativeResult?: StringFieldUpdateOperationsInput | string
    additionalDescription?: StringFieldUpdateOperationsInput | string
    result?: ResultUpdateOneRequiredWithoutDetailsNestedInput
    magnitude?: MagnitudeUpdateOneRequiredWithoutDetailsNestedInput
  }

  export type DetailResultUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    resultId?: IntFieldUpdateOperationsInput | number
    magnitudeId?: IntFieldUpdateOperationsInput | number
    numericValue?: FloatFieldUpdateOperationsInput | number
    qualitativeInterpretation?: StringFieldUpdateOperationsInput | string
    qualitativeResult?: StringFieldUpdateOperationsInput | string
    additionalDescription?: StringFieldUpdateOperationsInput | string
  }

  export type DetailResultCreateManyInput = {
    id?: number
    resultId: number
    magnitudeId: number
    numericValue: number
    qualitativeInterpretation: string
    qualitativeResult: string
    additionalDescription: string
  }

  export type DetailResultUpdateManyMutationInput = {
    numericValue?: FloatFieldUpdateOperationsInput | number
    qualitativeInterpretation?: StringFieldUpdateOperationsInput | string
    qualitativeResult?: StringFieldUpdateOperationsInput | string
    additionalDescription?: StringFieldUpdateOperationsInput | string
  }

  export type DetailResultUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    resultId?: IntFieldUpdateOperationsInput | number
    magnitudeId?: IntFieldUpdateOperationsInput | number
    numericValue?: FloatFieldUpdateOperationsInput | number
    qualitativeInterpretation?: StringFieldUpdateOperationsInput | string
    qualitativeResult?: StringFieldUpdateOperationsInput | string
    additionalDescription?: StringFieldUpdateOperationsInput | string
  }

  export type PatientCreateInput = {
    name: string
    birthDate: Date | string
    gender: string
    address: string
    phoneNumber: string
    medicalHistory: string
    exams?: ExamCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateInput = {
    id?: number
    name: string
    birthDate: Date | string
    gender: string
    address: string
    phoneNumber: string
    medicalHistory: string
    exams?: ExamUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    medicalHistory?: StringFieldUpdateOperationsInput | string
    exams?: ExamUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    medicalHistory?: StringFieldUpdateOperationsInput | string
    exams?: ExamUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateManyInput = {
    id?: number
    name: string
    birthDate: Date | string
    gender: string
    address: string
    phoneNumber: string
    medicalHistory: string
  }

  export type PatientUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    medicalHistory?: StringFieldUpdateOperationsInput | string
  }

  export type PatientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    medicalHistory?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorCreateInput = {
    name: string
    specialty: string
    consultationAddress: string
    phoneNumber: string
    emailAddress: string
    exams?: ExamCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateInput = {
    id?: number
    name: string
    specialty: string
    consultationAddress: string
    phoneNumber: string
    emailAddress: string
    exams?: ExamUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    consultationAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    emailAddress?: StringFieldUpdateOperationsInput | string
    exams?: ExamUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    consultationAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    emailAddress?: StringFieldUpdateOperationsInput | string
    exams?: ExamUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorCreateManyInput = {
    id?: number
    name: string
    specialty: string
    consultationAddress: string
    phoneNumber: string
    emailAddress: string
  }

  export type DoctorUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    consultationAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    emailAddress?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    consultationAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    emailAddress?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SampleListRelationFilter = {
    every?: SampleWhereInput
    some?: SampleWhereInput
    none?: SampleWhereInput
  }

  export type DoctorRelationFilter = {
    is?: DoctorWhereInput
    isNot?: DoctorWhereInput
  }

  export type PatientRelationFilter = {
    is?: PatientWhereInput
    isNot?: PatientWhereInput
  }

  export type ExamDetailListRelationFilter = {
    every?: ExamDetailWhereInput
    some?: ExamDetailWhereInput
    none?: ExamDetailWhereInput
  }

  export type SampleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExamDetailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExamCountOrderByAggregateInput = {
    id?: SortOrder
    requestDate?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
  }

  export type ExamAvgOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
  }

  export type ExamMaxOrderByAggregateInput = {
    id?: SortOrder
    requestDate?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
  }

  export type ExamMinOrderByAggregateInput = {
    id?: SortOrder
    requestDate?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
  }

  export type ExamSumOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ExamTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type ExamTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ExamTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type ExamTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type ExamTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type ExamRelationFilter = {
    is?: ExamWhereInput
    isNot?: ExamWhereInput
  }

  export type ExamTypeRelationFilter = {
    is?: ExamTypeWhereInput
    isNot?: ExamTypeWhereInput
  }

  export type ExamDetailCountOrderByAggregateInput = {
    id?: SortOrder
    examId?: SortOrder
    examTypeId?: SortOrder
  }

  export type ExamDetailAvgOrderByAggregateInput = {
    id?: SortOrder
    examId?: SortOrder
    examTypeId?: SortOrder
  }

  export type ExamDetailMaxOrderByAggregateInput = {
    id?: SortOrder
    examId?: SortOrder
    examTypeId?: SortOrder
  }

  export type ExamDetailMinOrderByAggregateInput = {
    id?: SortOrder
    examId?: SortOrder
    examTypeId?: SortOrder
  }

  export type ExamDetailSumOrderByAggregateInput = {
    id?: SortOrder
    examId?: SortOrder
    examTypeId?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ResultNullableRelationFilter = {
    is?: ResultWhereInput | null
    isNot?: ResultWhereInput | null
  }

  export type SampleTypeRelationFilter = {
    is?: SampleTypeWhereInput
    isNot?: SampleTypeWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SampleCountOrderByAggregateInput = {
    id?: SortOrder
    examId?: SortOrder
    sampleDate?: SortOrder
    sampleTypeId?: SortOrder
    observations?: SortOrder
  }

  export type SampleAvgOrderByAggregateInput = {
    id?: SortOrder
    examId?: SortOrder
    sampleTypeId?: SortOrder
  }

  export type SampleMaxOrderByAggregateInput = {
    id?: SortOrder
    examId?: SortOrder
    sampleDate?: SortOrder
    sampleTypeId?: SortOrder
    observations?: SortOrder
  }

  export type SampleMinOrderByAggregateInput = {
    id?: SortOrder
    examId?: SortOrder
    sampleDate?: SortOrder
    sampleTypeId?: SortOrder
    observations?: SortOrder
  }

  export type SampleSumOrderByAggregateInput = {
    id?: SortOrder
    examId?: SortOrder
    sampleTypeId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type SampleTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type SampleTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SampleTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type SampleTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type SampleTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DetailResultListRelationFilter = {
    every?: DetailResultWhereInput
    some?: DetailResultWhereInput
    none?: DetailResultWhereInput
  }

  export type DetailResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MagnitudeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    unitMeasure?: SortOrder
  }

  export type MagnitudeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MagnitudeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    unitMeasure?: SortOrder
  }

  export type MagnitudeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    unitMeasure?: SortOrder
  }

  export type MagnitudeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SampleRelationFilter = {
    is?: SampleWhereInput
    isNot?: SampleWhereInput
  }

  export type ResultCountOrderByAggregateInput = {
    id?: SortOrder
    resultDate?: SortOrder
    observations?: SortOrder
    sampleId?: SortOrder
  }

  export type ResultAvgOrderByAggregateInput = {
    id?: SortOrder
    sampleId?: SortOrder
  }

  export type ResultMaxOrderByAggregateInput = {
    id?: SortOrder
    resultDate?: SortOrder
    observations?: SortOrder
    sampleId?: SortOrder
  }

  export type ResultMinOrderByAggregateInput = {
    id?: SortOrder
    resultDate?: SortOrder
    observations?: SortOrder
    sampleId?: SortOrder
  }

  export type ResultSumOrderByAggregateInput = {
    id?: SortOrder
    sampleId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ResultRelationFilter = {
    is?: ResultWhereInput
    isNot?: ResultWhereInput
  }

  export type MagnitudeRelationFilter = {
    is?: MagnitudeWhereInput
    isNot?: MagnitudeWhereInput
  }

  export type DetailResultCountOrderByAggregateInput = {
    id?: SortOrder
    resultId?: SortOrder
    magnitudeId?: SortOrder
    numericValue?: SortOrder
    qualitativeInterpretation?: SortOrder
    qualitativeResult?: SortOrder
    additionalDescription?: SortOrder
  }

  export type DetailResultAvgOrderByAggregateInput = {
    id?: SortOrder
    resultId?: SortOrder
    magnitudeId?: SortOrder
    numericValue?: SortOrder
  }

  export type DetailResultMaxOrderByAggregateInput = {
    id?: SortOrder
    resultId?: SortOrder
    magnitudeId?: SortOrder
    numericValue?: SortOrder
    qualitativeInterpretation?: SortOrder
    qualitativeResult?: SortOrder
    additionalDescription?: SortOrder
  }

  export type DetailResultMinOrderByAggregateInput = {
    id?: SortOrder
    resultId?: SortOrder
    magnitudeId?: SortOrder
    numericValue?: SortOrder
    qualitativeInterpretation?: SortOrder
    qualitativeResult?: SortOrder
    additionalDescription?: SortOrder
  }

  export type DetailResultSumOrderByAggregateInput = {
    id?: SortOrder
    resultId?: SortOrder
    magnitudeId?: SortOrder
    numericValue?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ExamListRelationFilter = {
    every?: ExamWhereInput
    some?: ExamWhereInput
    none?: ExamWhereInput
  }

  export type ExamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    birthDate?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    phoneNumber?: SortOrder
    medicalHistory?: SortOrder
  }

  export type PatientAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PatientMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    birthDate?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    phoneNumber?: SortOrder
    medicalHistory?: SortOrder
  }

  export type PatientMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    birthDate?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    phoneNumber?: SortOrder
    medicalHistory?: SortOrder
  }

  export type PatientSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DoctorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    specialty?: SortOrder
    consultationAddress?: SortOrder
    phoneNumber?: SortOrder
    emailAddress?: SortOrder
  }

  export type DoctorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DoctorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    specialty?: SortOrder
    consultationAddress?: SortOrder
    phoneNumber?: SortOrder
    emailAddress?: SortOrder
  }

  export type DoctorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    specialty?: SortOrder
    consultationAddress?: SortOrder
    phoneNumber?: SortOrder
    emailAddress?: SortOrder
  }

  export type DoctorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SampleCreateNestedManyWithoutExamInput = {
    create?: XOR<SampleCreateWithoutExamInput, SampleUncheckedCreateWithoutExamInput> | SampleCreateWithoutExamInput[] | SampleUncheckedCreateWithoutExamInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutExamInput | SampleCreateOrConnectWithoutExamInput[]
    createMany?: SampleCreateManyExamInputEnvelope
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
  }

  export type DoctorCreateNestedOneWithoutExamsInput = {
    create?: XOR<DoctorCreateWithoutExamsInput, DoctorUncheckedCreateWithoutExamsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutExamsInput
    connect?: DoctorWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutExamsInput = {
    create?: XOR<PatientCreateWithoutExamsInput, PatientUncheckedCreateWithoutExamsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutExamsInput
    connect?: PatientWhereUniqueInput
  }

  export type ExamDetailCreateNestedManyWithoutExamInput = {
    create?: XOR<ExamDetailCreateWithoutExamInput, ExamDetailUncheckedCreateWithoutExamInput> | ExamDetailCreateWithoutExamInput[] | ExamDetailUncheckedCreateWithoutExamInput[]
    connectOrCreate?: ExamDetailCreateOrConnectWithoutExamInput | ExamDetailCreateOrConnectWithoutExamInput[]
    createMany?: ExamDetailCreateManyExamInputEnvelope
    connect?: ExamDetailWhereUniqueInput | ExamDetailWhereUniqueInput[]
  }

  export type SampleUncheckedCreateNestedManyWithoutExamInput = {
    create?: XOR<SampleCreateWithoutExamInput, SampleUncheckedCreateWithoutExamInput> | SampleCreateWithoutExamInput[] | SampleUncheckedCreateWithoutExamInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutExamInput | SampleCreateOrConnectWithoutExamInput[]
    createMany?: SampleCreateManyExamInputEnvelope
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
  }

  export type ExamDetailUncheckedCreateNestedManyWithoutExamInput = {
    create?: XOR<ExamDetailCreateWithoutExamInput, ExamDetailUncheckedCreateWithoutExamInput> | ExamDetailCreateWithoutExamInput[] | ExamDetailUncheckedCreateWithoutExamInput[]
    connectOrCreate?: ExamDetailCreateOrConnectWithoutExamInput | ExamDetailCreateOrConnectWithoutExamInput[]
    createMany?: ExamDetailCreateManyExamInputEnvelope
    connect?: ExamDetailWhereUniqueInput | ExamDetailWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SampleUpdateManyWithoutExamNestedInput = {
    create?: XOR<SampleCreateWithoutExamInput, SampleUncheckedCreateWithoutExamInput> | SampleCreateWithoutExamInput[] | SampleUncheckedCreateWithoutExamInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutExamInput | SampleCreateOrConnectWithoutExamInput[]
    upsert?: SampleUpsertWithWhereUniqueWithoutExamInput | SampleUpsertWithWhereUniqueWithoutExamInput[]
    createMany?: SampleCreateManyExamInputEnvelope
    set?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    disconnect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    delete?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    update?: SampleUpdateWithWhereUniqueWithoutExamInput | SampleUpdateWithWhereUniqueWithoutExamInput[]
    updateMany?: SampleUpdateManyWithWhereWithoutExamInput | SampleUpdateManyWithWhereWithoutExamInput[]
    deleteMany?: SampleScalarWhereInput | SampleScalarWhereInput[]
  }

  export type DoctorUpdateOneRequiredWithoutExamsNestedInput = {
    create?: XOR<DoctorCreateWithoutExamsInput, DoctorUncheckedCreateWithoutExamsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutExamsInput
    upsert?: DoctorUpsertWithoutExamsInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutExamsInput, DoctorUpdateWithoutExamsInput>, DoctorUncheckedUpdateWithoutExamsInput>
  }

  export type PatientUpdateOneRequiredWithoutExamsNestedInput = {
    create?: XOR<PatientCreateWithoutExamsInput, PatientUncheckedCreateWithoutExamsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutExamsInput
    upsert?: PatientUpsertWithoutExamsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutExamsInput, PatientUpdateWithoutExamsInput>, PatientUncheckedUpdateWithoutExamsInput>
  }

  export type ExamDetailUpdateManyWithoutExamNestedInput = {
    create?: XOR<ExamDetailCreateWithoutExamInput, ExamDetailUncheckedCreateWithoutExamInput> | ExamDetailCreateWithoutExamInput[] | ExamDetailUncheckedCreateWithoutExamInput[]
    connectOrCreate?: ExamDetailCreateOrConnectWithoutExamInput | ExamDetailCreateOrConnectWithoutExamInput[]
    upsert?: ExamDetailUpsertWithWhereUniqueWithoutExamInput | ExamDetailUpsertWithWhereUniqueWithoutExamInput[]
    createMany?: ExamDetailCreateManyExamInputEnvelope
    set?: ExamDetailWhereUniqueInput | ExamDetailWhereUniqueInput[]
    disconnect?: ExamDetailWhereUniqueInput | ExamDetailWhereUniqueInput[]
    delete?: ExamDetailWhereUniqueInput | ExamDetailWhereUniqueInput[]
    connect?: ExamDetailWhereUniqueInput | ExamDetailWhereUniqueInput[]
    update?: ExamDetailUpdateWithWhereUniqueWithoutExamInput | ExamDetailUpdateWithWhereUniqueWithoutExamInput[]
    updateMany?: ExamDetailUpdateManyWithWhereWithoutExamInput | ExamDetailUpdateManyWithWhereWithoutExamInput[]
    deleteMany?: ExamDetailScalarWhereInput | ExamDetailScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SampleUncheckedUpdateManyWithoutExamNestedInput = {
    create?: XOR<SampleCreateWithoutExamInput, SampleUncheckedCreateWithoutExamInput> | SampleCreateWithoutExamInput[] | SampleUncheckedCreateWithoutExamInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutExamInput | SampleCreateOrConnectWithoutExamInput[]
    upsert?: SampleUpsertWithWhereUniqueWithoutExamInput | SampleUpsertWithWhereUniqueWithoutExamInput[]
    createMany?: SampleCreateManyExamInputEnvelope
    set?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    disconnect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    delete?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    update?: SampleUpdateWithWhereUniqueWithoutExamInput | SampleUpdateWithWhereUniqueWithoutExamInput[]
    updateMany?: SampleUpdateManyWithWhereWithoutExamInput | SampleUpdateManyWithWhereWithoutExamInput[]
    deleteMany?: SampleScalarWhereInput | SampleScalarWhereInput[]
  }

  export type ExamDetailUncheckedUpdateManyWithoutExamNestedInput = {
    create?: XOR<ExamDetailCreateWithoutExamInput, ExamDetailUncheckedCreateWithoutExamInput> | ExamDetailCreateWithoutExamInput[] | ExamDetailUncheckedCreateWithoutExamInput[]
    connectOrCreate?: ExamDetailCreateOrConnectWithoutExamInput | ExamDetailCreateOrConnectWithoutExamInput[]
    upsert?: ExamDetailUpsertWithWhereUniqueWithoutExamInput | ExamDetailUpsertWithWhereUniqueWithoutExamInput[]
    createMany?: ExamDetailCreateManyExamInputEnvelope
    set?: ExamDetailWhereUniqueInput | ExamDetailWhereUniqueInput[]
    disconnect?: ExamDetailWhereUniqueInput | ExamDetailWhereUniqueInput[]
    delete?: ExamDetailWhereUniqueInput | ExamDetailWhereUniqueInput[]
    connect?: ExamDetailWhereUniqueInput | ExamDetailWhereUniqueInput[]
    update?: ExamDetailUpdateWithWhereUniqueWithoutExamInput | ExamDetailUpdateWithWhereUniqueWithoutExamInput[]
    updateMany?: ExamDetailUpdateManyWithWhereWithoutExamInput | ExamDetailUpdateManyWithWhereWithoutExamInput[]
    deleteMany?: ExamDetailScalarWhereInput | ExamDetailScalarWhereInput[]
  }

  export type ExamDetailCreateNestedManyWithoutExamTypeInput = {
    create?: XOR<ExamDetailCreateWithoutExamTypeInput, ExamDetailUncheckedCreateWithoutExamTypeInput> | ExamDetailCreateWithoutExamTypeInput[] | ExamDetailUncheckedCreateWithoutExamTypeInput[]
    connectOrCreate?: ExamDetailCreateOrConnectWithoutExamTypeInput | ExamDetailCreateOrConnectWithoutExamTypeInput[]
    createMany?: ExamDetailCreateManyExamTypeInputEnvelope
    connect?: ExamDetailWhereUniqueInput | ExamDetailWhereUniqueInput[]
  }

  export type ExamDetailUncheckedCreateNestedManyWithoutExamTypeInput = {
    create?: XOR<ExamDetailCreateWithoutExamTypeInput, ExamDetailUncheckedCreateWithoutExamTypeInput> | ExamDetailCreateWithoutExamTypeInput[] | ExamDetailUncheckedCreateWithoutExamTypeInput[]
    connectOrCreate?: ExamDetailCreateOrConnectWithoutExamTypeInput | ExamDetailCreateOrConnectWithoutExamTypeInput[]
    createMany?: ExamDetailCreateManyExamTypeInputEnvelope
    connect?: ExamDetailWhereUniqueInput | ExamDetailWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ExamDetailUpdateManyWithoutExamTypeNestedInput = {
    create?: XOR<ExamDetailCreateWithoutExamTypeInput, ExamDetailUncheckedCreateWithoutExamTypeInput> | ExamDetailCreateWithoutExamTypeInput[] | ExamDetailUncheckedCreateWithoutExamTypeInput[]
    connectOrCreate?: ExamDetailCreateOrConnectWithoutExamTypeInput | ExamDetailCreateOrConnectWithoutExamTypeInput[]
    upsert?: ExamDetailUpsertWithWhereUniqueWithoutExamTypeInput | ExamDetailUpsertWithWhereUniqueWithoutExamTypeInput[]
    createMany?: ExamDetailCreateManyExamTypeInputEnvelope
    set?: ExamDetailWhereUniqueInput | ExamDetailWhereUniqueInput[]
    disconnect?: ExamDetailWhereUniqueInput | ExamDetailWhereUniqueInput[]
    delete?: ExamDetailWhereUniqueInput | ExamDetailWhereUniqueInput[]
    connect?: ExamDetailWhereUniqueInput | ExamDetailWhereUniqueInput[]
    update?: ExamDetailUpdateWithWhereUniqueWithoutExamTypeInput | ExamDetailUpdateWithWhereUniqueWithoutExamTypeInput[]
    updateMany?: ExamDetailUpdateManyWithWhereWithoutExamTypeInput | ExamDetailUpdateManyWithWhereWithoutExamTypeInput[]
    deleteMany?: ExamDetailScalarWhereInput | ExamDetailScalarWhereInput[]
  }

  export type ExamDetailUncheckedUpdateManyWithoutExamTypeNestedInput = {
    create?: XOR<ExamDetailCreateWithoutExamTypeInput, ExamDetailUncheckedCreateWithoutExamTypeInput> | ExamDetailCreateWithoutExamTypeInput[] | ExamDetailUncheckedCreateWithoutExamTypeInput[]
    connectOrCreate?: ExamDetailCreateOrConnectWithoutExamTypeInput | ExamDetailCreateOrConnectWithoutExamTypeInput[]
    upsert?: ExamDetailUpsertWithWhereUniqueWithoutExamTypeInput | ExamDetailUpsertWithWhereUniqueWithoutExamTypeInput[]
    createMany?: ExamDetailCreateManyExamTypeInputEnvelope
    set?: ExamDetailWhereUniqueInput | ExamDetailWhereUniqueInput[]
    disconnect?: ExamDetailWhereUniqueInput | ExamDetailWhereUniqueInput[]
    delete?: ExamDetailWhereUniqueInput | ExamDetailWhereUniqueInput[]
    connect?: ExamDetailWhereUniqueInput | ExamDetailWhereUniqueInput[]
    update?: ExamDetailUpdateWithWhereUniqueWithoutExamTypeInput | ExamDetailUpdateWithWhereUniqueWithoutExamTypeInput[]
    updateMany?: ExamDetailUpdateManyWithWhereWithoutExamTypeInput | ExamDetailUpdateManyWithWhereWithoutExamTypeInput[]
    deleteMany?: ExamDetailScalarWhereInput | ExamDetailScalarWhereInput[]
  }

  export type ExamCreateNestedOneWithoutDetailsInput = {
    create?: XOR<ExamCreateWithoutDetailsInput, ExamUncheckedCreateWithoutDetailsInput>
    connectOrCreate?: ExamCreateOrConnectWithoutDetailsInput
    connect?: ExamWhereUniqueInput
  }

  export type ExamTypeCreateNestedOneWithoutDetailsInput = {
    create?: XOR<ExamTypeCreateWithoutDetailsInput, ExamTypeUncheckedCreateWithoutDetailsInput>
    connectOrCreate?: ExamTypeCreateOrConnectWithoutDetailsInput
    connect?: ExamTypeWhereUniqueInput
  }

  export type ExamUpdateOneRequiredWithoutDetailsNestedInput = {
    create?: XOR<ExamCreateWithoutDetailsInput, ExamUncheckedCreateWithoutDetailsInput>
    connectOrCreate?: ExamCreateOrConnectWithoutDetailsInput
    upsert?: ExamUpsertWithoutDetailsInput
    connect?: ExamWhereUniqueInput
    update?: XOR<XOR<ExamUpdateToOneWithWhereWithoutDetailsInput, ExamUpdateWithoutDetailsInput>, ExamUncheckedUpdateWithoutDetailsInput>
  }

  export type ExamTypeUpdateOneRequiredWithoutDetailsNestedInput = {
    create?: XOR<ExamTypeCreateWithoutDetailsInput, ExamTypeUncheckedCreateWithoutDetailsInput>
    connectOrCreate?: ExamTypeCreateOrConnectWithoutDetailsInput
    upsert?: ExamTypeUpsertWithoutDetailsInput
    connect?: ExamTypeWhereUniqueInput
    update?: XOR<XOR<ExamTypeUpdateToOneWithWhereWithoutDetailsInput, ExamTypeUpdateWithoutDetailsInput>, ExamTypeUncheckedUpdateWithoutDetailsInput>
  }

  export type ResultCreateNestedOneWithoutSampleInput = {
    create?: XOR<ResultCreateWithoutSampleInput, ResultUncheckedCreateWithoutSampleInput>
    connectOrCreate?: ResultCreateOrConnectWithoutSampleInput
    connect?: ResultWhereUniqueInput
  }

  export type ExamCreateNestedOneWithoutSamplesInput = {
    create?: XOR<ExamCreateWithoutSamplesInput, ExamUncheckedCreateWithoutSamplesInput>
    connectOrCreate?: ExamCreateOrConnectWithoutSamplesInput
    connect?: ExamWhereUniqueInput
  }

  export type SampleTypeCreateNestedOneWithoutSamplesInput = {
    create?: XOR<SampleTypeCreateWithoutSamplesInput, SampleTypeUncheckedCreateWithoutSamplesInput>
    connectOrCreate?: SampleTypeCreateOrConnectWithoutSamplesInput
    connect?: SampleTypeWhereUniqueInput
  }

  export type ResultUncheckedCreateNestedOneWithoutSampleInput = {
    create?: XOR<ResultCreateWithoutSampleInput, ResultUncheckedCreateWithoutSampleInput>
    connectOrCreate?: ResultCreateOrConnectWithoutSampleInput
    connect?: ResultWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ResultUpdateOneWithoutSampleNestedInput = {
    create?: XOR<ResultCreateWithoutSampleInput, ResultUncheckedCreateWithoutSampleInput>
    connectOrCreate?: ResultCreateOrConnectWithoutSampleInput
    upsert?: ResultUpsertWithoutSampleInput
    disconnect?: ResultWhereInput | boolean
    delete?: ResultWhereInput | boolean
    connect?: ResultWhereUniqueInput
    update?: XOR<XOR<ResultUpdateToOneWithWhereWithoutSampleInput, ResultUpdateWithoutSampleInput>, ResultUncheckedUpdateWithoutSampleInput>
  }

  export type ExamUpdateOneRequiredWithoutSamplesNestedInput = {
    create?: XOR<ExamCreateWithoutSamplesInput, ExamUncheckedCreateWithoutSamplesInput>
    connectOrCreate?: ExamCreateOrConnectWithoutSamplesInput
    upsert?: ExamUpsertWithoutSamplesInput
    connect?: ExamWhereUniqueInput
    update?: XOR<XOR<ExamUpdateToOneWithWhereWithoutSamplesInput, ExamUpdateWithoutSamplesInput>, ExamUncheckedUpdateWithoutSamplesInput>
  }

  export type SampleTypeUpdateOneRequiredWithoutSamplesNestedInput = {
    create?: XOR<SampleTypeCreateWithoutSamplesInput, SampleTypeUncheckedCreateWithoutSamplesInput>
    connectOrCreate?: SampleTypeCreateOrConnectWithoutSamplesInput
    upsert?: SampleTypeUpsertWithoutSamplesInput
    connect?: SampleTypeWhereUniqueInput
    update?: XOR<XOR<SampleTypeUpdateToOneWithWhereWithoutSamplesInput, SampleTypeUpdateWithoutSamplesInput>, SampleTypeUncheckedUpdateWithoutSamplesInput>
  }

  export type ResultUncheckedUpdateOneWithoutSampleNestedInput = {
    create?: XOR<ResultCreateWithoutSampleInput, ResultUncheckedCreateWithoutSampleInput>
    connectOrCreate?: ResultCreateOrConnectWithoutSampleInput
    upsert?: ResultUpsertWithoutSampleInput
    disconnect?: ResultWhereInput | boolean
    delete?: ResultWhereInput | boolean
    connect?: ResultWhereUniqueInput
    update?: XOR<XOR<ResultUpdateToOneWithWhereWithoutSampleInput, ResultUpdateWithoutSampleInput>, ResultUncheckedUpdateWithoutSampleInput>
  }

  export type SampleCreateNestedManyWithoutSampleTypeInput = {
    create?: XOR<SampleCreateWithoutSampleTypeInput, SampleUncheckedCreateWithoutSampleTypeInput> | SampleCreateWithoutSampleTypeInput[] | SampleUncheckedCreateWithoutSampleTypeInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutSampleTypeInput | SampleCreateOrConnectWithoutSampleTypeInput[]
    createMany?: SampleCreateManySampleTypeInputEnvelope
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
  }

  export type SampleUncheckedCreateNestedManyWithoutSampleTypeInput = {
    create?: XOR<SampleCreateWithoutSampleTypeInput, SampleUncheckedCreateWithoutSampleTypeInput> | SampleCreateWithoutSampleTypeInput[] | SampleUncheckedCreateWithoutSampleTypeInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutSampleTypeInput | SampleCreateOrConnectWithoutSampleTypeInput[]
    createMany?: SampleCreateManySampleTypeInputEnvelope
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
  }

  export type SampleUpdateManyWithoutSampleTypeNestedInput = {
    create?: XOR<SampleCreateWithoutSampleTypeInput, SampleUncheckedCreateWithoutSampleTypeInput> | SampleCreateWithoutSampleTypeInput[] | SampleUncheckedCreateWithoutSampleTypeInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutSampleTypeInput | SampleCreateOrConnectWithoutSampleTypeInput[]
    upsert?: SampleUpsertWithWhereUniqueWithoutSampleTypeInput | SampleUpsertWithWhereUniqueWithoutSampleTypeInput[]
    createMany?: SampleCreateManySampleTypeInputEnvelope
    set?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    disconnect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    delete?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    update?: SampleUpdateWithWhereUniqueWithoutSampleTypeInput | SampleUpdateWithWhereUniqueWithoutSampleTypeInput[]
    updateMany?: SampleUpdateManyWithWhereWithoutSampleTypeInput | SampleUpdateManyWithWhereWithoutSampleTypeInput[]
    deleteMany?: SampleScalarWhereInput | SampleScalarWhereInput[]
  }

  export type SampleUncheckedUpdateManyWithoutSampleTypeNestedInput = {
    create?: XOR<SampleCreateWithoutSampleTypeInput, SampleUncheckedCreateWithoutSampleTypeInput> | SampleCreateWithoutSampleTypeInput[] | SampleUncheckedCreateWithoutSampleTypeInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutSampleTypeInput | SampleCreateOrConnectWithoutSampleTypeInput[]
    upsert?: SampleUpsertWithWhereUniqueWithoutSampleTypeInput | SampleUpsertWithWhereUniqueWithoutSampleTypeInput[]
    createMany?: SampleCreateManySampleTypeInputEnvelope
    set?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    disconnect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    delete?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    update?: SampleUpdateWithWhereUniqueWithoutSampleTypeInput | SampleUpdateWithWhereUniqueWithoutSampleTypeInput[]
    updateMany?: SampleUpdateManyWithWhereWithoutSampleTypeInput | SampleUpdateManyWithWhereWithoutSampleTypeInput[]
    deleteMany?: SampleScalarWhereInput | SampleScalarWhereInput[]
  }

  export type DetailResultCreateNestedManyWithoutMagnitudeInput = {
    create?: XOR<DetailResultCreateWithoutMagnitudeInput, DetailResultUncheckedCreateWithoutMagnitudeInput> | DetailResultCreateWithoutMagnitudeInput[] | DetailResultUncheckedCreateWithoutMagnitudeInput[]
    connectOrCreate?: DetailResultCreateOrConnectWithoutMagnitudeInput | DetailResultCreateOrConnectWithoutMagnitudeInput[]
    createMany?: DetailResultCreateManyMagnitudeInputEnvelope
    connect?: DetailResultWhereUniqueInput | DetailResultWhereUniqueInput[]
  }

  export type DetailResultUncheckedCreateNestedManyWithoutMagnitudeInput = {
    create?: XOR<DetailResultCreateWithoutMagnitudeInput, DetailResultUncheckedCreateWithoutMagnitudeInput> | DetailResultCreateWithoutMagnitudeInput[] | DetailResultUncheckedCreateWithoutMagnitudeInput[]
    connectOrCreate?: DetailResultCreateOrConnectWithoutMagnitudeInput | DetailResultCreateOrConnectWithoutMagnitudeInput[]
    createMany?: DetailResultCreateManyMagnitudeInputEnvelope
    connect?: DetailResultWhereUniqueInput | DetailResultWhereUniqueInput[]
  }

  export type DetailResultUpdateManyWithoutMagnitudeNestedInput = {
    create?: XOR<DetailResultCreateWithoutMagnitudeInput, DetailResultUncheckedCreateWithoutMagnitudeInput> | DetailResultCreateWithoutMagnitudeInput[] | DetailResultUncheckedCreateWithoutMagnitudeInput[]
    connectOrCreate?: DetailResultCreateOrConnectWithoutMagnitudeInput | DetailResultCreateOrConnectWithoutMagnitudeInput[]
    upsert?: DetailResultUpsertWithWhereUniqueWithoutMagnitudeInput | DetailResultUpsertWithWhereUniqueWithoutMagnitudeInput[]
    createMany?: DetailResultCreateManyMagnitudeInputEnvelope
    set?: DetailResultWhereUniqueInput | DetailResultWhereUniqueInput[]
    disconnect?: DetailResultWhereUniqueInput | DetailResultWhereUniqueInput[]
    delete?: DetailResultWhereUniqueInput | DetailResultWhereUniqueInput[]
    connect?: DetailResultWhereUniqueInput | DetailResultWhereUniqueInput[]
    update?: DetailResultUpdateWithWhereUniqueWithoutMagnitudeInput | DetailResultUpdateWithWhereUniqueWithoutMagnitudeInput[]
    updateMany?: DetailResultUpdateManyWithWhereWithoutMagnitudeInput | DetailResultUpdateManyWithWhereWithoutMagnitudeInput[]
    deleteMany?: DetailResultScalarWhereInput | DetailResultScalarWhereInput[]
  }

  export type DetailResultUncheckedUpdateManyWithoutMagnitudeNestedInput = {
    create?: XOR<DetailResultCreateWithoutMagnitudeInput, DetailResultUncheckedCreateWithoutMagnitudeInput> | DetailResultCreateWithoutMagnitudeInput[] | DetailResultUncheckedCreateWithoutMagnitudeInput[]
    connectOrCreate?: DetailResultCreateOrConnectWithoutMagnitudeInput | DetailResultCreateOrConnectWithoutMagnitudeInput[]
    upsert?: DetailResultUpsertWithWhereUniqueWithoutMagnitudeInput | DetailResultUpsertWithWhereUniqueWithoutMagnitudeInput[]
    createMany?: DetailResultCreateManyMagnitudeInputEnvelope
    set?: DetailResultWhereUniqueInput | DetailResultWhereUniqueInput[]
    disconnect?: DetailResultWhereUniqueInput | DetailResultWhereUniqueInput[]
    delete?: DetailResultWhereUniqueInput | DetailResultWhereUniqueInput[]
    connect?: DetailResultWhereUniqueInput | DetailResultWhereUniqueInput[]
    update?: DetailResultUpdateWithWhereUniqueWithoutMagnitudeInput | DetailResultUpdateWithWhereUniqueWithoutMagnitudeInput[]
    updateMany?: DetailResultUpdateManyWithWhereWithoutMagnitudeInput | DetailResultUpdateManyWithWhereWithoutMagnitudeInput[]
    deleteMany?: DetailResultScalarWhereInput | DetailResultScalarWhereInput[]
  }

  export type DetailResultCreateNestedManyWithoutResultInput = {
    create?: XOR<DetailResultCreateWithoutResultInput, DetailResultUncheckedCreateWithoutResultInput> | DetailResultCreateWithoutResultInput[] | DetailResultUncheckedCreateWithoutResultInput[]
    connectOrCreate?: DetailResultCreateOrConnectWithoutResultInput | DetailResultCreateOrConnectWithoutResultInput[]
    createMany?: DetailResultCreateManyResultInputEnvelope
    connect?: DetailResultWhereUniqueInput | DetailResultWhereUniqueInput[]
  }

  export type SampleCreateNestedOneWithoutResultInput = {
    create?: XOR<SampleCreateWithoutResultInput, SampleUncheckedCreateWithoutResultInput>
    connectOrCreate?: SampleCreateOrConnectWithoutResultInput
    connect?: SampleWhereUniqueInput
  }

  export type DetailResultUncheckedCreateNestedManyWithoutResultInput = {
    create?: XOR<DetailResultCreateWithoutResultInput, DetailResultUncheckedCreateWithoutResultInput> | DetailResultCreateWithoutResultInput[] | DetailResultUncheckedCreateWithoutResultInput[]
    connectOrCreate?: DetailResultCreateOrConnectWithoutResultInput | DetailResultCreateOrConnectWithoutResultInput[]
    createMany?: DetailResultCreateManyResultInputEnvelope
    connect?: DetailResultWhereUniqueInput | DetailResultWhereUniqueInput[]
  }

  export type DetailResultUpdateManyWithoutResultNestedInput = {
    create?: XOR<DetailResultCreateWithoutResultInput, DetailResultUncheckedCreateWithoutResultInput> | DetailResultCreateWithoutResultInput[] | DetailResultUncheckedCreateWithoutResultInput[]
    connectOrCreate?: DetailResultCreateOrConnectWithoutResultInput | DetailResultCreateOrConnectWithoutResultInput[]
    upsert?: DetailResultUpsertWithWhereUniqueWithoutResultInput | DetailResultUpsertWithWhereUniqueWithoutResultInput[]
    createMany?: DetailResultCreateManyResultInputEnvelope
    set?: DetailResultWhereUniqueInput | DetailResultWhereUniqueInput[]
    disconnect?: DetailResultWhereUniqueInput | DetailResultWhereUniqueInput[]
    delete?: DetailResultWhereUniqueInput | DetailResultWhereUniqueInput[]
    connect?: DetailResultWhereUniqueInput | DetailResultWhereUniqueInput[]
    update?: DetailResultUpdateWithWhereUniqueWithoutResultInput | DetailResultUpdateWithWhereUniqueWithoutResultInput[]
    updateMany?: DetailResultUpdateManyWithWhereWithoutResultInput | DetailResultUpdateManyWithWhereWithoutResultInput[]
    deleteMany?: DetailResultScalarWhereInput | DetailResultScalarWhereInput[]
  }

  export type SampleUpdateOneRequiredWithoutResultNestedInput = {
    create?: XOR<SampleCreateWithoutResultInput, SampleUncheckedCreateWithoutResultInput>
    connectOrCreate?: SampleCreateOrConnectWithoutResultInput
    upsert?: SampleUpsertWithoutResultInput
    connect?: SampleWhereUniqueInput
    update?: XOR<XOR<SampleUpdateToOneWithWhereWithoutResultInput, SampleUpdateWithoutResultInput>, SampleUncheckedUpdateWithoutResultInput>
  }

  export type DetailResultUncheckedUpdateManyWithoutResultNestedInput = {
    create?: XOR<DetailResultCreateWithoutResultInput, DetailResultUncheckedCreateWithoutResultInput> | DetailResultCreateWithoutResultInput[] | DetailResultUncheckedCreateWithoutResultInput[]
    connectOrCreate?: DetailResultCreateOrConnectWithoutResultInput | DetailResultCreateOrConnectWithoutResultInput[]
    upsert?: DetailResultUpsertWithWhereUniqueWithoutResultInput | DetailResultUpsertWithWhereUniqueWithoutResultInput[]
    createMany?: DetailResultCreateManyResultInputEnvelope
    set?: DetailResultWhereUniqueInput | DetailResultWhereUniqueInput[]
    disconnect?: DetailResultWhereUniqueInput | DetailResultWhereUniqueInput[]
    delete?: DetailResultWhereUniqueInput | DetailResultWhereUniqueInput[]
    connect?: DetailResultWhereUniqueInput | DetailResultWhereUniqueInput[]
    update?: DetailResultUpdateWithWhereUniqueWithoutResultInput | DetailResultUpdateWithWhereUniqueWithoutResultInput[]
    updateMany?: DetailResultUpdateManyWithWhereWithoutResultInput | DetailResultUpdateManyWithWhereWithoutResultInput[]
    deleteMany?: DetailResultScalarWhereInput | DetailResultScalarWhereInput[]
  }

  export type ResultCreateNestedOneWithoutDetailsInput = {
    create?: XOR<ResultCreateWithoutDetailsInput, ResultUncheckedCreateWithoutDetailsInput>
    connectOrCreate?: ResultCreateOrConnectWithoutDetailsInput
    connect?: ResultWhereUniqueInput
  }

  export type MagnitudeCreateNestedOneWithoutDetailsInput = {
    create?: XOR<MagnitudeCreateWithoutDetailsInput, MagnitudeUncheckedCreateWithoutDetailsInput>
    connectOrCreate?: MagnitudeCreateOrConnectWithoutDetailsInput
    connect?: MagnitudeWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ResultUpdateOneRequiredWithoutDetailsNestedInput = {
    create?: XOR<ResultCreateWithoutDetailsInput, ResultUncheckedCreateWithoutDetailsInput>
    connectOrCreate?: ResultCreateOrConnectWithoutDetailsInput
    upsert?: ResultUpsertWithoutDetailsInput
    connect?: ResultWhereUniqueInput
    update?: XOR<XOR<ResultUpdateToOneWithWhereWithoutDetailsInput, ResultUpdateWithoutDetailsInput>, ResultUncheckedUpdateWithoutDetailsInput>
  }

  export type MagnitudeUpdateOneRequiredWithoutDetailsNestedInput = {
    create?: XOR<MagnitudeCreateWithoutDetailsInput, MagnitudeUncheckedCreateWithoutDetailsInput>
    connectOrCreate?: MagnitudeCreateOrConnectWithoutDetailsInput
    upsert?: MagnitudeUpsertWithoutDetailsInput
    connect?: MagnitudeWhereUniqueInput
    update?: XOR<XOR<MagnitudeUpdateToOneWithWhereWithoutDetailsInput, MagnitudeUpdateWithoutDetailsInput>, MagnitudeUncheckedUpdateWithoutDetailsInput>
  }

  export type ExamCreateNestedManyWithoutPatientInput = {
    create?: XOR<ExamCreateWithoutPatientInput, ExamUncheckedCreateWithoutPatientInput> | ExamCreateWithoutPatientInput[] | ExamUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ExamCreateOrConnectWithoutPatientInput | ExamCreateOrConnectWithoutPatientInput[]
    createMany?: ExamCreateManyPatientInputEnvelope
    connect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
  }

  export type ExamUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<ExamCreateWithoutPatientInput, ExamUncheckedCreateWithoutPatientInput> | ExamCreateWithoutPatientInput[] | ExamUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ExamCreateOrConnectWithoutPatientInput | ExamCreateOrConnectWithoutPatientInput[]
    createMany?: ExamCreateManyPatientInputEnvelope
    connect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
  }

  export type ExamUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ExamCreateWithoutPatientInput, ExamUncheckedCreateWithoutPatientInput> | ExamCreateWithoutPatientInput[] | ExamUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ExamCreateOrConnectWithoutPatientInput | ExamCreateOrConnectWithoutPatientInput[]
    upsert?: ExamUpsertWithWhereUniqueWithoutPatientInput | ExamUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ExamCreateManyPatientInputEnvelope
    set?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    disconnect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    delete?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    connect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    update?: ExamUpdateWithWhereUniqueWithoutPatientInput | ExamUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ExamUpdateManyWithWhereWithoutPatientInput | ExamUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ExamScalarWhereInput | ExamScalarWhereInput[]
  }

  export type ExamUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ExamCreateWithoutPatientInput, ExamUncheckedCreateWithoutPatientInput> | ExamCreateWithoutPatientInput[] | ExamUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ExamCreateOrConnectWithoutPatientInput | ExamCreateOrConnectWithoutPatientInput[]
    upsert?: ExamUpsertWithWhereUniqueWithoutPatientInput | ExamUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ExamCreateManyPatientInputEnvelope
    set?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    disconnect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    delete?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    connect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    update?: ExamUpdateWithWhereUniqueWithoutPatientInput | ExamUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ExamUpdateManyWithWhereWithoutPatientInput | ExamUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ExamScalarWhereInput | ExamScalarWhereInput[]
  }

  export type ExamCreateNestedManyWithoutDoctorInput = {
    create?: XOR<ExamCreateWithoutDoctorInput, ExamUncheckedCreateWithoutDoctorInput> | ExamCreateWithoutDoctorInput[] | ExamUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ExamCreateOrConnectWithoutDoctorInput | ExamCreateOrConnectWithoutDoctorInput[]
    createMany?: ExamCreateManyDoctorInputEnvelope
    connect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
  }

  export type ExamUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<ExamCreateWithoutDoctorInput, ExamUncheckedCreateWithoutDoctorInput> | ExamCreateWithoutDoctorInput[] | ExamUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ExamCreateOrConnectWithoutDoctorInput | ExamCreateOrConnectWithoutDoctorInput[]
    createMany?: ExamCreateManyDoctorInputEnvelope
    connect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
  }

  export type ExamUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<ExamCreateWithoutDoctorInput, ExamUncheckedCreateWithoutDoctorInput> | ExamCreateWithoutDoctorInput[] | ExamUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ExamCreateOrConnectWithoutDoctorInput | ExamCreateOrConnectWithoutDoctorInput[]
    upsert?: ExamUpsertWithWhereUniqueWithoutDoctorInput | ExamUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: ExamCreateManyDoctorInputEnvelope
    set?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    disconnect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    delete?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    connect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    update?: ExamUpdateWithWhereUniqueWithoutDoctorInput | ExamUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: ExamUpdateManyWithWhereWithoutDoctorInput | ExamUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: ExamScalarWhereInput | ExamScalarWhereInput[]
  }

  export type ExamUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<ExamCreateWithoutDoctorInput, ExamUncheckedCreateWithoutDoctorInput> | ExamCreateWithoutDoctorInput[] | ExamUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ExamCreateOrConnectWithoutDoctorInput | ExamCreateOrConnectWithoutDoctorInput[]
    upsert?: ExamUpsertWithWhereUniqueWithoutDoctorInput | ExamUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: ExamCreateManyDoctorInputEnvelope
    set?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    disconnect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    delete?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    connect?: ExamWhereUniqueInput | ExamWhereUniqueInput[]
    update?: ExamUpdateWithWhereUniqueWithoutDoctorInput | ExamUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: ExamUpdateManyWithWhereWithoutDoctorInput | ExamUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: ExamScalarWhereInput | ExamScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type SampleCreateWithoutExamInput = {
    sampleDate: Date | string
    observations?: string | null
    result?: ResultCreateNestedOneWithoutSampleInput
    sampleType: SampleTypeCreateNestedOneWithoutSamplesInput
  }

  export type SampleUncheckedCreateWithoutExamInput = {
    id?: number
    sampleDate: Date | string
    sampleTypeId: number
    observations?: string | null
    result?: ResultUncheckedCreateNestedOneWithoutSampleInput
  }

  export type SampleCreateOrConnectWithoutExamInput = {
    where: SampleWhereUniqueInput
    create: XOR<SampleCreateWithoutExamInput, SampleUncheckedCreateWithoutExamInput>
  }

  export type SampleCreateManyExamInputEnvelope = {
    data: SampleCreateManyExamInput | SampleCreateManyExamInput[]
    skipDuplicates?: boolean
  }

  export type DoctorCreateWithoutExamsInput = {
    name: string
    specialty: string
    consultationAddress: string
    phoneNumber: string
    emailAddress: string
  }

  export type DoctorUncheckedCreateWithoutExamsInput = {
    id?: number
    name: string
    specialty: string
    consultationAddress: string
    phoneNumber: string
    emailAddress: string
  }

  export type DoctorCreateOrConnectWithoutExamsInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutExamsInput, DoctorUncheckedCreateWithoutExamsInput>
  }

  export type PatientCreateWithoutExamsInput = {
    name: string
    birthDate: Date | string
    gender: string
    address: string
    phoneNumber: string
    medicalHistory: string
  }

  export type PatientUncheckedCreateWithoutExamsInput = {
    id?: number
    name: string
    birthDate: Date | string
    gender: string
    address: string
    phoneNumber: string
    medicalHistory: string
  }

  export type PatientCreateOrConnectWithoutExamsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutExamsInput, PatientUncheckedCreateWithoutExamsInput>
  }

  export type ExamDetailCreateWithoutExamInput = {
    examType: ExamTypeCreateNestedOneWithoutDetailsInput
  }

  export type ExamDetailUncheckedCreateWithoutExamInput = {
    id?: number
    examTypeId: number
  }

  export type ExamDetailCreateOrConnectWithoutExamInput = {
    where: ExamDetailWhereUniqueInput
    create: XOR<ExamDetailCreateWithoutExamInput, ExamDetailUncheckedCreateWithoutExamInput>
  }

  export type ExamDetailCreateManyExamInputEnvelope = {
    data: ExamDetailCreateManyExamInput | ExamDetailCreateManyExamInput[]
    skipDuplicates?: boolean
  }

  export type SampleUpsertWithWhereUniqueWithoutExamInput = {
    where: SampleWhereUniqueInput
    update: XOR<SampleUpdateWithoutExamInput, SampleUncheckedUpdateWithoutExamInput>
    create: XOR<SampleCreateWithoutExamInput, SampleUncheckedCreateWithoutExamInput>
  }

  export type SampleUpdateWithWhereUniqueWithoutExamInput = {
    where: SampleWhereUniqueInput
    data: XOR<SampleUpdateWithoutExamInput, SampleUncheckedUpdateWithoutExamInput>
  }

  export type SampleUpdateManyWithWhereWithoutExamInput = {
    where: SampleScalarWhereInput
    data: XOR<SampleUpdateManyMutationInput, SampleUncheckedUpdateManyWithoutExamInput>
  }

  export type SampleScalarWhereInput = {
    AND?: SampleScalarWhereInput | SampleScalarWhereInput[]
    OR?: SampleScalarWhereInput[]
    NOT?: SampleScalarWhereInput | SampleScalarWhereInput[]
    id?: IntFilter<"Sample"> | number
    examId?: IntFilter<"Sample"> | number
    sampleDate?: DateTimeFilter<"Sample"> | Date | string
    sampleTypeId?: IntFilter<"Sample"> | number
    observations?: StringNullableFilter<"Sample"> | string | null
  }

  export type DoctorUpsertWithoutExamsInput = {
    update: XOR<DoctorUpdateWithoutExamsInput, DoctorUncheckedUpdateWithoutExamsInput>
    create: XOR<DoctorCreateWithoutExamsInput, DoctorUncheckedCreateWithoutExamsInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutExamsInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutExamsInput, DoctorUncheckedUpdateWithoutExamsInput>
  }

  export type DoctorUpdateWithoutExamsInput = {
    name?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    consultationAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    emailAddress?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorUncheckedUpdateWithoutExamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    consultationAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    emailAddress?: StringFieldUpdateOperationsInput | string
  }

  export type PatientUpsertWithoutExamsInput = {
    update: XOR<PatientUpdateWithoutExamsInput, PatientUncheckedUpdateWithoutExamsInput>
    create: XOR<PatientCreateWithoutExamsInput, PatientUncheckedCreateWithoutExamsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutExamsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutExamsInput, PatientUncheckedUpdateWithoutExamsInput>
  }

  export type PatientUpdateWithoutExamsInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    medicalHistory?: StringFieldUpdateOperationsInput | string
  }

  export type PatientUncheckedUpdateWithoutExamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    medicalHistory?: StringFieldUpdateOperationsInput | string
  }

  export type ExamDetailUpsertWithWhereUniqueWithoutExamInput = {
    where: ExamDetailWhereUniqueInput
    update: XOR<ExamDetailUpdateWithoutExamInput, ExamDetailUncheckedUpdateWithoutExamInput>
    create: XOR<ExamDetailCreateWithoutExamInput, ExamDetailUncheckedCreateWithoutExamInput>
  }

  export type ExamDetailUpdateWithWhereUniqueWithoutExamInput = {
    where: ExamDetailWhereUniqueInput
    data: XOR<ExamDetailUpdateWithoutExamInput, ExamDetailUncheckedUpdateWithoutExamInput>
  }

  export type ExamDetailUpdateManyWithWhereWithoutExamInput = {
    where: ExamDetailScalarWhereInput
    data: XOR<ExamDetailUpdateManyMutationInput, ExamDetailUncheckedUpdateManyWithoutExamInput>
  }

  export type ExamDetailScalarWhereInput = {
    AND?: ExamDetailScalarWhereInput | ExamDetailScalarWhereInput[]
    OR?: ExamDetailScalarWhereInput[]
    NOT?: ExamDetailScalarWhereInput | ExamDetailScalarWhereInput[]
    id?: IntFilter<"ExamDetail"> | number
    examId?: IntFilter<"ExamDetail"> | number
    examTypeId?: IntFilter<"ExamDetail"> | number
  }

  export type ExamDetailCreateWithoutExamTypeInput = {
    exam: ExamCreateNestedOneWithoutDetailsInput
  }

  export type ExamDetailUncheckedCreateWithoutExamTypeInput = {
    id?: number
    examId: number
  }

  export type ExamDetailCreateOrConnectWithoutExamTypeInput = {
    where: ExamDetailWhereUniqueInput
    create: XOR<ExamDetailCreateWithoutExamTypeInput, ExamDetailUncheckedCreateWithoutExamTypeInput>
  }

  export type ExamDetailCreateManyExamTypeInputEnvelope = {
    data: ExamDetailCreateManyExamTypeInput | ExamDetailCreateManyExamTypeInput[]
    skipDuplicates?: boolean
  }

  export type ExamDetailUpsertWithWhereUniqueWithoutExamTypeInput = {
    where: ExamDetailWhereUniqueInput
    update: XOR<ExamDetailUpdateWithoutExamTypeInput, ExamDetailUncheckedUpdateWithoutExamTypeInput>
    create: XOR<ExamDetailCreateWithoutExamTypeInput, ExamDetailUncheckedCreateWithoutExamTypeInput>
  }

  export type ExamDetailUpdateWithWhereUniqueWithoutExamTypeInput = {
    where: ExamDetailWhereUniqueInput
    data: XOR<ExamDetailUpdateWithoutExamTypeInput, ExamDetailUncheckedUpdateWithoutExamTypeInput>
  }

  export type ExamDetailUpdateManyWithWhereWithoutExamTypeInput = {
    where: ExamDetailScalarWhereInput
    data: XOR<ExamDetailUpdateManyMutationInput, ExamDetailUncheckedUpdateManyWithoutExamTypeInput>
  }

  export type ExamCreateWithoutDetailsInput = {
    requestDate: Date | string
    samples?: SampleCreateNestedManyWithoutExamInput
    doctor: DoctorCreateNestedOneWithoutExamsInput
    patient: PatientCreateNestedOneWithoutExamsInput
  }

  export type ExamUncheckedCreateWithoutDetailsInput = {
    id?: number
    requestDate: Date | string
    doctorId: number
    patientId: number
    samples?: SampleUncheckedCreateNestedManyWithoutExamInput
  }

  export type ExamCreateOrConnectWithoutDetailsInput = {
    where: ExamWhereUniqueInput
    create: XOR<ExamCreateWithoutDetailsInput, ExamUncheckedCreateWithoutDetailsInput>
  }

  export type ExamTypeCreateWithoutDetailsInput = {
    name: string
    description: string
  }

  export type ExamTypeUncheckedCreateWithoutDetailsInput = {
    id?: number
    name: string
    description: string
  }

  export type ExamTypeCreateOrConnectWithoutDetailsInput = {
    where: ExamTypeWhereUniqueInput
    create: XOR<ExamTypeCreateWithoutDetailsInput, ExamTypeUncheckedCreateWithoutDetailsInput>
  }

  export type ExamUpsertWithoutDetailsInput = {
    update: XOR<ExamUpdateWithoutDetailsInput, ExamUncheckedUpdateWithoutDetailsInput>
    create: XOR<ExamCreateWithoutDetailsInput, ExamUncheckedCreateWithoutDetailsInput>
    where?: ExamWhereInput
  }

  export type ExamUpdateToOneWithWhereWithoutDetailsInput = {
    where?: ExamWhereInput
    data: XOR<ExamUpdateWithoutDetailsInput, ExamUncheckedUpdateWithoutDetailsInput>
  }

  export type ExamUpdateWithoutDetailsInput = {
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUpdateManyWithoutExamNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutExamsNestedInput
    patient?: PatientUpdateOneRequiredWithoutExamsNestedInput
  }

  export type ExamUncheckedUpdateWithoutDetailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    samples?: SampleUncheckedUpdateManyWithoutExamNestedInput
  }

  export type ExamTypeUpsertWithoutDetailsInput = {
    update: XOR<ExamTypeUpdateWithoutDetailsInput, ExamTypeUncheckedUpdateWithoutDetailsInput>
    create: XOR<ExamTypeCreateWithoutDetailsInput, ExamTypeUncheckedCreateWithoutDetailsInput>
    where?: ExamTypeWhereInput
  }

  export type ExamTypeUpdateToOneWithWhereWithoutDetailsInput = {
    where?: ExamTypeWhereInput
    data: XOR<ExamTypeUpdateWithoutDetailsInput, ExamTypeUncheckedUpdateWithoutDetailsInput>
  }

  export type ExamTypeUpdateWithoutDetailsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ExamTypeUncheckedUpdateWithoutDetailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ResultCreateWithoutSampleInput = {
    resultDate: Date | string
    observations?: string | null
    details?: DetailResultCreateNestedManyWithoutResultInput
  }

  export type ResultUncheckedCreateWithoutSampleInput = {
    id?: number
    resultDate: Date | string
    observations?: string | null
    details?: DetailResultUncheckedCreateNestedManyWithoutResultInput
  }

  export type ResultCreateOrConnectWithoutSampleInput = {
    where: ResultWhereUniqueInput
    create: XOR<ResultCreateWithoutSampleInput, ResultUncheckedCreateWithoutSampleInput>
  }

  export type ExamCreateWithoutSamplesInput = {
    requestDate: Date | string
    doctor: DoctorCreateNestedOneWithoutExamsInput
    patient: PatientCreateNestedOneWithoutExamsInput
    details?: ExamDetailCreateNestedManyWithoutExamInput
  }

  export type ExamUncheckedCreateWithoutSamplesInput = {
    id?: number
    requestDate: Date | string
    doctorId: number
    patientId: number
    details?: ExamDetailUncheckedCreateNestedManyWithoutExamInput
  }

  export type ExamCreateOrConnectWithoutSamplesInput = {
    where: ExamWhereUniqueInput
    create: XOR<ExamCreateWithoutSamplesInput, ExamUncheckedCreateWithoutSamplesInput>
  }

  export type SampleTypeCreateWithoutSamplesInput = {
    name: string
    description: string
  }

  export type SampleTypeUncheckedCreateWithoutSamplesInput = {
    id?: number
    name: string
    description: string
  }

  export type SampleTypeCreateOrConnectWithoutSamplesInput = {
    where: SampleTypeWhereUniqueInput
    create: XOR<SampleTypeCreateWithoutSamplesInput, SampleTypeUncheckedCreateWithoutSamplesInput>
  }

  export type ResultUpsertWithoutSampleInput = {
    update: XOR<ResultUpdateWithoutSampleInput, ResultUncheckedUpdateWithoutSampleInput>
    create: XOR<ResultCreateWithoutSampleInput, ResultUncheckedCreateWithoutSampleInput>
    where?: ResultWhereInput
  }

  export type ResultUpdateToOneWithWhereWithoutSampleInput = {
    where?: ResultWhereInput
    data: XOR<ResultUpdateWithoutSampleInput, ResultUncheckedUpdateWithoutSampleInput>
  }

  export type ResultUpdateWithoutSampleInput = {
    resultDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    details?: DetailResultUpdateManyWithoutResultNestedInput
  }

  export type ResultUncheckedUpdateWithoutSampleInput = {
    id?: IntFieldUpdateOperationsInput | number
    resultDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    details?: DetailResultUncheckedUpdateManyWithoutResultNestedInput
  }

  export type ExamUpsertWithoutSamplesInput = {
    update: XOR<ExamUpdateWithoutSamplesInput, ExamUncheckedUpdateWithoutSamplesInput>
    create: XOR<ExamCreateWithoutSamplesInput, ExamUncheckedCreateWithoutSamplesInput>
    where?: ExamWhereInput
  }

  export type ExamUpdateToOneWithWhereWithoutSamplesInput = {
    where?: ExamWhereInput
    data: XOR<ExamUpdateWithoutSamplesInput, ExamUncheckedUpdateWithoutSamplesInput>
  }

  export type ExamUpdateWithoutSamplesInput = {
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutExamsNestedInput
    patient?: PatientUpdateOneRequiredWithoutExamsNestedInput
    details?: ExamDetailUpdateManyWithoutExamNestedInput
  }

  export type ExamUncheckedUpdateWithoutSamplesInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    details?: ExamDetailUncheckedUpdateManyWithoutExamNestedInput
  }

  export type SampleTypeUpsertWithoutSamplesInput = {
    update: XOR<SampleTypeUpdateWithoutSamplesInput, SampleTypeUncheckedUpdateWithoutSamplesInput>
    create: XOR<SampleTypeCreateWithoutSamplesInput, SampleTypeUncheckedCreateWithoutSamplesInput>
    where?: SampleTypeWhereInput
  }

  export type SampleTypeUpdateToOneWithWhereWithoutSamplesInput = {
    where?: SampleTypeWhereInput
    data: XOR<SampleTypeUpdateWithoutSamplesInput, SampleTypeUncheckedUpdateWithoutSamplesInput>
  }

  export type SampleTypeUpdateWithoutSamplesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type SampleTypeUncheckedUpdateWithoutSamplesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type SampleCreateWithoutSampleTypeInput = {
    sampleDate: Date | string
    observations?: string | null
    result?: ResultCreateNestedOneWithoutSampleInput
    exam: ExamCreateNestedOneWithoutSamplesInput
  }

  export type SampleUncheckedCreateWithoutSampleTypeInput = {
    id?: number
    examId: number
    sampleDate: Date | string
    observations?: string | null
    result?: ResultUncheckedCreateNestedOneWithoutSampleInput
  }

  export type SampleCreateOrConnectWithoutSampleTypeInput = {
    where: SampleWhereUniqueInput
    create: XOR<SampleCreateWithoutSampleTypeInput, SampleUncheckedCreateWithoutSampleTypeInput>
  }

  export type SampleCreateManySampleTypeInputEnvelope = {
    data: SampleCreateManySampleTypeInput | SampleCreateManySampleTypeInput[]
    skipDuplicates?: boolean
  }

  export type SampleUpsertWithWhereUniqueWithoutSampleTypeInput = {
    where: SampleWhereUniqueInput
    update: XOR<SampleUpdateWithoutSampleTypeInput, SampleUncheckedUpdateWithoutSampleTypeInput>
    create: XOR<SampleCreateWithoutSampleTypeInput, SampleUncheckedCreateWithoutSampleTypeInput>
  }

  export type SampleUpdateWithWhereUniqueWithoutSampleTypeInput = {
    where: SampleWhereUniqueInput
    data: XOR<SampleUpdateWithoutSampleTypeInput, SampleUncheckedUpdateWithoutSampleTypeInput>
  }

  export type SampleUpdateManyWithWhereWithoutSampleTypeInput = {
    where: SampleScalarWhereInput
    data: XOR<SampleUpdateManyMutationInput, SampleUncheckedUpdateManyWithoutSampleTypeInput>
  }

  export type DetailResultCreateWithoutMagnitudeInput = {
    numericValue: number
    qualitativeInterpretation: string
    qualitativeResult: string
    additionalDescription: string
    result: ResultCreateNestedOneWithoutDetailsInput
  }

  export type DetailResultUncheckedCreateWithoutMagnitudeInput = {
    id?: number
    resultId: number
    numericValue: number
    qualitativeInterpretation: string
    qualitativeResult: string
    additionalDescription: string
  }

  export type DetailResultCreateOrConnectWithoutMagnitudeInput = {
    where: DetailResultWhereUniqueInput
    create: XOR<DetailResultCreateWithoutMagnitudeInput, DetailResultUncheckedCreateWithoutMagnitudeInput>
  }

  export type DetailResultCreateManyMagnitudeInputEnvelope = {
    data: DetailResultCreateManyMagnitudeInput | DetailResultCreateManyMagnitudeInput[]
    skipDuplicates?: boolean
  }

  export type DetailResultUpsertWithWhereUniqueWithoutMagnitudeInput = {
    where: DetailResultWhereUniqueInput
    update: XOR<DetailResultUpdateWithoutMagnitudeInput, DetailResultUncheckedUpdateWithoutMagnitudeInput>
    create: XOR<DetailResultCreateWithoutMagnitudeInput, DetailResultUncheckedCreateWithoutMagnitudeInput>
  }

  export type DetailResultUpdateWithWhereUniqueWithoutMagnitudeInput = {
    where: DetailResultWhereUniqueInput
    data: XOR<DetailResultUpdateWithoutMagnitudeInput, DetailResultUncheckedUpdateWithoutMagnitudeInput>
  }

  export type DetailResultUpdateManyWithWhereWithoutMagnitudeInput = {
    where: DetailResultScalarWhereInput
    data: XOR<DetailResultUpdateManyMutationInput, DetailResultUncheckedUpdateManyWithoutMagnitudeInput>
  }

  export type DetailResultScalarWhereInput = {
    AND?: DetailResultScalarWhereInput | DetailResultScalarWhereInput[]
    OR?: DetailResultScalarWhereInput[]
    NOT?: DetailResultScalarWhereInput | DetailResultScalarWhereInput[]
    id?: IntFilter<"DetailResult"> | number
    resultId?: IntFilter<"DetailResult"> | number
    magnitudeId?: IntFilter<"DetailResult"> | number
    numericValue?: FloatFilter<"DetailResult"> | number
    qualitativeInterpretation?: StringFilter<"DetailResult"> | string
    qualitativeResult?: StringFilter<"DetailResult"> | string
    additionalDescription?: StringFilter<"DetailResult"> | string
  }

  export type DetailResultCreateWithoutResultInput = {
    numericValue: number
    qualitativeInterpretation: string
    qualitativeResult: string
    additionalDescription: string
    magnitude: MagnitudeCreateNestedOneWithoutDetailsInput
  }

  export type DetailResultUncheckedCreateWithoutResultInput = {
    id?: number
    magnitudeId: number
    numericValue: number
    qualitativeInterpretation: string
    qualitativeResult: string
    additionalDescription: string
  }

  export type DetailResultCreateOrConnectWithoutResultInput = {
    where: DetailResultWhereUniqueInput
    create: XOR<DetailResultCreateWithoutResultInput, DetailResultUncheckedCreateWithoutResultInput>
  }

  export type DetailResultCreateManyResultInputEnvelope = {
    data: DetailResultCreateManyResultInput | DetailResultCreateManyResultInput[]
    skipDuplicates?: boolean
  }

  export type SampleCreateWithoutResultInput = {
    sampleDate: Date | string
    observations?: string | null
    exam: ExamCreateNestedOneWithoutSamplesInput
    sampleType: SampleTypeCreateNestedOneWithoutSamplesInput
  }

  export type SampleUncheckedCreateWithoutResultInput = {
    id?: number
    examId: number
    sampleDate: Date | string
    sampleTypeId: number
    observations?: string | null
  }

  export type SampleCreateOrConnectWithoutResultInput = {
    where: SampleWhereUniqueInput
    create: XOR<SampleCreateWithoutResultInput, SampleUncheckedCreateWithoutResultInput>
  }

  export type DetailResultUpsertWithWhereUniqueWithoutResultInput = {
    where: DetailResultWhereUniqueInput
    update: XOR<DetailResultUpdateWithoutResultInput, DetailResultUncheckedUpdateWithoutResultInput>
    create: XOR<DetailResultCreateWithoutResultInput, DetailResultUncheckedCreateWithoutResultInput>
  }

  export type DetailResultUpdateWithWhereUniqueWithoutResultInput = {
    where: DetailResultWhereUniqueInput
    data: XOR<DetailResultUpdateWithoutResultInput, DetailResultUncheckedUpdateWithoutResultInput>
  }

  export type DetailResultUpdateManyWithWhereWithoutResultInput = {
    where: DetailResultScalarWhereInput
    data: XOR<DetailResultUpdateManyMutationInput, DetailResultUncheckedUpdateManyWithoutResultInput>
  }

  export type SampleUpsertWithoutResultInput = {
    update: XOR<SampleUpdateWithoutResultInput, SampleUncheckedUpdateWithoutResultInput>
    create: XOR<SampleCreateWithoutResultInput, SampleUncheckedCreateWithoutResultInput>
    where?: SampleWhereInput
  }

  export type SampleUpdateToOneWithWhereWithoutResultInput = {
    where?: SampleWhereInput
    data: XOR<SampleUpdateWithoutResultInput, SampleUncheckedUpdateWithoutResultInput>
  }

  export type SampleUpdateWithoutResultInput = {
    sampleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    exam?: ExamUpdateOneRequiredWithoutSamplesNestedInput
    sampleType?: SampleTypeUpdateOneRequiredWithoutSamplesNestedInput
  }

  export type SampleUncheckedUpdateWithoutResultInput = {
    id?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    sampleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sampleTypeId?: IntFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ResultCreateWithoutDetailsInput = {
    resultDate: Date | string
    observations?: string | null
    sample: SampleCreateNestedOneWithoutResultInput
  }

  export type ResultUncheckedCreateWithoutDetailsInput = {
    id?: number
    resultDate: Date | string
    observations?: string | null
    sampleId: number
  }

  export type ResultCreateOrConnectWithoutDetailsInput = {
    where: ResultWhereUniqueInput
    create: XOR<ResultCreateWithoutDetailsInput, ResultUncheckedCreateWithoutDetailsInput>
  }

  export type MagnitudeCreateWithoutDetailsInput = {
    name: string
    unitMeasure: string
  }

  export type MagnitudeUncheckedCreateWithoutDetailsInput = {
    id?: number
    name: string
    unitMeasure: string
  }

  export type MagnitudeCreateOrConnectWithoutDetailsInput = {
    where: MagnitudeWhereUniqueInput
    create: XOR<MagnitudeCreateWithoutDetailsInput, MagnitudeUncheckedCreateWithoutDetailsInput>
  }

  export type ResultUpsertWithoutDetailsInput = {
    update: XOR<ResultUpdateWithoutDetailsInput, ResultUncheckedUpdateWithoutDetailsInput>
    create: XOR<ResultCreateWithoutDetailsInput, ResultUncheckedCreateWithoutDetailsInput>
    where?: ResultWhereInput
  }

  export type ResultUpdateToOneWithWhereWithoutDetailsInput = {
    where?: ResultWhereInput
    data: XOR<ResultUpdateWithoutDetailsInput, ResultUncheckedUpdateWithoutDetailsInput>
  }

  export type ResultUpdateWithoutDetailsInput = {
    resultDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    sample?: SampleUpdateOneRequiredWithoutResultNestedInput
  }

  export type ResultUncheckedUpdateWithoutDetailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    resultDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    sampleId?: IntFieldUpdateOperationsInput | number
  }

  export type MagnitudeUpsertWithoutDetailsInput = {
    update: XOR<MagnitudeUpdateWithoutDetailsInput, MagnitudeUncheckedUpdateWithoutDetailsInput>
    create: XOR<MagnitudeCreateWithoutDetailsInput, MagnitudeUncheckedCreateWithoutDetailsInput>
    where?: MagnitudeWhereInput
  }

  export type MagnitudeUpdateToOneWithWhereWithoutDetailsInput = {
    where?: MagnitudeWhereInput
    data: XOR<MagnitudeUpdateWithoutDetailsInput, MagnitudeUncheckedUpdateWithoutDetailsInput>
  }

  export type MagnitudeUpdateWithoutDetailsInput = {
    name?: StringFieldUpdateOperationsInput | string
    unitMeasure?: StringFieldUpdateOperationsInput | string
  }

  export type MagnitudeUncheckedUpdateWithoutDetailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    unitMeasure?: StringFieldUpdateOperationsInput | string
  }

  export type ExamCreateWithoutPatientInput = {
    requestDate: Date | string
    samples?: SampleCreateNestedManyWithoutExamInput
    doctor: DoctorCreateNestedOneWithoutExamsInput
    details?: ExamDetailCreateNestedManyWithoutExamInput
  }

  export type ExamUncheckedCreateWithoutPatientInput = {
    id?: number
    requestDate: Date | string
    doctorId: number
    samples?: SampleUncheckedCreateNestedManyWithoutExamInput
    details?: ExamDetailUncheckedCreateNestedManyWithoutExamInput
  }

  export type ExamCreateOrConnectWithoutPatientInput = {
    where: ExamWhereUniqueInput
    create: XOR<ExamCreateWithoutPatientInput, ExamUncheckedCreateWithoutPatientInput>
  }

  export type ExamCreateManyPatientInputEnvelope = {
    data: ExamCreateManyPatientInput | ExamCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type ExamUpsertWithWhereUniqueWithoutPatientInput = {
    where: ExamWhereUniqueInput
    update: XOR<ExamUpdateWithoutPatientInput, ExamUncheckedUpdateWithoutPatientInput>
    create: XOR<ExamCreateWithoutPatientInput, ExamUncheckedCreateWithoutPatientInput>
  }

  export type ExamUpdateWithWhereUniqueWithoutPatientInput = {
    where: ExamWhereUniqueInput
    data: XOR<ExamUpdateWithoutPatientInput, ExamUncheckedUpdateWithoutPatientInput>
  }

  export type ExamUpdateManyWithWhereWithoutPatientInput = {
    where: ExamScalarWhereInput
    data: XOR<ExamUpdateManyMutationInput, ExamUncheckedUpdateManyWithoutPatientInput>
  }

  export type ExamScalarWhereInput = {
    AND?: ExamScalarWhereInput | ExamScalarWhereInput[]
    OR?: ExamScalarWhereInput[]
    NOT?: ExamScalarWhereInput | ExamScalarWhereInput[]
    id?: IntFilter<"Exam"> | number
    requestDate?: DateTimeFilter<"Exam"> | Date | string
    doctorId?: IntFilter<"Exam"> | number
    patientId?: IntFilter<"Exam"> | number
  }

  export type ExamCreateWithoutDoctorInput = {
    requestDate: Date | string
    samples?: SampleCreateNestedManyWithoutExamInput
    patient: PatientCreateNestedOneWithoutExamsInput
    details?: ExamDetailCreateNestedManyWithoutExamInput
  }

  export type ExamUncheckedCreateWithoutDoctorInput = {
    id?: number
    requestDate: Date | string
    patientId: number
    samples?: SampleUncheckedCreateNestedManyWithoutExamInput
    details?: ExamDetailUncheckedCreateNestedManyWithoutExamInput
  }

  export type ExamCreateOrConnectWithoutDoctorInput = {
    where: ExamWhereUniqueInput
    create: XOR<ExamCreateWithoutDoctorInput, ExamUncheckedCreateWithoutDoctorInput>
  }

  export type ExamCreateManyDoctorInputEnvelope = {
    data: ExamCreateManyDoctorInput | ExamCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type ExamUpsertWithWhereUniqueWithoutDoctorInput = {
    where: ExamWhereUniqueInput
    update: XOR<ExamUpdateWithoutDoctorInput, ExamUncheckedUpdateWithoutDoctorInput>
    create: XOR<ExamCreateWithoutDoctorInput, ExamUncheckedCreateWithoutDoctorInput>
  }

  export type ExamUpdateWithWhereUniqueWithoutDoctorInput = {
    where: ExamWhereUniqueInput
    data: XOR<ExamUpdateWithoutDoctorInput, ExamUncheckedUpdateWithoutDoctorInput>
  }

  export type ExamUpdateManyWithWhereWithoutDoctorInput = {
    where: ExamScalarWhereInput
    data: XOR<ExamUpdateManyMutationInput, ExamUncheckedUpdateManyWithoutDoctorInput>
  }

  export type SampleCreateManyExamInput = {
    id?: number
    sampleDate: Date | string
    sampleTypeId: number
    observations?: string | null
  }

  export type ExamDetailCreateManyExamInput = {
    id?: number
    examTypeId: number
  }

  export type SampleUpdateWithoutExamInput = {
    sampleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    result?: ResultUpdateOneWithoutSampleNestedInput
    sampleType?: SampleTypeUpdateOneRequiredWithoutSamplesNestedInput
  }

  export type SampleUncheckedUpdateWithoutExamInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sampleTypeId?: IntFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    result?: ResultUncheckedUpdateOneWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateManyWithoutExamInput = {
    id?: IntFieldUpdateOperationsInput | number
    sampleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sampleTypeId?: IntFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExamDetailUpdateWithoutExamInput = {
    examType?: ExamTypeUpdateOneRequiredWithoutDetailsNestedInput
  }

  export type ExamDetailUncheckedUpdateWithoutExamInput = {
    id?: IntFieldUpdateOperationsInput | number
    examTypeId?: IntFieldUpdateOperationsInput | number
  }

  export type ExamDetailUncheckedUpdateManyWithoutExamInput = {
    id?: IntFieldUpdateOperationsInput | number
    examTypeId?: IntFieldUpdateOperationsInput | number
  }

  export type ExamDetailCreateManyExamTypeInput = {
    id?: number
    examId: number
  }

  export type ExamDetailUpdateWithoutExamTypeInput = {
    exam?: ExamUpdateOneRequiredWithoutDetailsNestedInput
  }

  export type ExamDetailUncheckedUpdateWithoutExamTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
  }

  export type ExamDetailUncheckedUpdateManyWithoutExamTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
  }

  export type SampleCreateManySampleTypeInput = {
    id?: number
    examId: number
    sampleDate: Date | string
    observations?: string | null
  }

  export type SampleUpdateWithoutSampleTypeInput = {
    sampleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    result?: ResultUpdateOneWithoutSampleNestedInput
    exam?: ExamUpdateOneRequiredWithoutSamplesNestedInput
  }

  export type SampleUncheckedUpdateWithoutSampleTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    sampleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    result?: ResultUncheckedUpdateOneWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateManyWithoutSampleTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    examId?: IntFieldUpdateOperationsInput | number
    sampleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DetailResultCreateManyMagnitudeInput = {
    id?: number
    resultId: number
    numericValue: number
    qualitativeInterpretation: string
    qualitativeResult: string
    additionalDescription: string
  }

  export type DetailResultUpdateWithoutMagnitudeInput = {
    numericValue?: FloatFieldUpdateOperationsInput | number
    qualitativeInterpretation?: StringFieldUpdateOperationsInput | string
    qualitativeResult?: StringFieldUpdateOperationsInput | string
    additionalDescription?: StringFieldUpdateOperationsInput | string
    result?: ResultUpdateOneRequiredWithoutDetailsNestedInput
  }

  export type DetailResultUncheckedUpdateWithoutMagnitudeInput = {
    id?: IntFieldUpdateOperationsInput | number
    resultId?: IntFieldUpdateOperationsInput | number
    numericValue?: FloatFieldUpdateOperationsInput | number
    qualitativeInterpretation?: StringFieldUpdateOperationsInput | string
    qualitativeResult?: StringFieldUpdateOperationsInput | string
    additionalDescription?: StringFieldUpdateOperationsInput | string
  }

  export type DetailResultUncheckedUpdateManyWithoutMagnitudeInput = {
    id?: IntFieldUpdateOperationsInput | number
    resultId?: IntFieldUpdateOperationsInput | number
    numericValue?: FloatFieldUpdateOperationsInput | number
    qualitativeInterpretation?: StringFieldUpdateOperationsInput | string
    qualitativeResult?: StringFieldUpdateOperationsInput | string
    additionalDescription?: StringFieldUpdateOperationsInput | string
  }

  export type DetailResultCreateManyResultInput = {
    id?: number
    magnitudeId: number
    numericValue: number
    qualitativeInterpretation: string
    qualitativeResult: string
    additionalDescription: string
  }

  export type DetailResultUpdateWithoutResultInput = {
    numericValue?: FloatFieldUpdateOperationsInput | number
    qualitativeInterpretation?: StringFieldUpdateOperationsInput | string
    qualitativeResult?: StringFieldUpdateOperationsInput | string
    additionalDescription?: StringFieldUpdateOperationsInput | string
    magnitude?: MagnitudeUpdateOneRequiredWithoutDetailsNestedInput
  }

  export type DetailResultUncheckedUpdateWithoutResultInput = {
    id?: IntFieldUpdateOperationsInput | number
    magnitudeId?: IntFieldUpdateOperationsInput | number
    numericValue?: FloatFieldUpdateOperationsInput | number
    qualitativeInterpretation?: StringFieldUpdateOperationsInput | string
    qualitativeResult?: StringFieldUpdateOperationsInput | string
    additionalDescription?: StringFieldUpdateOperationsInput | string
  }

  export type DetailResultUncheckedUpdateManyWithoutResultInput = {
    id?: IntFieldUpdateOperationsInput | number
    magnitudeId?: IntFieldUpdateOperationsInput | number
    numericValue?: FloatFieldUpdateOperationsInput | number
    qualitativeInterpretation?: StringFieldUpdateOperationsInput | string
    qualitativeResult?: StringFieldUpdateOperationsInput | string
    additionalDescription?: StringFieldUpdateOperationsInput | string
  }

  export type ExamCreateManyPatientInput = {
    id?: number
    requestDate: Date | string
    doctorId: number
  }

  export type ExamUpdateWithoutPatientInput = {
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUpdateManyWithoutExamNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutExamsNestedInput
    details?: ExamDetailUpdateManyWithoutExamNestedInput
  }

  export type ExamUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: IntFieldUpdateOperationsInput | number
    samples?: SampleUncheckedUpdateManyWithoutExamNestedInput
    details?: ExamDetailUncheckedUpdateManyWithoutExamNestedInput
  }

  export type ExamUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: IntFieldUpdateOperationsInput | number
  }

  export type ExamCreateManyDoctorInput = {
    id?: number
    requestDate: Date | string
    patientId: number
  }

  export type ExamUpdateWithoutDoctorInput = {
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    samples?: SampleUpdateManyWithoutExamNestedInput
    patient?: PatientUpdateOneRequiredWithoutExamsNestedInput
    details?: ExamDetailUpdateManyWithoutExamNestedInput
  }

  export type ExamUncheckedUpdateWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: IntFieldUpdateOperationsInput | number
    samples?: SampleUncheckedUpdateManyWithoutExamNestedInput
    details?: ExamDetailUncheckedUpdateManyWithoutExamNestedInput
  }

  export type ExamUncheckedUpdateManyWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestDate?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ExamCountOutputTypeDefaultArgs instead
     */
    export type ExamCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExamCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExamTypeCountOutputTypeDefaultArgs instead
     */
    export type ExamTypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExamTypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SampleTypeCountOutputTypeDefaultArgs instead
     */
    export type SampleTypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SampleTypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MagnitudeCountOutputTypeDefaultArgs instead
     */
    export type MagnitudeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MagnitudeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResultCountOutputTypeDefaultArgs instead
     */
    export type ResultCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResultCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientCountOutputTypeDefaultArgs instead
     */
    export type PatientCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DoctorCountOutputTypeDefaultArgs instead
     */
    export type DoctorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DoctorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExamDefaultArgs instead
     */
    export type ExamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExamDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExamTypeDefaultArgs instead
     */
    export type ExamTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExamTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExamDetailDefaultArgs instead
     */
    export type ExamDetailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExamDetailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SampleDefaultArgs instead
     */
    export type SampleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SampleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SampleTypeDefaultArgs instead
     */
    export type SampleTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SampleTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MagnitudeDefaultArgs instead
     */
    export type MagnitudeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MagnitudeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResultDefaultArgs instead
     */
    export type ResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResultDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DetailResultDefaultArgs instead
     */
    export type DetailResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DetailResultDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientDefaultArgs instead
     */
    export type PatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DoctorDefaultArgs instead
     */
    export type DoctorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DoctorDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}